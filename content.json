{"meta":{"title":"秦伟的个人博客","subtitle":"前端及全栈知识点、面试题与学习链接的整理","description":"前端及全栈知识点、面试题与学习链接的整理","author":"秦伟","url":"http://www.bluedream.top","root":"/"},"pages":[{"title":"categories","date":"2019-08-30T02:14:28.000Z","updated":"2019-08-30T02:15:01.036Z","comments":false,"path":"categories/index.html","permalink":"http://www.bluedream.top/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-08-30T02:12:55.000Z","updated":"2019-08-30T02:14:06.907Z","comments":false,"path":"tags/index.html","permalink":"http://www.bluedream.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"字节跳动面经总结","slug":"字节跳动面经总结","date":"2019-09-19T15:30:33.000Z","updated":"2019-09-26T07:59:07.905Z","comments":true,"path":"前端面试题/字节跳动面经总结.html","link":"","permalink":"http://www.bluedream.top/前端面试题/字节跳动面经总结.html","excerpt":"","text":"记录一下自己的第二次面试经历 面试公司：字节跳动 公司介绍： ​ 字节跳动是全球第一家将人工智能应用到主产品的科技公司。全系产品矩阵包括今日头条、抖音、西瓜视频、火山小视频、TopBuzz、Faceu激萌、图虫、懂车帝等多款产品。截止2019年1月，字节跳动旗下全线产品日活超过6亿，月活超过10亿。字节跳动也在积极进行国际化部署，产品覆盖150多个国家和地区，75个语种，在40多个国家和地区排在应用商店总榜前列。 加入我们，一起和优秀的人做有挑战的事。 点击官网链接，了解更多公司信息 面试岗位：前端研发工程师职位（校招全职） 面试形式：视频面试 面试时间：2019-09-19 17:00:00 GMT+08:00（周四下午五点） 面试来源：字节跳动商业平台团队内部前端岗直推，“流云破风”在2019.9.13发布于前端迷公众号 发送邮箱：yuanlin@bytedance.com ，标注邮件标题：内推，其他岗位，实习校招社招均可 团队特色：全栈、NodeJS&amp;框架、React/Vue、前端基础建设、组件库、数据可视化、多个新方向、自主发挥空间 岗位描述： 1234负责前端技术选型和开发工作；优化前端功能设计，解决各种浏览器和终端设备的兼容性问题；通过技术手段，提升用户体验并满足高性能要求；通用组件、类库编写，提升开发效率和质量。 岗位要求： 1234567本科及以上学历，计算机相关专业； 精通HTML、CSS、JS，熟悉页面架构和布局，熟悉HTML5/CSS3等常用技术；熟悉常用UI框架（如bootstrap/pure/kendo等);精通JavaScript、AJAX、DOM、jQuery等技术；熟悉NodeJS，熟练使用Grunt、Gulp、Webpack等构建工具；具备MVVM框架开发经验，如React、VueJS、AngularJS等；良好的沟通和团队协作能力、热爱技术、责任心强、能推动技术框架的落地使用。 考察内容: 我们主要考察通用型的业务问题和过往的项目经历 价值观和软性技能也是我们选择人才的重要因素 12345678910111213141516171819202122232425262728293031- 自我介绍 什么方式学习- div居中几种方法 盒模型 position属性详细问，相对定位绝对定位fixed box-sizing作用 http状态码304 http请求方法get post put delete head cookie应用在什么方面 cookie有哪些属性、大小 localStorage，sessionStorage的区别 网页访问速度慢，怎么优化- es6（了解吗） this指向（有class的话指向哪里） 作用域 事件循环 异步原理，比如setTimeout 箭头函数与普通函数区别 原型链 闭包 变量提升- vue与jQuery区别 vue实现原理 vue绑定- 编程题： var versions=[&apos;1.45.0&apos;,&apos;1.5&apos;,&apos;6&apos;,&apos;3.3.3.3.3.3.3&apos;] var sorted=[&apos;1.5&apos;,&apos;1.45.0&apos;,&apos;3.3.3.3.3.3&apos;,&apos;6&apos;] 面试就是一个不断见面，试验，总结，归纳与提高的过程。 面试不同于考试，考试机会难得，形式及考察能力单一，而面试机会很多，形式不同，考察能力全面。 只要一直面，总会有进步，总会有提高的。 ​ 写于： 2019.9.19 面试之前找的各种面经投递简历后过了一段时间接到约面小姐姐的电话，了解你的具体的实习时间段，和你约定面试时间。你确认后小姐姐挂电话。过段时间hr给你发视频面试的链接，是牛客网用来面试的链接。 正文面试前做出的准备我在面试前准备以下几点东西，似乎都解决了面试的部分问题 面试前我查阅了其他朋友写的字节跳动的面经以及面试题目，寻找题目解答，把它们总结了下来，用了一天一夜的时间，并把它们放到了我的这个博客上面。我做了一份详细的自我介绍，通过三段开发经历来总结出了我的一些优点和开发经验，用讲故事的形式说明情况，最后点明故事中表现了自己具有哪些素质，点明自己为什么可以做前端的工作。字节跳动的宗旨“和优秀的人一起做有挑战的事情”也被我用到了自我介绍中，“我认为我是优秀的人，也喜欢做有挑战的事情，更喜欢与优秀的人为伍”“我希望搭上字节跳动这架火箭”等等。快要面试时做出的准备快要面试了，第一次面试，有些紧张，但还是像平常考试一样，将总结下来的面试题目总结、前端遇到问题的总结又看了一遍，把自己做好的自我介绍熟悉的几遍，给自己亲近的朋友发条消息获得她的祝福，又站在电脑桌前活动了一下身子，头脑顿时清醒利索了许多。 面试前奏由于紧张怕错过面试，早早的便坐在了电脑桌前。面试官迟到了一会，就给我发起了面试视频邀请，终于开始了。迎面是一个挺帅气的哥哥，简单的打了一下招呼，就进入了自我介绍的环节。由于自我介绍我已经熟悉过几遍了，自我介绍的效果看起来效果还是不错的。开始问我项目经历的细节以及自我介绍中的细节，由于项目经历确实是自己亲身经历过的事情，并且我一般项目完成时都会做一下总结，所以也能够答个头头是道。个人感觉上的，至于面试官怎么想的，我就不清楚了， 说不定是那种我就静静的看着你装逼的情况。 面试高潮来了来了，开始问技术的问题了。 你对Vue的理解有多少因为我在简历的项目经历中写了一个Vue项目，于是他问的时候就把我在项目中对Vue的理解和面试前准备的Vue总结结合起来回答。 用css2和css3分别写一下垂直居中和水平居中这道题我不会，并不知道css2和css3有什么区别以及写法，只会css3，我脑袋里有面试前总结的垂直居中和水平居中其中的两种方式，我就给他讲了一讲，倒是他没有再问下去，可能看出来我不会了吧。这也体现出了面试前知识点总结复习的重要性，不然你不会的东西你连说都不会说。 css3新增了一些属性，像flex，这是css3中很重要的改变，所以除了flex以外的垂直水平居中的技巧都是属于css2的。 css2的水平居中技巧将元素display为行内元素，再text-align:center;即可或者将块级元素定义一个宽度，再margin: 0 auto;即可 css3的水平居中技巧将元素display设为flex，再通过justify-content: center; 实现居中。 css2的垂直居中技巧单行内容的垂直居中可以通过设置相同height值和line-height值来实现。多行内容的垂直居中且高度可变可以通过设置上下相同的padding值来实现。行级盒子：小图标和标题对齐设置vertical-align: middle。绝对定位：top:50%; left:50%;的方法，需要已知块级的宽高 css3的垂直居中技巧将元素display设为flex，再通过align-items:center;来实现。 你对计算机网络的认识怎么样又是一道探底的题，判断能否从这里给你出题考察你 讲述一下计算机网络的七层应用层、表示层、会话层、传输层、网络层、数据链路层、物理层 TCP和UDP的区别是什么TCP：面向连接、传输可靠(保证数据正确性,保证数据顺序)、用于传输大量数据(流模式)、速度慢，建立连接需要开销较多(时间，系统资源)UDP：面向非连接、传输不可靠、用于传输少量数据(数据包模式)、速度快TCP和UDP协议的一些应用例子：TCP一般用于文件传输（FTP HTTP 对数据准确性要求高，速度可以相对慢），发送或接收邮件（POP IMAP SMTP 对数据准确性要求高，非紧急应用），远程登录（TELNET SSH 对数据准确性有一定要求，有连接的概念）等等；UDP一般用于即时通信（QQ聊天 对数据准确性和丢包要求比较低，但速度必须快），在线视频（RTSP 速度一定要快，保证视频连续，但是偶尔花了一个图像帧，人们还是能接受的），网络语音电话（VoIP 语音数据包一般比较小，需要高速发送，偶尔断音或串音也没有问题）等等。 TCP和UDP属于计算机网络中的哪一层网际层协议：IP协议、ICMP协议、ARP协议、RARP协议传输层协议：TCP协议、UDP协议应用层协议：FTP、Telnet、SMTP、HTTP、RIP、NFS、DNS HTTPS是什么HTTPS即加密的HTTP，HTTPS并不是一个新协议，而是HTTP+SSL（TLS）。原本HTTP先和TCP（假定传输层是TCP协议）直接通信，而加了SSL后，就变成HTTP先和SSL通信，再由SSL和TCP通信，相当于SSL被嵌在了HTTP和TCP之间 介绍几种常见的状态码2XX系列：代表请求已成功被服务器接收、理解、并接受。200状态码：表示请求已成功，请求所希望的响应头或数据体将随此响应返回201状态码：表示请求成功并且服务器创建了新的资源，且其 URI 已经随Location 头信息返回。3XX系列：代表需要客户端采取进一步的操作才能完成请求，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的 Location 域中指明。301状态码：被请求的资源已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。302状态码：请求的资源临时从不同的URI响应请求，但请求者应继续使用原有位置来进行以后的请求。304状态码：自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。4XX系列：表示请求错误。代表了客户端看起来可能发生了错误，妨碍了服务器的处理。401状态码：请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。403状态码：服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。404状态码：请求失败，请求所希望得到的资源未被在服务器上发现。5xx系列：代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。500状态码：服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。503状态码：由于临时的服务器维护或者过载，服务器当前无法处理请求。 闭包是什么闭包就是能够读取其他函数内部变量的函数。闭包的用途：可以读取函数内部的变量，并且让这些变量的值始终保持在内存中。 123456789101112131415// 输出全为10for(var i=0;i&lt;10;i++)&#123; setTimeout(function()&#123; console.log(i); &#125;,50);&#125;// 输出相应的输出for(var i=0;i&lt;10;i++)&#123; (function(i)&#123; setTimeout(function()&#123; console.log(i); &#125;,50); &#125;)(i);&#125; js的隐性转换和显性转换隐性转换为： 1 + ‘1’ = ‘11’显性转换Number(“24 cccc”);//结果：NaNParseInt(“24 cccc”);//结果：24备注：Number的显性转换比较严格，若无法强转则直接报错 NaN是什么，用typeof会输出什么Not a Number会输出 Number js的隐性转换和显性转换隐性转换为： 1 + ‘1’ = ‘11’显性转换Number(“24 cccc”);//结果：NaNParseInt(“24 cccc”);//结果：24备注：Number的显性转换比较严格，若无法强转则直接报错面试官后引伸了两个问题1 + -‘1’ + 1 等于什么等于 0 ，’1’前面的负号把其数字化，变为-1，则后值为1‘A’ - ‘B’ 等于什么NaN 跨域问题如何解决同源策略：浏览器安全策略，同协议、ip、端口的脚本才会执行。只要协议、域名、端口有任何一个不同，都被当作是不同的域js跨域是指通过js在不同的域之间进行数据传输或通信 通过jsonp跨域 jsonp在页面上引入不同域上的js脚本文件实现请求不同域上的数据 (1) 通过script标签引入一个js文件 (2) js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入 注：需要服务器端的页面进行相应的配合 通过修改document.domain来跨子域 使用window.name来进行跨域window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的，并不会因新页面的载入而进行重置。 知道babel么可以实现将ES6编译为ES5代码 用js实现判断一个变量是否为整数的函数实现思路：先判断该变量是否为Number类型，以此来缩小范围，再判断该变量除以1后是否与原值全等，若全等则返回true，若不全等则返回false 进程和线程是什么线程是最小的执行单元，而进程由至少一个线程组成。如何调度进程和线程，完全由操作系统决定，程序自己不能决定什么时候执行，执行多长时间。进程指计算机中已运行的程序。线程指操作系统能够进行运算调度的最小单位。 死锁是什么当两个以上的运算单元，双方都在等待对方停止运行，以获取系统资源，但是没有一方提前退出时，就称为死锁。 Left Join、Right Join、Inner Join 指的是什么 LEFT JOIN 关键字会从左表那里返回所有的行，即使在右表中没有匹配的行 RIGHT JOIN 关键字会右表那里返回所有的行，即使在左表中没有匹配的行 在表中存在至少一个匹配时，INNER JOIN 关键字返回行 快速排序用js怎么写 1234567891011121314151617181920function quickSort(arr) &#123; if(arr.length&lt;=1) &#123; return arr; &#125; var s = Math.floor(arr.length/2); var temp = arr.splice(s,1); var left=[]; var right=[]; for(var i=0;i&lt;arr.length;i++) &#123; if(arr[i]&lt;temp) &#123; left.push(arr[i]); &#125; if(arr[i]&gt;=temp) &#123; right.push(arr[i]); &#125; &#125; return quickSort(left).concat(temp,quickSort(right)); 面试尾声 面试官的突然一声“我这边没有什么问题了”，吓了我一跳，悬了悬了，我还想着跟他唠嗑两小时呢，唠嗑的感觉真好。 “我这边没有什么问题了，请等待hr的通知吧” 小技巧做项目小技巧每次项目完成后，都需要做一下项目的总结，这是做一两个项目并做总结的人比做很多的项目不做总结的人看起来更有经验的原因。古人说的好，“总结反思才能成长”。做简历小技巧套模板，注意写下什么时间毕业，尽可能的填充项目经验，项目经验写的详细些，重点是从项目中学到了什么。面试写代码小技巧写的代码记得加注释，考虑代码的时间复杂度问题，不会写代码一定要给面试官说一下你的思路，脑袋中想到什么说什么，部分解决方法也比说一声我不会强太多。总结实习的面试多进行基础知识的储备 我上个月的实习生面试是，两点半开始一面，结束后等个十分钟继续二面，视频面试。实习生的话只有两轮技术面+hr面。楼主加油，千万要准备好现场写一堆代码的准备�� 牛客上可以在线写代码，面试官可以实时看到的，写完代码后面试官还会就你写的代码进行提问。 技术岗一般连续面3轮。除非第一面安排在下午~ 我记得我那天从4点面到8点半，连续三轮（中间留了会吃饭时间） 面试官很有亲和力，面试过程更像是聊天多一点，但面试官提的问题也很有专业性，会对简历经历进行提问，并进行扩展，最后有对英语能力的考察。 面试官人很好,约定的六点面试,提前五分钟就到了面试间(还好我提前十分钟就在了..) 答题期间会根据我的答案给出建议和提示,全程虽然很紧张,但是知晓了自己的不足,考察点偏向基础和数据结构 问题如下: http协议知道吗? cookie session介绍一下 session表结构怎么设计,储存在哪里 你们的session cookie在项目里运用到哪里 算法题目:[删除链表中重复的节点]在一个排序的链表中,存在重复的节点,请删除该链表中重复的节点,重复的节点不保留,返回链表头指针.例如,链表1-2-3-3-4-4-5处理后为1-2-5 TCP/UDP的区别介绍一下 三次握手和四次挥手,time_wait是什么状态 B树 B+树区别说一下 数据库平时用到过什么 咱们先问MySQL MySQL索引原理知道吗 问了两种索引的区别(没记住…) 乐观锁悲观锁区别说一下 innodb和myisam的区别 数据库四种隔离状态 分别有什么问题 redis的数据结构 sortset底层,原理,怎么保证有序 总结: 就是自己太菜了..很多基础知识忘得很厉害,大公司感觉考察的都是基础,面试官在面试过程中有耐心,也会给与一些提示,素质很好 下来自己多背背知识,多刷一下leetcode吧..争取下次成功 面试用的视频面，面试官挺和善，问的内容也挺基础的，大概回忆着记录一下。 TCP和UDP的区别。TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接 TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付 TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的 UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等） 每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信 TCP首部开销20字节;UDP的首部开销小，只有8个字节 TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道 说一下你对http协议的理解这个我只讲了个三次握手和四次挥手的内容，面试官貌似不太满意 get和post的区别这个回答的也不太全，其中我提到了数据存储在request body，面试官又问了我request body存储get和post的区别，emmmm…实在不会就下一题了 css实现一个左侧固定20px，右侧响应式的布局这个就蒙蔽了，因为我用的bootstrap是自带的响应式布局，不太了解原生css。回答的面试官也不太满意。 css实现水平垂直居中基础题jQuery选择器是如何实现的，例如$（#a.b…）对于jquery我当时也只是停留在使用层面，没去了解过实现原理，结果也没答上来 谈一下对事件流的了解大概讲了一下事件的冒泡和捕获的区别，然后面试官又问了一下冒泡最后会到哪里，我不太确定说了到,面试官又问我确不确定，我说不太确定。 8.最后给了一道算法题。大概是字符串的模式识别的题我写了一个最简单的，然后面试官要求优化复杂度，这个我当时隐约记得个kmp算法，就讲了一下思路，结果面试官要求写出实现代码，这磨蹭了半天也没写出来emmmmm…（顺带一提，当时面试用的是同学的电脑，不知道他装的IDE在哪，只好用的记事本写代码，痛苦） 总结 说实话当时我根本啥都不会，纯小白一个，复习了两三天菜鸟教程，w3school就去面试了，不出意外被拒了。 大厂很看重基础，考的都是原生css原生js和一些计算机网络、数据结构的内容，我了解的那些框架问题都没用上。 面试铁律自我介绍，基本上这是开启激战的导火索。顺便一提，宇宙条的视频面试是在牛客网上，可进行编码，视频，语音，文字沟通。面试官可以实时看到应聘者当前页面的内容和操作。 基础题1.display的取值和各种值的区别？ 2.相邻的两个inline-block节点为什么会出现间隔，该如何解决？ 3.用过nodejs中的EventEmitter吗？详细讲讲。 4.前端性能优化有哪些？ 5.讲简历中提到的一个项目，并且讲解服务端渲染和前端渲染的优缺点？为什么你的项目会选择服务端渲染？ 6.讲讲CSRF。 7.ts和js的区别，为什么要选择使用ts？ 算法题找出数组中和为给定值的两个元素，如：[1, 2, 3, 4, 5]中找出和为6的两个元素。 题目很清晰，也很容易理解，相信很多小伙伴看到这个题都能直观地用“冒泡排序”的方法解决，但是冒泡排序的时间复杂度明显不是我们想要的结果，我把我能够想到的几种方法由易到难记录下来： 冒泡排序的方式 12345678910111213141516function getNum(arr, sum) &#123; if (!Array.isArray(arr)) return null; for (var i = 0; i &lt; arr.length - 1; i++) &#123; if (arr[i] &gt; sum) continue; for (var j = 0; j &lt; arr.length; j++) &#123; if (arr[j] &gt; sum) continue; if (arr[i] + arr[j] == sum) return [arr[i], arr[j]]; &#125; &#125; return null;&#125;复制代码 这种解法很容易想到，也很容易理解，我们不多过多的讲解，接下来分享一种上述解法的优化版。 查找的方式 最终的结果是要找到和为sum的两个数，那么我们可以转换一种思路：默认第一个num1数已经存在，那么第二个数就是sum - num1，这就转换为从数组中查找的问题了。虽然和第一种方法很像，但是在有序数列中进行查找明显要快于逐个比较。 12345678910111213141516function getNum(arr, sum) &#123; if (!Array.isArray(arr)) return null; arr.sort(); for (var i = 0; i &lt; arr.length - 1; i++) &#123; if (arr[i] &gt; sum) continue; var restNum = sum - arr[i]; // 考虑下为什么要 &gt; i if (arr.indexOf(restNum) &gt; i) return [arr[i], restNum]; &#125; return null;&#125; 这种解法的前提是需要对数组进行排序（快排），故时间复杂度为O(nlogn)，二分查找的时间复杂度为O(log2n)，最坏的情况是遍历了整个数组，即时间复杂度为O(n)，那么整体的时间复杂度为O(nlog2n)，效果上要优于冒泡排序的方式。 快排方式 同样需要对数组进行排序（升序），我们知道排序后的数组必然是左边的数不会超过右边的数，因此我们可以把左边的数和右边的数的和作为基准值来和目标值比较，如果该值小于目标值，那么代表两个加数的值不够大，右边的值已经到达顶峰了，那么就从左边取下一个值相加和目标值比较，如果该值比目标值大，那么表示右边的值太大了，需要获取一个小一点的加数，这时需要从右边取倒数第二个数相加后比较，如果此时的值和目标值相等，恭喜你，我的小乖乖，原来你俩在这里！说了这么多感觉还是一头雾水的同学直接看代码吧，毕竟我们都是同一类猿:-) 123456789101112131415function getNum(arr, sum) &#123; if (!Array.isArray(arr)) return null; arr.sort(); for (var i = 0, j = arr.length - 1; i &lt; j;) &#123; if (arr[i] + arr[j] &lt; sum) i++; else if (arr[i] + arr[j] &gt; sum) j--; else return [arr[i], arr[j]]; &#125; return null;&#125; 这种方法我是受到了快速排序的启发，所以命名为快速排序的方式，它是目前为止我能想到效率最高的解决方案，时间复杂度为O(nlogn)。如果需求是找出所有对组合，只要控制退出条件即可，难度不大故不做讨论。 面试考察点归纳 这里只是简要记录个人在前端面试遇到的考察点： position和display、事件机制、dom、捕获冒泡、this及作用域、原型链、es6（了解）、vue的双向绑定原理（最好有用过，一定程度上考察了源代码理解）、基础的数据结构……等。 其中，dom的考察了一道，this及作用域考察了两道，数据结构考察了一道，其它的都以概念提问的方式进行考察。 可以总结出以下教训： js基础是重中之重，而前端对算法的要求基本上不是特别高，基础的数据结构牢固掌握了就没问题。另外前端的话，刷算法题最好用js。 对于你没怎么接触过的领域，面试官并不会去深究；但是，对于网上疯传的Vue等框架，最好有个了解和体验，甚至是深入源码。 一个很明显的现象是，一个概念你知道了，但不一定能说得清楚；一个概念你看似仔细了解过，但真正面临考察时不一定能说出个所以然。解决这个问题的最好办法是——写博客。 并没有考察到websocket、nodejs等知识，这个阶段的面试要求并没有网传得那么高。 笔试 + 一面敲黑板！头条是一定会有笔试题的哦，css，js，算法都会考察噢。我尽量还原题目。。有的实在是忘了-.- 实现css布局1234567一个div垂直居中其距离屏幕左右两边各10px其高度始终是宽度的50%div中有文本'A'其font—size:20px文本水平垂直居中 我的回答： 12345678910111213141516171819202122232425262728293031&lt;div class=\"wrap\"&gt; &lt;div class=\"box\"&gt; &lt;span class=\"text\"&gt;A&lt;/span&gt; &lt;div&gt;&lt;/div&gt;.wrap &#123; position: fixed; left: 10px; right: 10px; top: 0; bottom: 0;&#125;.box &#123; position: absolute; top: 50%; transform: translateY(-50%); width: 100%; height: 50%; background: red;&#125;.text &#123; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: #fff; font-size: 14px; background: blue;&#125; 我的回答好像做不到“其高度始终是宽度的50%”这一点，网上参考了一下其他大神的，使用了calc和flex，大家可以看看： 123456789101112131415161718192021222324252627282930&lt;div class=\"box\"&gt; &lt;div class=\"Abox\"&gt;A&lt;/div&gt;&lt;/div&gt;*&#123; padding:0; margin: 0;&#125;html,body&#123; width: 100%; height: 100%;&#125;.box&#123; position: relative; background: red; width: 100%; height: 100%;&#125;.Abox&#123; margin-left:10px; width: calc(100vw - 20px); height: calc(50vw - 10px); position: absolute; background: yellow; top:50%; transform: translateY(-50%); display: flex; align-items: center; justify-content: center; font-size: 20px;&#125; 函数中的arguments是数组吗？类数组转数组的方法了解一下？答： arguments当然不是数组啦，转数组的方法有： […arguments] Array.from(arguments) 类型比较1234if([]==false)&#123;console.log(1)&#125;;if(&#123;&#125;==false)&#123;console.log(2)&#125;;if([])&#123;console.log(3)&#125;if([1]==[1])&#123;console.log(4)&#125; 答：1 3 == 是非严格比较操作符，false会转换为0，[]会转换成’’，{}会转换为”[object Object]”，所以会输出1，不输出2，具体的可以看看以下文章 参考文章 为什么[] 是 false []和{}是“空”的对象，不是“空”，所以会输出3 最后一个引用地址不一致，不是同一个对象，所以不会输出4 EventLoop123456789101112131415161718192021222324252627282930313233async function a1 () &#123; console.log('a1 start') await a2() console.log('a1 end')&#125;async function a2 () &#123; console.log('a2')&#125;console.log('script start')setTimeout(() =&gt; &#123; console.log('setTimeout')&#125;, 0)Promise.resolve().then(() =&gt; &#123; console.log('promise1')&#125;)a1()let promise2 = new Promise((resolve) =&gt; &#123; resolve('promise2.then') console.log('promise2')&#125;)promise2.then((res) =&gt; &#123; console.log(res) Promise.resolve().then(() =&gt; &#123; console.log('promise3') &#125;)&#125;)console.log('script end') 正确答案： 1234567891011121314script starta1 starta2promise2script end// 此处开始执行异步队列promise1promise2.thenpromise3// 真的不知道 a1 end 为啥在这里才输出，还以为会在promise1 后面。。// 大家知道的话可以评论区分享一下啊～在网上看到的答案都说得模凌两可的a1 end// 执行完所有微任务才执行宏任务setTimeout 改正代码，输出01234012341234567891011function a () &#123; for (var i = 0; i &lt; 5; i++) &#123; this.i = i setTimeout(function () &#123; console.log(i) &#125;, 0) console.log(this.i) &#125;&#125;a() 答：首先留意var，可以改成let，再加个立即执行函数；然后留意this指向，可以改为箭头函数。（我当时的想法就是这么短浅。。。） 12345678910111213function a () &#123; for (let i = 0; i &lt; 5; i++) &#123; (function (i) &#123; this.i = i setTimeout(() =&gt; &#123; console.log(i) &#125;, 0) console.log(this.i) &#125;)(i) &#125;&#125;a() 我的一个牛逼大神同事用了这个方法，实在佩服啊哈哈哈👇 1234567891011121314151617181920var count = 0;Object.defineProperty(window, 'i', &#123; get: function() &#123; return count++ &#125;, set: function() &#123;&#125;&#125;)function a () &#123; for (let i = 0; i &lt; 5; i++) &#123; (function (i) &#123; this.i = i setTimeout(() =&gt; &#123; console.log(this.i) &#125;, 0) &#125;)(i) &#125;&#125;a() 5分钟后他又想出了一个新方法！我的膝盖啪一声跪下来👇 12345678function a () &#123; for (var i = 0; i &lt; 5; i++) &#123; this.i = i setTimeout(function () &#123; console.log(this.i) &#125;.bind(&#123;i: i&#125;), 0) &#125;&#125; 按要求写出bind（题目我实在记不清楚，反正不是简单的写一个bind）答：(以下是正常的bind手写实现) 1234567891011121314151617181920Function.prototype.bind2 = function (context) &#123; if (typeof this !== \"function\") &#123; throw new Error(\"Function.prototype.bind - what is trying to be bound is not callable\"); &#125; var self = this; var args = Array.prototype.slice.call(arguments, 1); var fNOP = function () &#123;&#125;; var fbound = function () &#123; self.apply(this instanceof self ? this : context, args.concat(Array.prototype.slice.call(arguments))); &#125; fNOP.prototype = this.prototype; fbound.prototype = new fNOP(); return fbound;&#125; 从一个无序，不相等的数组中，选取N个数，使其和为M实现算法哈哈哈哈哈做不出来，面试官很有耐心引导，假如选取2个数的话怎么实现呢，我就想到递归函数之类的，但是最后还是手写不出来。。。 一面的面试官主要是看着笔试题拓展问了相关的知识点，然后我也不知道怎么就过了一面了，，， 二面二面几乎都是算法题，再加点js基础题这样。emmm算法题我就说说当时的做法吧，，感觉要误人子弟了，，改天研究透了再单独分享 1. 一个字典[‘I’, ‘have’, ‘a’, ‘book’, ‘good’]，实现一个函数，判断一个字符串中是否都是出自字典中的，输出true/false 例如： 输入’I have a book’ 输出 true 输入 ‘this is a good book’ 输出 false 答： 我当时是想出了个很蠢的方法，就是将字符串的字典词都切了，切完后还有得剩就说明是false，哈哈哈哈啊哈哈哈好蠢啊，面试官不满意地问我这个做法的复杂度，我说好的我知错了。。。 2. 一个长阶梯有n级，可以一次走1级，一次走2级，一共有多少种走法？ 答： 引导了一番后我写了个递归函数 12345function step (n) &#123; if (n === 1) return 1 if (n === 2) return 2 return step(n - 1) + step(n - 2)&#125; 面试官看完后不是很满意，说假如在浏览器上敲step(40000)会怎样，我说会爆掉吧。。他说为什么。。我说内存会溢出。。他问我为什么。。 blablabla一大堆后我还是没答好，回到家后我想想觉得应该是还存在尾递归的优化空间吧。。。 ////////之后问的算法题我已经记不住了。。我再分享一些基础题题目吧，大部分答案都在之前的文章和面经都提过了，此处不再赘述 3. 说说http缓存 4. 用过typescript吗？它的作用是什么？ 答： 用过，我真的只想到类型检查，提供缺省值诶，，后来想想还有引入了“类”“模块”的概念。 5. ts的用法用到了装饰器，你了解过吗？知道如何实现的嘛？ 答：这个正好我写了一篇装饰器的文章，略知一二。。。实现大概就是使用object.defineProperty来拦截对象的属性进行“加工” 6. PWA使用过吗？serviceWorker的使用原理是啥？ 最后。。。有的题目真的想不起来了，最后二面面试官和我说他们是对算法有要求的，包括前端。这次面试真的被虐得很惨，但是收获真的很多很多，而且也让自己意识到算法真的（对找工作）很重要～！ 一面（40分钟）自我介绍 1.线程与进程，空间分配、资源分配等等 2.三次握手、四次挥手及标志位、time-wait等等 3.H5的新特性，语义化 4.BOM与DOM，及BOM相关的一些属性 写代码：双向绑定、防抖和节流 5.设计模式：发布订阅、观察者 二面（1小时）介绍项目 1.web worker，web storage，怎样验证本地数据的有效性 2.性能优化相关 3.缓存相关的http头部属性，强制缓存，协商缓存，优先级，以及meta标签 4.怎样做的登录，接着就是session，cookie，token等等 5.input属性相关，以及怎样做的文件上传 6.微信小程序相关（项目中有涉及到） 7.transform transition与animation 8.setTimeout、setInterval与requestAnimationFrame 9.页面加载问题，JS的异步加载 10.给出代码，说出运算结果（this、event loop） 写代码：回文数，数组去重，自定义log，判断数据类型 ​ 11.React与Vue，各自做了些什么事情 三面（1小时）介绍项目 缓存命中率的问题，怎样确保缓存全部数据，缓存命中率不是100%应该怎么办 说说性能优化的通用架构方案 请求优化和渲染优化的方法 数据类型转换的原理 编程，5个feach请求，请求完成后要求立即执行，但最终的输出顺序要按照要求输出ABCDE（思路是：将每个feach的回调通过a/a的方式输出，但最后没有run出来） 面了一个小时，从四点面到五点一十，下面的问题可能不是所有的，反正我记得起来的都写了。 算法：链表反序输出，不再申请内存空间 0.1+0.2===0.3吗，为什么？ Number()的存储空间是多大，如果后台发送了一个超过最大字节的数字怎们办 垂直居中实现方法 跨域、jsonp原理、CORS原理 Proxy Promise原理 浏览器请求数据问题，请求数据到请求结束与服务器进行了几次交互 TCP为什么要四次挥手 cookie有哪些属性、大小、浏览器如何禁止别人访问cookie localStorage，sessionStorage的区别。 display:none,visibility:hidden,opactiy:0的区别。 BFC，如何形成BFC BFC与IFC的区别 BFC会与float元素相互覆盖吗？为什么？举例说明 回流与重绘，如何避免回流 git merge、git rebase的区别 js脚本加载问题，async、defer问题 antd源码相关，使用什么语言写的，按需加载实现 设计模式，有哪些设计模式 在交互过程中如果数据传送完了，还不想断开连接怎么办，怎么维持 websocket与ajax的区别 fetch API与传统request的区别 说一下心得好了，因为他面算法，我不会，我说我只会简单的快排、冒泡、归并等算法，所以面试官后面就没问算法了 问框架我有的答得出来，我跟他说我框架掌握比较薄弱，基础比较厉害，所以框架就问的少，问很多js相关、交互相关的基础 一面过了，面试官是个很可爱的小哥哥，虽然前面第一题问算法，第二题问框架，我都没答出来很尴尬，但后面问很多js和浏览器基础，都答上来了，所以,面试还是很人性化的~ 其实这些面试题哈哈，上次我跟部门的小哥哥小姐姐去吃火锅，坐在我一面面试官对面，还拿着题考他哈哈，这边的人真的超级可爱～ 然后我一面、二面、三面都发了帖子，大家可以对比一下啊。，一般一面是部门同事面，涉及到比较广，如果面到40min以上基本上稳的几率比较大，二面是其他部门的前端交叉面你，主要问项目比较多，然后很可能手撕代码（校招可能一面就手撕）。三面的话是leader面，应该会着重问一下你的学习能力什么的。 首先，一般的都是介绍自己，主要是项目经历jQuery与Vue的区别是什么？JQuery和Vue的主要区别是JQuery主要是通过选择器来选取DOM，对其进行赋值，取值，事件绑定等操作，数据和页面是混合在一起的；Vue则是通过Vue对象将数据和视图完全分割开来，对数据进行操作，不再需要引用相应的DOM对象，实现了MVVM。 javascript数据基本类型有哪些？null、boolean、string、undefined、number、symbol(ES6新加) css 水平垂直居中方法body{ 123456789101112 height:1000 px;&#125;.antzoen&#123; position:fixed; width:250px; height:100px; background:#ececec; left:50%; top:50%; margin-left:-125px; margin-top:-50px&#125; 利用flex布局：.center{ 123display:flex;justify-content:center;align-items:center; }等等还有很多其他的方法就不一一分享了。 11月25号流程： 1.笔试，给了两页题自己做，大概做了40分钟我怕时间太久，有一道题没写出来就交了。 ​ 2.一面，面试官拿着我的笔试答案一道题一道题问，答上来的就直接说答案，答不上来的我说了下我的思路，和面试官一起探讨思考答案。 ​ 3.二面，问项目，问了问以前做的项目，遇到什么挑战等等，还问了几个JS问题。 ​ 4.三面，主管面，问项目，问方案，三面就像在聊天，没有压力。 ​ 5.四面，HR面，问一些和技术无关的，如兴趣、原来公司等等，然后就定级、定薪资了。发布 11月26号： ​ 6.五面，交叉面，别的部门的人来面试，简单聊了聊项目，然后出了个算法题，没答上来，15分钟就结束了 11月27号： ​ 面试结果审核通过，薪资审核 11月28号： ​ 薪资审核通过，收到了offer 简答题1.css3特性中的transform：translateZ(0)有什么作用答案：GPU加速，优化前端性能 2.列举三种禁止浏览器缓存的头字段，并写出响应的设置值Expires：告诉浏览器把回送的资源缓存多长时间 -1或0则是不缓存简要：添加Expires头能有效的利用浏览器的缓存能力来改善页面的性能，能在后续的页面中有效避免很多不必要的Http请求，WEB服务器使用Expires头来告诉Web客户端它可以使用一个组件的当前副本，直到指定的时间为止。例如：Expires：Thu，15 Apr 2010 20：00：00 GMT; 他告诉浏览器缓存有效性持续到2010年4月15日为止，在这个时间之内相同的请求使用缓存，这个时间之外使用http请求。 Cache-Control：no-cacheCathe-Control：max-age=315360000 Expires有一个非常大的缺陷，它使用一个固定的时间，要求服务器与客户端的时钟保持严格的同步，并且这一天到来后，服务器还得重新设定新的时间。HTTP1.1引入了Cathe-Control，它使用max-age指定组件被缓存多久，从请求开始在max-age时间内浏览器使用缓存，之外的使用请求，这样就可以消除Expires的限制，如果对浏览器兼容性要求很高的话，可以两个都使用。 Pragma：no-cache 3.精确获取页面元素位置的方式有哪些那就是使用getBoundingClientRect()方法。它返回一个对象，其中包含了left、right、top、bottom四个属性，分别对应了该元素的左上角和右下角相对于浏览器窗口（viewport）左上角的距离。 12345var X= this.getBoundingClientRect().left;var Y =this.getBoundingClientRect().top;//再加上滚动距离，就可以得到绝对位置var X= this.getBoundingClientRect().left+document.documentElement.scrollLeft;var Y =this.getBoundingClientRect().top+document.documentElement.scrollTop; 4.正则从2018-10-07T11:48:47 Asia/zh-cn 提取出来结果[2018,10,07,11,48,47]“2018-10-07T11:48:47 Asia/zh-cn”.match( /\\d{1,}/g ) 5.如何判断object是数组类型？12345678alert(typeof 1); // 返回字符串\"number\" alert(typeof \"1\"); // 返回字符串\"string\" alert(typeof true); // 返回字符串\"boolean\" alert(typeof &#123;&#125;); // 返回字符串\"object\" alert(typeof []); // 返回字符串\"object \" alert(typeof function()&#123;&#125;); // 返回字符串\"function\" alert(typeof null); // 返回字符串\"object\" alert(typeof undefined); // 返回字符串\"undefined\" 其中，typeof {}和typeof []的结果都是object，那么问题来了，我怎么通过typeof去判断一个对象是不是数组类型呢？ 对象是对象，数组也是对象，js中万物皆对象，很显然，通过简单的typeof运算符是不能够达到目的，我们得换个方法。 1、从原型入手，Array.prototype.isPrototypeOf(obj); 利用isPrototypeOf()方法，判定Array是不是在obj的原型链中，如果是，则返回true,否则false。 判断object是数组类型 2.Array.isArray()方法。 1234Array.isArray([1, 2, 3]); // trueArray.isArray(&#123;foo: 123&#125;); // falseArray.isArray('foobar'); // falseArray.isArray(undefined); // false 500：服务器内部错误。 501：服务器不具备完成请求的功能。 502：Bad Gateway错误。 503：服务器目前无法使用。 504： Bad Gateway timeout 网关超时。 cookie： 在本地计算机保存一些用户操作的历史信息（当然包括登录信息），并在用户再次访问该站点时浏览器通过HTTP协议将本地cookie内容发送给服务器，从而完成验证，或继续上一步操作。 session： 是一种服务器端的机制，服务器使用一种类似于散列表的结构(也可能就是使用散列表)来保存信息。 编程题1.已知数据结构users，请实现语法支持user.unique能够按照name字段去重，并输出结构为：[“a”,“b”]123456789101112131415161718192021222324var users=[&#123; id:1,name:\"a\"&#125;,&#123; id:2,name:\"a\"&#125;,&#123; id:3,name:\"b\"&#125;,&#123; id:4,name:\"v\"&#125;]Array.prototype.unique = function () &#123; var res; this.map(item =&gt; &#123; this[item.id - 1] = item.name &#125;) // ES6里新添加了两个很好用的东西，set和Array.from // set是一种新的数据结构，它可以接收一个数组或者是类数组对象，自动去重其中的重复项目。 res=new Set(this); console.log(\"new Set对象\",res) // 但是这里大家可以看到，set返回的是一个对象，但是我们想要的是数组啊。 // 这回，就该轮到Array.from出场了，它的作用，就是可以把类数组对象、可迭代对象转化为数组。 res=Array.from(new Set(this)); return res//es6 数组去重&#125;console.log(users.unique()); 去重 2.已知如下对象，请基于es6的proxy方法设计一个属性拦截读取操作的例子，要求实现去访问目标对象example中不存在的属性时，抛出错误：Property “$(property)” does not exist123456789const man=&#123; name:'jscoder', age:22&#125; //补全代码const proxy = new Proxy(...)proxy.name //\"jscoder\"proxy.age //22proxy.location //Property \"$(property)\" does not exist 考点es6 javascript的Proxy 实例的方法 ,get() get方法用于拦截某个属性的读取操作。 12345678910111213141516var man = &#123; name:'jscoder', age:22&#125;;var proxy = new Proxy(man, &#123; get: function(target, property) &#123; if(property in target) &#123; return target[property]; &#125; else &#123; throw new ReferenceError(`Property $&#123;property&#125; does not exist.`); &#125; &#125;&#125;);console.log(proxy.name)console.log(proxy.age)console.log(proxy.location) Proxy 实例的方法的其他方法参考这个链接，很详细https://blog.csdn.net/qq_30100043/article/details/53443017 3.给出如下虚拟dom的数据结构，如何实现简单的虚拟dom，渲染到目标dom树123456789//样例数据let demoNode = (&#123; tagName: 'ul', props: &#123;'class': 'list'&#125;, children: [ (&#123;tagName: 'li', children: ['douyin']&#125;), (&#123;tagName: 'li', children: ['toutiao']&#125;) ]&#125;); //构建一个render函数，将demoNode对象渲染为以下dom 1234&lt;ul class=\"list\"&gt; &lt;li&gt;douyin&lt;/li&gt; &lt;li&gt;toutiao&lt;/li&gt;&lt;/ul&gt; 看到虚拟DOM，是不是感觉很玄乎，但是剥开它华丽的外衣，也就那样: 通过JavaScript来构建虚拟的DOM树结构，并将其呈现到页面中； 当数据改变，引起DOM树结构发生改变，从而生成一颗新的虚拟DOM树，将其与之前的DOM对比，将变化部分应用到真实的DOM树中，即页面中。通过上面的介绍，下面，我们就来实现一个简单的虚拟DOM，并将其与真实的DOM关联。 构建虚拟DOM 虚拟DOM，其实就是用JavaScript对象来构建DOM树，如上ul组件模版，其树形结构如下： DOM树 通过JavaScript，我们可以很容易构建它，如下： 12345678var elem = Element(&#123; tagName: 'ul', props: &#123;'class': 'list'&#125;, children: [ Element(&#123;tagName: 'li', children: ['item1']&#125;), Element(&#123;tagName: 'li', children: ['item2']&#125;) ]&#125;); note：Element为一个构造函数，返回一个Element对象。为了更清晰的呈现虚拟DOM结构，我们省略了new，而在Element中实现。 1234567891011121314/** @Params:* tagName(string)(requered)* props(object)(optional)* children(array)(optional)* */function Element(&#123;tagName, props, children&#125;)&#123; if(!(this instanceof Element))&#123; return new Element(&#123;tagName, props, children&#125;) &#125; this.tagName = tagName; this.props = props || &#123;&#125;; this.children = children || [];&#125; 好了，通过Element我们可以任意地构建虚拟DOM树了。但是有个问题，虚拟的终归是虚拟的，我们得将其呈现到页面中，不然，没卵用。。 怎么呈现呢？ 从上面得知，这是一颗树嘛，那我们就通过遍历，逐个节点地创建真实DOM节点: \\1. createElement; \\2. createTextNode. 怎么遍历呢？ 因为这是一颗树嘛，对于树形结构无外乎两种遍历： \\1. 深度优先遍历(DFS) 深度优先遍历 \\2. 广度优先遍历(BFS) 广度优先遍历 针对实际情况，我们得采用DFS，为什么呢？ 因为我们得将子节点append到父节点中 好了，那我们采用DFS，就来实现一个render函数吧，如下： 1234567891011121314151617181920Element.prototype.render = function()&#123; var el = document.createElement(this.tagName), props = this.props, propName, propValue; for(propName in props)&#123; propValue = props[propName]; el.setAttribute(propName, propValue); &#125; this.children.forEach(function(child)&#123; var childEl = null; if(child instanceof Element)&#123; childEl = child.render(); &#125;else&#123; childEl = document.createTextNode(child); &#125; el.appendChild(childEl); &#125;); return el;&#125;; 此时，我们就可以轻松地将虚拟DOM呈现到指定真实DOM中啦。假设，我们将上诉ul虚拟DOM呈现到页面body中，如下： 123456789var elem = Element(&#123; tagName: 'ul', props: &#123;'class': 'list'&#125;, children: [ Element(&#123;tagName: 'li', children: ['item1']&#125;), Element(&#123;tagName: 'li', children: ['item2']&#125;) ]&#125;);document.querySelector('body').appendChild(elem.render()); 整个面试持续了41分钟….上来寒暄几句，例行自我介绍 第一部分：JS基础1.JS的数据类型有哪些张口就出，没啥难度2.讲一讲js的作用域？ES6之前函数作用域，ES6之后有了块作用域（let）3.let和var有啥区别？和const有啥区别？和var的比较简单。。。变量声明不提前，不能重复定义，作用域不同等等张口就来，和const的不太了解，只答了个const定义的是不可改变的常量4.ES6之前通过prototype实现继承，聊一聊？巴拉巴拉一大堆5.函数的call和apply有什么区别？和bind又有啥区别？比较简单。。。call和apply区别在于第二个参数，而bind这个和另外两个根本没啥相似的，说一遍他的作用就行了。6.如果一个构造函数，bind了一个对象，用这个构造函数创建出的实例会继承这个对象的属性吗？为什么？不会，bind没有改变原函数，单纯返回一个绑定了目标对象的新函数7.箭头函数和普通函数有啥区别？箭头函数能当构造函数吗？区别主要在于this，能不能当不知道。。。老实交代了8.说一说this在各种情况下可能的取值？这个感觉答得还不错，主要就是全局函数的this是全局对象，但是严格模式下是undefined，平常调用的话this就是调用函数的对象，还有比较特殊的就是apply和call调用的函数，this是主动设置的。另外，forEach函数可以传入第二个参数作为第一个参数的this值。9.http有哪些状态码？分别代表什么意思？这个简单，学过计网的都知道，12345开头的都说一下就行10.用过哪些http请求方法？GET POST OPTION PUT DELETE11.OPTION是干啥的？举个用到OPTION的例子？测试服务器支持的请求类型，例子的话我举的CORS中应对非简单跨域请求时会先发一个OPTION测一测允不允许跨域。12.你知道哪些跨域方法？说说他们的原理？JSONP、CORS。。。本咸鱼就知道这两个，然后讲了讲实现方案13.知道ES6的class吗？了解一些，它是prototype的语法糖，但是不熟悉（干脆利落不给自己挖坑，把战场拉回自己熟悉的领域）14.static关键字了解吗？不了解，但是我知道java中的static，巴拉巴拉讲一堆java的static15.数组和类数组对象有啥区别？二者如何转换？这里我提到了“鸭式辩形”，围绕这个聊二者的区别。转换的话，说实话我是不知道的，然后编了一下应该是可以用循环遍历类数组对象的所有属性，然后挨个push到真正的数组里的。 第二部分 CSS基础1 .说一下你知道的position属性，都有啥特点？张口就来系列2.聊一聊盒模型？开始没弄明白面试官想问啥。。懵了一会。。。后来在面试官的指引下才知道他想让我说盒模型由什么组成。。。width height margin padding border张口就来。。。松了一口气3.两个div上下排列，都设margin，有什么现象？这个简单，就是margin重叠，同正取大正负相加很简单4.为什么会有这种现象？你能解释一下吗恕我直言。。。不能。。。。5.其实这是由块级格式化上下文决定的，你了解吗，能说一下吗？emmm之前看过格式化上下文这块，还专门做过笔记，但是忘了。。。。emmm，勉强说了一些自己还记得的东西6.了解css3中的新东西吗？比如flex、动画这些？flex了解，但是动画只写过一些小demo7.清除浮动有哪些方法？一时想不起来。。就说了个overflow：hidden。太长时间没写过浮动了，都忘了，太菜了。。（面试官可能看出来我css差的离谱了。。。就不聊css了） 第三部分 现场写代码（用自己电脑屏幕分享，面试官会看着你敲的每个字母，挺紧张的）1.实现一个两栏三列的布局，并且要求三列等高，且以内容最多的一列的高度为准。两栏三列比较好实现，双飞翼、圣杯布局这都是基础的东西。然后面试官问，还有没有其他实现方案？提示了一下说用新特性，然后我用flex又写了一个，搞定。高度的问题的话，很快想出了解决方案，okpass。2.判断一个字符串是不是回文的这个也挺简单的。。。不到十行搞定，一次测试通过。然后面试官问有没有其他实现方案，我又巴拉巴拉说了一下，最后问我两个方案哪个好，时间复杂度分别是多少？应该没说错（吧）这里最好注意一下。。面试官让你现场运行测试，如果用js写的话最好是node跑一下就行，如果不会node的话，还得放到浏览器跑就很low。。。 第四部分 智商测试（我自己取的名字）一个圆形的桌子，在上面随意放圆形棋子，谁先没地方放谁输，问有没有必胜策略，有的话应该怎么才能达到必胜？这个真的是我想多了。。。我当时还在考虑各种问题，比如棋子的直径和圆桌半径的关系，甚至极限情况下整个桌子只能放一个棋子呢之类的。。。。后来面试官提示“想想圆有什么特殊的位置”，恍然大悟，只要占据了圆心，其他任何地方你落一个子我都能找到一个关于圆心对称的地方落子。。。哎呀，真是太菜了。面试结束后搜了搜这道题，尼玛还是经典面试题。。。面试之前多看看面经肯定秒答。。。真的是太菜了。 面试经验一：凉的很快，不过面试官人比较好此面试总共花费1天时间，面试形式包括1对1面试，面试的职位是前端开发实习生。 面试过程凉的很快，不过面试官人比较好，一面本来是考基础的，上来就是5到编程题，虽然比较简单，但是我有点头皮发麻。 面试过程中面试官提了哪些问题1、一亿条数据中如何快速的查找1000条最大的数据2、对于promise的了解3、get和post的区别3、http状态码4、tcp和udp的区别5、dns的详细过程 面试经验二：电脑视频面试。一面小语种自我介绍此面试总共花费1天时间，面试形式包括电话面试，面试的职位是内容安全运营。 面试过程电脑视频面试。一面小语种自我介绍，面试官做相关提问。之后看一些小视频判断其中是否有问题，并指出问题。二面看你对该岗位的了解程度和意愿。之后还有三面谈一些待遇问题。 面试过程中面试官提了哪些问题是否了解此岗位。这些视频是否有问题，是否有语言问题（是否存在不文明用语）。是否能实习半年。 面试经验三：先是电话面试了解了一下情况面试的职位是招聘实习生。 面试过程先是电话面试了解了一下情况 是不是应届 了解了未来规划之类的 说明了实习转正所需时间以及要求 没有特别肯定说啥然后就是远程视频面试了 面试过程中面试官提了哪些问题主要是围绕简历挖掘了很多 首先是简单的自我介绍 具体工作的状况 遇到的问题 还有个人性格方面的 优缺点啥的 还有对岗位的了解 面试经验四：主要是个人介绍，从学历到几段工作经验此面试总共花费2天时间，面试形式包括1对1面试，面试的职位是软件产品经理。 面试过程主要是个人介绍，从学历到几段工作经验，详细介绍，由于之前一直是开发，对方对开发经历不是很感兴趣，主要介绍了近一年的工作经历，做了哪些项目之类的 面试过程中面试官提了哪些问题自我介绍，关于项目上的一些问题，详细问了项目都做了些什么，系统的功能之类的，自身有什么优势，关于产品有什么想法。 面试经验五：面试官很nice，很准时、很随和面试形式包括1对1面试，面试的职位是hr。 面试过程面试官很nice，很准时、很随和，问的问题围绕个人的经历，全程气氛很轻松，会回答可以多说，不会也不会为难你的 面试过程中面试官提了哪些问题分享一下你抗压的经验和你解决的方法，进行自我介绍和为什么投递这个岗位，也问了一些专业相关的问题，但是我不太懂所以就水过去了 面试经验六：两轮面试 简单的聊天， 二面偏压力面面试形式包括电话面试、1对1面试，面试的职位是商务合同。 面试过程两轮面试简单的聊天， 二面偏压力面， 基本上是简历上的问题 问的比较详细。用zoom进行面试，部门领导直接面，会问有没有参加秋招 面试过程中面试官提了哪些问题对加班的看法为什么不选择财务我的职业规划有没有参加秋招春招准备参加与否家乡 父母的工作 二面 对函数式编程了解说一下 纯函数，偏应用，柯里化，compose 分别是什么 写一下柯里化 apply，call，bind 的区别 一段代码 setTimeout(function() { console.log(1) }, 0); new Promise(functionexecutor(resolve) { console.log(2); for (var i = 0; i &lt; 10000; i++) { i == 9999&amp;&amp; resolve(); } console.log(3); }).then(function() { console.log(4); }); console.log(5);为什么 3 不打印（这里说错了，应该是打印的），1 最后打印 说一下事件循环 BFC 和 IFC 有了解吗，BFC 特性及条件 盒模型 css 画一个平行四边形，translate 浏览器输入 url 到渲染 缓存 状态码了解哪些，301 和 302 区别 option 方法知道吗 排序算法，事件复杂度，归并，快排，堆排的应用场景 CSRF 原理及防御 ES6 用过哪些 最近收获较大的一篇文章及收获 设计消息通知，比如点赞，评论这些通知二面面试官特别好，不会的地方都会跟你讲一下。最后一题不会说没关系，应届生系统设计和代码实践能力确实差一点，这一题是加分题。然后通知 10 分钟后三面 三面 顺时针打印矩阵https://www.nowcoder.com/practice/9b4c81a02cd34f76be2659fa0d54342a?tpId=13&amp;tqId=11172&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking（如果没过肯定就是因为这题，面试官都快把答案说出来了我还是没做出来） http 和 https 区别及建立连接的过程 instanceof 原理（代码） 寻找二叉树中路径是否存在某条值等给定值的路径，看我算法比较差就让我说了思路 自己写的爬虫里面的一些细节及如何处理反爬 最有成就感的一件事","categories":[{"name":"前端面试题","slug":"前端面试题","permalink":"http://www.bluedream.top/categories/前端面试题/"}],"tags":[{"name":"面试问题","slug":"面试问题","permalink":"http://www.bluedream.top/tags/面试问题/"},{"name":"面试经验","slug":"面试经验","permalink":"http://www.bluedream.top/tags/面试经验/"},{"name":"字节跳动","slug":"字节跳动","permalink":"http://www.bluedream.top/tags/字节跳动/"}]},{"title":"前端通信","slug":"前端通信","date":"2019-09-10T13:51:01.000Z","updated":"2019-09-28T09:36:11.771Z","comments":true,"path":"前端知识点/前端通信.html","link":"","permalink":"http://www.bluedream.top/前端知识点/前端通信.html","excerpt":"","text":"前言前端通信类的问题，主要包括以下内容： 什么是同源策略及限制 同源策略是一个概念，就一句话。有什么限制，就三句话。能说出来即可。 前后端如何通信 如果你不准备，估计也就只能说出ajax。这个可以考察出知识面。 如何创建Ajax Ajax在前后端通信中经常用到。做业务时，可以借助第三方的库，比如vue框架里的库、jQuery也有封装好的方法。但如果让你用原生的js去实现，该怎么做？ 这就是考察你的动手能力，以及框架原理的掌握。如果能写出来，可以体现出你的基本功。是加分项。 在回答 Ajax 的问题时，要回答以下几个方面： XMLHttpRequest 的工作原理 兼容性处理 XMLHttpRequest只有在高级浏览器中才支持。在回答问题时，这个兼容性问题不要忽略。 事件的触发条件 事件的触发顺序 XMLHttpRequest有很多触发事件，每个事件是怎么触发的。 跨域通信的几种方式 这部分非常重要。无非就是问你：什么是跨域、跨域有什么限制、跨域有几种方式。 1.同源策略的概念和具体限制请解释一下 JavaScript 的同源策略同源策略是客户端脚本（尤其是 Javascript）的重要的安全度量标准。它最早出自 Netscape Navigator2.0，其目的是防止某个文档或脚本从多个不同源装载。 所谓同源指的是：协议，域名，端口相同，同源策略是一种安全协议，指一段脚本只能读取来自同一来源的窗口和文档的属性。 同源策略：限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的关键的安全机制。（来自MDN官方的解释） 具体解释： 源包括三个部分：协议、域名、端口（http协议的默认端口是80）。如果有任何一个部分不同，则源不同，那就是跨域了。 限制：这个源的文档没有权利去操作另一个源的文档。这个限制体现在：（要记住） Cookie、LocalStorage和IndexDB无法获取。 无法获取和操作DOM。 不能发送Ajax请求。我们要注意，Ajax只适合同源的通信。 2. 前后端如何通信主要有以下几种方式： Ajax：不支持跨域。 WebSocket：不受同源策略的限制，支持跨域 CORS：不受同源策略的限制，支持跨域。一种新的通信协议标准。可以理解成是：同时支持同源和跨域的Ajax。 Ajax什么是 AjaxAjax 是全称是 asynchronous JavaScript and XML，即异步 JavaScript 和 xml，主要用来实现客户端与服务器异步数据交互，不用重载整个网页，实现页面局部刷新。 ajax 的优点 来自服务器的新内容可以动态更改，通过异步模式，无需重新加载整个页面，实现页面局部刷新 避免用户不断刷新或者跳转页面，提高用户体验 优化了浏览器和服务器之间的传输，降低数据传输量，减少不必要的数据往返，减少了带宽占用 Ajax 在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载。 ajax 的缺点 ajax 不支持浏览器 back 按钮，要实现 ajax 下的前后退功能成本较大 可能造成请求数的增加跨域问题限制； 安全问题： AJAX 暴露了与服务器交互的细节。 对搜索引擎的支持比较弱。 破坏了程序的异常机制。 创建 ajax 过程基本步骤 5步走：（创建对象、建立连接、发送数据、接收数据、局部刷新） 1.创建 XMLHttpRequest 对象,也就是创建一个异步调用对象 1var xhr=new XMLHttpRequest() //创建对象 2.创建一个新的 HTTP 请求,并指定该 HTTP 请求的方法、URL 及验证信息，跟服务器建立一个连接，设置响应 HTTP 请求状态变化的函数 12345xhr.open(&quot;type 提交方式&quot;, &quot;url 提交的地址&quot;)如果是post请求，需要设置请求头xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;); 3.我要发送数据给服务器（发送 HTTP 请求） ​ 如果是get 请求，请求的数据在地址的后面。 1xhr.send() //发送数据，这一步不能省略 4.获取异步调用服务器返回的数据 服务端返回数据会调用一个回调函数，通过回调函数去接收数据. 1234567xhr.onreadystatechange=function()&#123; if(xhr.readyState==4)&#123; 响应完成了 if(xhr.status==200)&#123; //响应成功了 responseText 属性接收服务端返回的数据. &#125; &#125; &#125; 5.使用 JavaScript 和 DOM 实现局部刷新 创建 ajax 步骤： 1.创建 XMLHttpRequest 对象 2.创建一个新的 HTTP 请求，并指定该 HTTP 请求的类型、验证信息 3.设置响应 HTTP 请求状态变化的回调函数 4.发送 HTTP 请求 5.获取异步调用返回的数据 6.使用 JavaScript 和 DOM 实现局部刷新 123456789var xhr = new XMLHttpRequest();xhr.open(\"POST\", url, true);xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");xhr.onreadystatechange = function () &#123; if (xhr.readyState == 4 &amp;&amp; (xhr.status == 200 || xhr.status == 304)) &#123; fn.call(this, xhr.responseText); &#125;&#125;;xhr.send(data); Ajax 实现的原理浏览器提供的 XMLHttpRequest 对象 ajax 如何实现，readyState 的五种状态的含义？ 0 － （未初始化）还没有调用 send()方法 1 － （载入）已调用 send()方法，正在发送请求 2 － （载入完成）send()方法执行完成，已经接收到全部响应内容 3 － （交互）正在解析响应内容 4 － （完成）响应内容解析完成，可以在客户端调用了 解析： (0)未初始化 此阶段确认 XMLHttpRequest 对象是否创建，并为调用 open()方法进行未初始化作好准备。值为 0 表示对象已经存在，否则浏览器会报错－－对象不存在。 (1)载入 此阶段对 XMLHttpRequest 对象进行初始化，即调用 open()方法，根据参数(method,url,true)完成对象状态的设置。并调用 send()方法开始向服务端发送请求。值为 1 表示正在向服务端发送请求。 (2)载入完成 此阶段接收服务器端的响应数据。但获得的还只是服务端响应的原始数据，并不能直接在客户端使用。值为 2 表示已经接收完全部响应数据。并为下一阶段对数据解析作好准备。 (3)交互 此阶段解析接收到的服务器端响应数据。即根据服务器端响应头部返回的 MIME 类型把数据转换成能通过 responseBody、responseText 或 responseXML 属性存取的格式，为在客户端调用作好准备。状态 3 表示正在解析数据。 (4)完成 此阶段确认全部数据都已经解析为客户端可用的格式，解析已经完成。值为 4 表示数据解析完毕，可以通过 XMLHttpRequest 对象的相应属性取得数据。 参考 GET 和 POST 的区别，何时使用 POST？GET： 一般用于信息获取，使用 URL 传递参数，对所发送信息的数量也有限制，一般在 2000 个字符，有的浏览器是 8000 个字符； 请求的参数都暴露在 url 地址当中，如果传递中文参数，需要自己进行编码操作，安全性较低。 POST： 一般用于提交数据和修改服务器上的资源，对所发送的信息没有限制 提交的数据内容存在于 http 请求体中，数据不会暴漏在 url 地址中。 在以下情况中，请使用 POST 请求： 无法使用缓存文件（更新服务器上的文件或数据库） 向服务器发送大量数据（POST 没有数据量限制） 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠 ajax 请求时，如何解析 json 数据使用 eval() 或者 JSON.parse() 鉴于安全性考虑，推荐使用 JSON.parse()更靠谱，对数据的安全性更好。 ajax 加载的页面，跳转到另外一个页面再跳转回来，内容相同，如何节约读取请求?后台做缓存，读取缓存里面的数据。CDN 发送 get 请求和 post 请求 get请求举例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Ajax 发送 get 请求&lt;/h1&gt;&lt;input type=\"button\" value=\"发送get_ajax请求\" id='btnAjax'&gt;&lt;script type=\"text/javascript\"&gt; // 绑定点击事件 document.querySelector('#btnAjax').onclick = function () &#123; // 发送ajax 请求 需要 五步 // （1）创建异步对象 var ajaxObj = new XMLHttpRequest(); // （2）设置请求的参数。包括：请求的方法、请求的url。 ajaxObj.open('get', '02-ajax.php'); // （3）发送请求 ajaxObj.send(); //（4）注册事件。 onreadystatechange事件，状态改变时就会调用。 //如果要在数据完整请求回来的时候才调用，我们需要手动写一些判断的逻辑。 ajaxObj.onreadystatechange = function () &#123; // 为了保证 数据 完整返回，我们一般会判断 两个值 if (ajaxObj.readyState == 4 &amp;&amp; ajaxObj.status == 200) &#123; // 如果能够进到这个判断 说明 数据 完美的回来了,并且请求的页面是存在的 // 5.在注册的事件中 获取 返回的 内容 并修改页面的显示 console.log('数据返回成功'); // 数据是保存在 异步对象的 属性中 console.log(ajaxObj.responseText); // 修改页面的显示 document.querySelector('h1').innerHTML = ajaxObj.responseText; &#125; &#125; &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; post 请求举例： 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Ajax 发送 get 请求&lt;/h1&gt;&lt;input type=\"button\" value=\"发送put_ajax请求\" id='btnAjax'&gt;&lt;script type=\"text/javascript\"&gt; // 异步对象 var xhr = new XMLHttpRequest(); // 设置属性 xhr.open('post', '02.post.php'); // 如果想要使用post提交数据,必须添加此行 xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\"); // 将数据通过send方法传递 xhr.send('name=fox&amp;age=18'); // 发送并接受返回值 xhr.onreadystatechange = function () &#123; // 这步为判断服务器是否正确响应 if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123; alert(xhr.responseText); &#125; &#125;;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; onreadystatechange 事件 注册 onreadystatechange 事件后，每当 readyState 属性改变时，就会调用 onreadystatechange 函数。 readyState：（存有 XMLHttpRequest 的状态。从 0 到 4 发生变化） 0: 请求未初始化 1: 服务器连接已建立 2: 请求已接收 3: 请求处理中 4: 请求已完成，且响应已就绪 事件的触发条件 事件的触发顺序 实际开发中用的 原生Ajax请求12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061var util = &#123;&#125;;//获取 ajax 请求之后的jsonutil.json = function (options) &#123; var opt = &#123; url: '', type: 'get', data: &#123;&#125;, success: function () &#123; &#125;, error: function () &#123; &#125;, &#125;; util.extend(opt, options); if (opt.url) &#123; //IE兼容性处理：浏览器特征检查。检查该浏览器是否存在XMLHttpRequest这个api，没有的话，就用IE的api var xhr = XMLHttpRequest ? new XMLHttpRequest() : new window.ActiveXObject('Microsoft.XMLHTTP'); var data = opt.data, url = opt.url, type = opt.type.toUpperCase(); dataArr = []; &#125; for (var key in data) &#123; dataArr.push(key + '=' + data[key]); &#125; if (type === 'GET') &#123; url = url + '?' + dataArr.join('&amp;'); xhr.open(type, url.replace(/\\?$/g, ''), true); xhr.send(); &#125; if (type === 'POST') &#123; xhr.open(type, url, true); // 如果想要使用post提交数据,必须添加此行 xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\"); xhr.send(dataArr.join('&amp;')); &#125; xhr.onload = function () &#123; if (xhr.status === 200 || xhr.status === 304) &#123; //304表示：用缓存即可。206表示获取媒体资源的前面一部分 var res; if (opt.success &amp;&amp; opt.success instanceof Function) &#123; res = xhr.responseText; if (typeof res === 'string') &#123; res = JSON.parse(res); //将字符串转成json opt.success.call(xhr, res); &#125; &#125; &#125; else &#123; if (opt.error &amp;&amp; opt.error instanceof Function) &#123; opt.error.call(xhr, res); &#125; &#125; &#125;;&#125; 4.json什么是 json JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式 它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小 JSON字符串转换为JSON对象: 123var obj =eval(&apos;(&apos;+ str +&apos;)&apos;);var obj = str.parseJSON();var obj = JSON.parse(str); JSON对象转换为JSON字符串： 12var last=obj.toJSONString();var last=JSON.stringify(obj); json优点: 数据格式比较简单，易于读写，支持复合数据类型（数组、对象、字符串、数字） 轻量级，格式都是压缩的，占用带宽小 便于机器（JavaScript）解析, 客户端 javascript 可以简单的通过 eval()进行 JSON 数据的读取搜索 支持多种语言, 包括 ActionScript, C, C#, ColdFusion, Java, JavaScript, Perl, php, Python, Ruby 等语言服务器端语言, 便于服务器端的解析 在 PHP 世界, 已经有 PHP-JSON 和 JSON-PHP 出现了, 便于 PHP 序列化后的程序直接调用. PHP 服务器端的对象、数组等能够直接生 JSON 格式, 便于客户端的访问提取. 另外 PHP 的 PEAR 类已经提出了支持 (http://pear.php.net/pepr/pepr-proposal-show.php?id=198) 因为 JSON 格式能够直接为服务器端代码使用, 大大简化了服务器端和客户端的代码开发量, 但是完成的任务不变, 且易于维护 json缺点: 没有 XML 格式这么推广的深入人心和使用广泛, 没有 XML 那么通用性 JSON 格式目前在 Web Service 中推广还属于初级阶段 PS: 据说 Google 的 Ajax 是使用 JSON+模板 做的 XML和JSON的区别？ 数据体积方面 JSON相对于XML来讲，数据的体积小，传递的速度更快些。 数据交互方面 JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互 数据描述方面 JSON对数据的描述性比XML较差 传输速度方面 JSON的速度要远远快于XML 5.跨域如何解决跨域问题? jsonp ，允许 script 加载第三方资源 反向代理（nginx 服务内部配置 Access-Control-Allow-Origin *） cors 前后端协作设置请求头部，Access-Control-Allow-Origin 等头部信息 iframe 嵌套通讯，postmessage 解析： 理解跨域的概念：协议、域名、端口都相同才同域，否则都是跨域 参考跨域资源共享 CORS 阮一峰 跨域通信的几种方式 方式如下： JSONP WebSocket CORS Hash postMessage 上面这五种方式，在面试时，都要说出来。 5.1 JSONP 面试会问：JSONP的原理是什么？怎么实现的？ 在CORS和postMessage以前，我们一直都是通过JSONP来做跨域通信的。 JSONP的原理：通过&lt;script&gt;标签的异步加载来实现的。比如说，实际开发中，我们发现，head标签里，可以通过&lt;script&gt;标签的src，里面放url，加载很多在线的插件。这就是用到了JSONP。 JSONP的实现： 比如说，客户端这样写： 1&lt;script src=\"http://www.smyhvae.com/?data=name&amp;callback=myjsonp\"&gt;&lt;/script&gt; 上面的src中，data=name是get请求的参数，myjsonp是和后台约定好的函数名。服务器端这样写： 1234myjsonp(&#123; data: &#123;&#125;&#125;) 于是，本地要求创建一个myjsonp 的全局函数，才能将返回的数据执行出来。 实际开发中，前端的JSONP是这样实现的： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;script&gt; var util = &#123;&#125;; //定义方法：动态创建 script 标签 /** * [function 在页面中注入js脚本] * @param &#123;[type]&#125; url [description] * @param &#123;[type]&#125; charset [description] * @return &#123;[type]&#125; [description] */ util.createScript = function (url, charset) &#123; var script = document.createElement('script'); script.setAttribute('type', 'text/javascript'); charset &amp;&amp; script.setAttribute('charset', charset); script.setAttribute('src', url); script.async = true; return script; &#125;; /** * [function 处理jsonp] * @param &#123;[type]&#125; url [description] * @param &#123;[type]&#125; onsucess [description] * @param &#123;[type]&#125; onerror [description] * @param &#123;[type]&#125; charset [description] * @return &#123;[type]&#125; [description] */ util.jsonp = function (url, onsuccess, onerror, charset) &#123; var callbackName = util.getName('tt_player'); //事先约定好的 函数名 window[callbackName] = function () &#123; //根据回调名称注册一个全局的函数 if (onsuccess &amp;&amp; util.isFunction(onsuccess)) &#123; onsuccess(arguments[0]); &#125; &#125;; var script = util.createScript(url + '&amp;callback=' + callbackName, charset); //动态创建一个script标签 script.onload = script.onreadystatechange = function () &#123; //监听加载成功的事件，获取数据 if (!script.readyState || /loaded|complete/.test(script.readyState)) &#123; script.onload = script.onreadystatechange = null; // 移除该script的 DOM 对象 if (script.parentNode) &#123; script.parentNode.removeChild(script); &#125; // 删除函数或变量 window[callbackName] = null; //最后不要忘了删除 &#125; &#125;; script.onerror = function () &#123; if (onerror &amp;&amp; util.isFunction(onerror)) &#123; onerror(); &#125; &#125;; document.getElementsByTagName('head')[0].appendChild(script); //往html中增加这个标签，目的是把请求发送出去 &#125;;&lt;/script&gt; 5.2 WebSocket WebSocket的用法如下： 123456789101112131415161718192021//var ws = new WebSocket('wss://echo.websocket.org'); //创建WebSocket的对象。参数可以是 ws 或 wss，后者表示加密。//把请求发出去ws.onopen = function (evt) &#123; console.log('Connection open ...'); ws.send('Hello WebSockets!');&#125;;//对方发消息过来时，我接收ws.onmessage = function (evt) &#123; console.log('Received Message: ', evt.data); ws.close();&#125;;//关闭连接ws.onclose = function (evt) &#123; console.log('Connection closed.');&#125;; 面试一般不会让你写这个代码，一般是考察你是否了解 WebSocket概念，知道有这么回事即可。 5.3 CORS CORS 可以理解成是既可以同步、也可以异步的Ajax。 fetch是一个比较新的API，用来实现CORS`通信。用法如下： 12345678// url（必选），options（可选）fetch('/some/url/', &#123; method: 'get',&#125;).then(function (response) &#123; //类似于 ES6中的promise&#125;).catch(function (err) &#123; // 出错了，等价于 then 的第二个参数，但这样更好用更直观&#125;); 另外，如果面试官问：“CORS为什么支持跨域的通信？” 答案：跨域时，浏览器会拦截Ajax请求，并在http头中加Origin。 5.4 Hash url的#后面的内容就叫Hash。Hash的改变，页面不会刷新。这就是用 Hash 做跨域通信的基本原理。 补充：url的?后面的内容叫Search。Search的改变，会导致页面刷新，因此不能做跨域通信。 使用举例： 场景：我的页面 A 通过iframe或frame嵌入了跨域的页面 B。 现在，我这个A页面想给B页面发消息，怎么操作呢？ 首先，在我的A页面中： 123//伪代码var B = document.getElementsByTagName('iframe');B.src = B.src + '#' + 'jsonString'; //我们可以把JS 对象，通过 JSON.stringify()方法转成 json字符串，发给 B 然后，在B页面中： 1234// B中的伪代码window.onhashchange = function () &#123; //通过onhashchange方法监听，url中的 hash 是否发生变化 var data = window.location.hash;&#125;; 5.5 postMessage()方法 H5中新增的`postMessage()``方法，可以用来做跨域通信。既然是H5中新增的，那就一定要提到。 场景：窗口 A (http:A.com)向跨域的窗口 B (http:B.com)发送信息。步骤如下 在A窗口中操作如下：向B窗口发送数据： 12// 窗口A(http:A.com)向跨域的窗口B(http:B.com)发送信息 Bwindow.postMessage('data', 'http://B.com'); //这里强调的是B窗口里的window对象 在B窗口中操作如下： 123456// 在窗口B中监听 message 事件Awindow.addEventListener('message', function (event) &#123; //这里强调的是A窗口里的window对象 console.log(event.origin); //获取 ：url。这里指：http://A.com console.log(event.source); //获取：A window对象 console.log(event.data); //获取传过来的数据&#125;, false); 如何解决跨域问题JSONP： 原理是：动态插入script标签，通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入 由于同源策略的限制，XmlHttpRequest只允许请求当前源（域名、协议、端口）的资源，为了实现跨域请求，可以通过script标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求 优点是兼容性好，简单易用，支持浏览器与服务器双向通信。缺点是只支持GET请求 JSONP：json+padding（内填充），顾名思义，就是把JSON填充到一个盒子里 1234567891011121314151617function createJs(sUrl)&#123; var oScript = document.createElement('script'); oScript.type = 'text/javascript'; oScript.src = sUrl; document.getElementsByTagName('head')[0].appendChild(oScript);&#125;createJs('jsonp.js');box(&#123; 'name': 'test'&#125;);function box(json)&#123; alert(json.name);&#125; CORS 服务器端对于CORS的支持，主要就是通过设置Access-Control-Allow-Origin来进行的。如果浏览器检测到相应的设置，就可以允许Ajax进行跨域的访问 通过修改document.domain来跨子域 将子域和主域的document.domain设为同一个主域.前提条件：这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域。主域相同的使用document.domain 使用window.name来进行跨域 window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的 使用HTML5中新引进的window.postMessage方法来跨域传送数据 还有flash、在服务器上设置代理页面等跨域方式。个人认为window.name的方法既不复杂，也能兼容到几乎所有浏览器，这真是极好的一种跨域方法 如何解决跨域问题? jsonp、 iframe、window.name、window.postMessage、服务器上设置代理页面 如何解决跨域问题? document.domain + iframe：要求主域名相同 //只能跨子域 JSONP(JSON with Padding)``：response: callback(data)`` //只支持 GET 请求 跨域资源共享CORS(XHR2)``：Access-Control-Allow` //兼容性 IE10+ 跨文档消息传输(HTML5)：postMessage + onmessage //兼容性 IE8+ WebSocket(HTML5)：new WebSocket(url) + onmessage //兼容性 IE10+ 服务器端设置代理请求：服务器端不受同源策略限制 5.1 跨域 很多种方法，但万变不离其宗，都是为了搞定同源策略。重用的有 jsonp、iframe、cors、img、HTML5 postMessage等等。其中用到 html 标签进行跨域的原理就是 html 不受同源策略影响。但只是接受 Get 的请求方式，这个得清楚。 延伸1：img iframe script 来发送跨域请求有什么优缺点？ 1. iframe 优点：跨域完毕之后DOM操作和互相之间的JavaScript调用都是没有问题的 缺点：1.若结果要以URL参数传递，这就意味着在结果数据量很大的时候需要分割传递，巨烦。2.还有一个是iframe本身带来的，母页面和iframe本身的交互本身就有安全性限制。 2. script 优点：可以直接返回json格式的数据，方便处理 缺点：只接受GET请求方式 3. 图片ping 优点：可以访问任何url，一般用来进行点击追踪，做页面分析常用的方法 缺点：不能访问响应文本，只能监听是否响应 延伸2：配合 webpack 进行反向代理？ webpack 在 devServer 选项里面提供了一个 proxy 的参数供开发人员进行反向代理 1234567'/api': &#123; target: 'http://www.example.com', // your target host changeOrigin: true, // needed for virtual hosted sites pathRewrite: &#123; '^/api': '' // rewrite path &#125;&#125;, 然后再配合 http-proxy-middleware 插件对 api 请求地址进行代理 123456789const express = require('express');const proxy = require('http-proxy-middleware');// proxy api requestsconst exampleProxy = proxy(options); // 这里的 options 就是 webpack 里面的 proxy 选项对应的每个选项// mount `exampleProxy` in web serverconst app = express();app.use('/api', exampleProxy);app.listen(3000); 然后再用 nginx 把允许跨域的源地址添加到报头里面即可 说到 nginx ，可以再谈谈 CORS 配置，大致如下 123456789101112location / &#123; if ($request_method = 'OPTIONS') &#123; add_header 'Access-Control-Allow-Origin' '*'; add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS'; add_header 'Access-Control-Allow-Credentials' 'true'; add_header 'Access-Control-Allow-Headers' 'DNT, X-Mx-ReqToken, Keep-Alive, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type'; add_header 'Access-Control-Max-Age' 86400; add_header 'Content-Type' 'text/plain charset=UTF-8'; add_header 'Content-Length' 0; return 200; &#125;&#125; 解释 jsonp 的原理，以及为什么不是真正的 ajax, 以及优缺点jsonp 是用来解决跨域获取数据的一种解决方案，具体是通过动态创建 script 标签，然后通过标签的 src 属性获取 js 文件中的 js 脚本，该脚本的内容是一个函数调用，参数就是服务器返回的数据，为了处理这些返回的数据，需要事先在页面定义好回调函数，本质上使用的并不是 ajax 技术 jsonp 优点: 完美解决在测试或者开发中获取不同域下的数据,用户传递一个 callback 参数给服务端，然后服务端返回数据时会将这个 callback 参数作为函数名来包裹住 JSON 数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。简单来说数据的格式没有发生很大变化 jsonp 缺点: jsonp 只支持 get 请求而不支持 post 请求,也即是说如果想传给后台一个 json 格式的数据,此时问题就来了,浏览器会报一个 http 状态码 415 错误,告诉你请求格式不正确,这让我很蛋疼(在登录注册中需要给后台传一大串数据),如果都用参数的形式拼接在 url 后面的话不太现实,后台取值也会显得繁琐, 在登录模块中需要用到 session 来判断当前用户的登录状态,这时候由于是跨域的原因,前后台的取到的 session 是不一样的,那么就不能就行 session 来判断. 由于 jsonp 存在安全性问题(不知 qq 空间的跨域是怎么解决的,还是另有高招?)，后来考虑到上面的一系列问题,采用的是后台进行设置允许跨域请求(但还是存在缺陷的,实质上还是跨域,如上面说的 session 问题).Header set Access-Control-Allow-Origin *为了防止 XSS 攻击我们的服务器， 我们可以限制域，比如 Access-Control-Allow-Origin: http://blog.csdn.net 6.其他同步和异步的区别?同步：阻塞的 -张三叫李四去吃饭，李四一直忙得不停，张三一直等着，直到李四忙完两个人一块去吃饭 =浏览器向服务器请求数据，服务器比较忙，浏览器一直等着（页面白屏），直到服务器返回数据，浏览器才能显示页面 异步：非阻塞的 -张三叫李四去吃饭，李四在忙，张三说了一声然后自己就去吃饭了，李四忙完后自己去吃 =浏览器向服务器请求数据，服务器比较忙，浏览器可以自如的干原来的事情（显示页面），服务器返回数据的时候通知浏览器一声，浏览器把返回的数据再渲染到页面，局部更新 异步加载和延迟加载1.异步加载的方案： 动态插入 script 标签 2.通过 ajax 去获取 js 代码，然后通过 eval 执行 3.script 标签上添加 defer 或者 async 属性 4.创建并插入 iframe，让它异步执行 js 5.延迟加载：有些 js 代码并不是页面初始化的时候就立刻需要的，而稍后的某些情况才需要的。 一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？1.浏览器地址栏输入 url 2.浏览器会先查看浏览器缓存–系统缓存–路由缓存，如有存在缓存，就直接显示。如果没有，接着第三步 3.域名解析（DNS）获取相应的 ip 4.浏览器向服务器发起 tcp 连接，与浏览器建立 tcp 三次握手 5.握手成功，浏览器向服务器发送 http 请求，请求数据包 6.服务器请求数据，将数据返回到浏览器 7.浏览器接收响应，读取页面内容，解析 html 源码，生成 DOm 树 8.解析 css 样式.浏览器渲染，js 交互绑定多个域名，数量不限； 页面编码和被请求的资源编码如果不一致如何处理？答案：get 请求中的中文需要 encodeURIComponent 编码处理，post 请求不需要进行编码 Ajax 和 Fetch 区别 ajax 是使用 XMLHttpRequest 对象发起的，但是用起来很麻烦，所以 ES6 新规范就有了 fetch，fetch 发一个请求不用像 ajax 那样写一大堆代码。 使用 fetch 无法取消一个请求，这是因为 fetch 基于 Promise，而 Promise 无法做到这一点。 在默认情况下，fetch 不会接受或者发送 cookies fetch 没有办法原生监测请求的进度，而 XMLHttpRequest 可以 fetch 只对网络请求报错，对 400，500 都当做成功的请求，需要封装去处理 fetch 由于是 ES6 规范，兼容性上比不上 XMLHttpRequest XML 和 JSON 的区别？ 数据体积方面：JSON 相对于 XML 来讲，数据的体积小，传递的速度更快些。 数据交互方面：JSON 与 JavaScript 的交互更加方便，更容易解析处理，更好的数据交互。 数据描述方面：JSON 对数据的描述性比 XML 较差。 传输速度方面：JSON 的速度要远远快于 XML。 AMD 和 CMD 规范的区别 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行 CMD 推崇依赖就近，AMD 推崇依赖前置 RESTfulREST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。 GET get 方法在 Rest 中主要用于获取资源，能够发送参数，不过有限制，且参数都会以?开头的形 式附加在 URL 尾部。规范的 get 方法处理器应该是幂等的，也就是说对一个资源不论发送多少次 get 请求都不会更改数据或造成破坏。 POSTpost 方法在 Rest 请求中主要用于添加资源，参数信息存放在请求报文的消息体中相对安全，且可发送较大信息 PUTput 方法在 Rest 中主要用于更新资源，因为大多数浏览器不支持 put 和 delete，会自动将 put 和 delete 请求转化为 get 和 post. 因此为了使用 put 和 delete 方法,需要以 post 发送请求，在表单中使用隐藏域发送真正的请求。put 方法的参数是同 post 一样是存放在消息中的，同样具有安全性，可发送较大信息。put 方法是幂等的，对同一 URL 资源做出的同一数据的任意次 put 请求其对数据的改变都是一致的。 DELETEDelete 在 Rest 请求中主要用于删除资源，因为大多数浏览器不支持 put 和 delete，会自动将 put 和 delete 请求转化为 get 和 post。因此为了使用 put 和 delete 方法,需要以 post 发送请求，在表单中使用隐藏域发送真正的请求。Delete 方法的参数同 post 一样存放在消息体中,具有安全性，可发送较大信息 Delete 方法是幂等的，不论对同一个资源进行多少次 delete 请求都不会破坏数据 解析：参考","categories":[{"name":"前端知识点","slug":"前端知识点","permalink":"http://www.bluedream.top/categories/前端知识点/"}],"tags":[{"name":"同源策略","slug":"同源策略","permalink":"http://www.bluedream.top/tags/同源策略/"},{"name":"通信方式","slug":"通信方式","permalink":"http://www.bluedream.top/tags/通信方式/"},{"name":"Ajax","slug":"Ajax","permalink":"http://www.bluedream.top/tags/Ajax/"},{"name":"JSON","slug":"JSON","permalink":"http://www.bluedream.top/tags/JSON/"},{"name":"跨域通信","slug":"跨域通信","permalink":"http://www.bluedream.top/tags/跨域通信/"},{"name":"异步","slug":"异步","permalink":"http://www.bluedream.top/tags/异步/"}]},{"title":"CSS","slug":"CSS","date":"2019-09-09T14:30:10.000Z","updated":"2019-09-28T10:14:14.996Z","comments":true,"path":"前端知识点/CSS.html","link":"","permalink":"http://www.bluedream.top/前端知识点/CSS.html","excerpt":"","text":"介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？有两种， IE 盒子模型、W3C 盒子模型； 区别： IE的content部分把 border 和 padding计算了进去; 盒子模型构成：内容(content)、内填充(padding)、 边框(border)、外边距(margin) IE8及其以下版本浏览器，未声明 DOCTYPE，内容宽高会包含内填充和边框，称为怪异盒模型(IE盒模型) 标准(W3C)盒模型：元素宽度 = width + padding + border + margin 怪异(IE)盒模型：元素宽度 = width + margin 标准浏览器通过设置 css3 的 box-sizing: border-box 属性，触发“怪异模式”解析计算宽高 css hack原理及常用hack 原理：利用不同浏览器对CSS的支持和解析结果不一样编写针对特定浏览器样式。 常见的hack有 属性hack 选择器hack IE条件注释 link 与 @import 的区别 link 是HTML方式， @import 是CSS方式 link最大限度支持并行下载，@import 过多嵌套导致串行下载，出现FOUC link 可以通过 rel=&quot;alternate stylesheet&quot; 指定候选样式 浏览器对 link 支持早于@import ，可以使用 @import 对老浏览器隐藏样式 @import 必须在样式规则之前，可以在css文件中引用其他文件 总体来说：link优于@import CSS有哪些继承属性 关于文字排版的属性如： font word-break letter-spacing text-align text-rendering word-spacing white-space text-indent text-transform text-shadow line-height color visibility cursor display有哪些值？说明他们的作用。 block 块类型。默认宽度为父元素宽度，可设置宽高，换行显示。 none 缺省值。像行内元素类型一样显示。 inline 行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示 inline-block 默认宽度为内容宽度，可以设置宽高，同行显示。 list-item 像块类型元素一样显示，并添加样式列表标记。 table 此元素会作为块级表格来显示。 inherit 规定应该从父元素继承 display 属性的值 display 有哪些值？说明他们的作用默认值：inline 12345678910111213141516171819202122none： 隐藏对象。与visibility属性的hidden值不同，其不为被隐藏的对象保留其物理空间inline： 指定对象为内联元素。block： 指定对象为块元素。list-item： 指定对象为列表项目。inline-block： 指定对象为内联块元素。（CSS2）table： 指定对象作为块元素级的表格。类同于html标签&lt;table&gt;（CSS2）inline-table： 指定对象作为内联元素级的表格。类同于html标签&lt;table&gt;（CSS2）table-caption： 指定对象作为表格标题。类同于html标签&lt;caption&gt;（CSS2）table-cell： 指定对象作为表格单元格。类同于html标签&lt;td&gt;（CSS2）table-row： 指定对象作为表格行。类同于html标签&lt;tr&gt;（CSS2）table-row-group： 指定对象作为表格行组。类同于html标签&lt;tbody&gt;（CSS2）table-column： 指定对象作为表格列。类同于html标签&lt;col&gt;（CSS2）table-column-group： 指定对象作为表格列组显示。类同于html标签&lt;colgroup&gt;（CSS2）table-header-group： 指定对象作为表格标题组。类同于html标签&lt;thead&gt;（CSS2）table-footer-group： 指定对象作为表格脚注组。类同于html标签&lt;tfoot&gt;（CSS2）run-in： 根据上下文决定对象是内联对象还是块级对象。（CSS3）box： 将对象作为弹性伸缩盒显示。（伸缩盒最老版本）（CSS3）inline-box： 将对象作为内联块级弹性伸缩盒显示。（伸缩盒最老版本）（CSS3）flexbox： 将对象作为弹性伸缩盒显示。（伸缩盒过渡版本）（CSS3）inline-flexbox： 将对象作为内联块级弹性伸缩盒显示。（伸缩盒过渡版本）（CSS3）flex： 将对象作为弹性伸缩盒显示。（伸缩盒最新版本）（CSS3）inline-flex： 将对象作为内联块级弹性伸缩盒显示。（伸缩盒最新版本）（CSS3） 参考 display: none; 与 visibility: hidden; 的区别联系：它们都能让元素不可见 区别： display:none：会让元素完全从渲染树中消失，隐藏对应的元素，渲染的时候不占据任何空间；visibility: hidden：不会让元素从渲染树消失，隐藏对应的元素，渲染时元素仍占据空间位置，只是内容不可见。 即是，使用 CSS display:none 属性后，HTML 元素（对象）的宽度、高度等各种属性值都将“丢失”;而使用 visibility:hidden 属性后，HTML 元素（对象）仅仅是在视觉上看不见（完全透明），而它所占据的空间位置仍然存在。 display: none;是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示；visibility:hidden;是继承属性，子孙节点消失由于继承了hidden，通过设置visibility: visible;可以让子孙节点显式 修改常规流中元素的display通常会造成文档重排。修改visibility属性只会造成本元素的重绘 读屏器不会读取display: none;元素内容；会读取visibility: hidden元素内容 display:none、visibile:hidden、opacity:0 的区别 是否隐藏 是否在文档中占用空间 是否会触发事件 display: none 是 否 否 visibile: hidden 是 是 否 opacity: 0 是 是 是 display:inline-block 什么时候会显示间隙？(携程) 移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing inline-block 布局的元素在编辑器里写在同一行 间隙产生的原因是因为，换行或空格会占据一定的位置 推荐解决方法： 父元素中设置font-size:0;letter-spaceing:-4px; 设置元素浮动后，该元素的 display 值会如何变化？设置元素浮动后，该元素的 display 值自动变成 block css中属性定义，使得dom元素不显示在浏览器可视范围内？1.display属性为none、visibility设为hidden（但是仍然占据页面空间）2.设置宽高为 0，设置透明度为 0，设置 z-index 位置在-1000em(附：该属性仅在定位元素中生效)； display,float,position的关系 如果 display 为none，那么position和float都不起作用，这种情况下元素不产生框 否则，如果position值为absolute或者fixed，框就是绝对定位的，float的计算值为none，display根据下面的表格进行调整 否则，如果float不是none，框是浮动的，display根据下表进行调整 否则，如果元素是根元素，display根据下表进行调整 其他情况下display的值为指定值 总结起来：绝对定位、浮动、根元素都需要调整 display 什么是外边距重叠(collapsing margins)？相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，结合而成的外边距称为折叠外边距 两个或多个毗邻的普通流中的块元素垂直方向上的margin会折叠 浮动元素或inline-block元素或绝对定位元素的margin不会和垂直方向上的其他元素的margin折叠 创建了块级格式化上下文的元素，不会和它的子元素发生margin折叠 元素自身的margin-bottom和margin-top相邻时也会折 重叠的结果是什么？ 折叠结果遵循下列计算规则： 两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值 两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值 两个外边距一正一负时，折叠结果是两者的相加的和 CSS选择符有哪些？哪些属性可以继承？ id选择器（ # myid） 类选择器（.myclassname） 标签选择器（div, h1, p） 相邻选择器（h1 + p） 子选择器（ul &gt; li） 后代选择器（li a） 通配符选择器（ * ） 属性选择器（a[rel = “external”]） 伪类选择器（a:hover, li:nth-child） 可继承的样式： font-size font-family color, UL LI DL DD DT 不可继承的样式：border padding margin width height CSS3新增伪类有那些？1234567891011p:first-of-type 选择属于其父元素的首个 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。p:last-of-type 选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。p:only-of-type 选择属于其父元素唯一的 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。p:only-child 选择属于其父元素的唯一子元素的每个 &lt;p&gt; 元素。p:nth-child(2) 选择属于其父元素的第二个子元素的每个 &lt;p&gt; 元素。:after 在元素之前添加内容,也可以用来做清除浮动。:before 在元素之后添加内容:enabled :disabled 控制表单控件的禁用状态。:checked 单选框或复选框被选中 用 H5+CSS3 解决下导航栏最后一项掉下来的问题答案：box-sizing: border-box; position的值relative和absolute定位原点是？ absolute 生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。 fixed （老IE不支持） 生成绝对定位的元素，相对于浏览器窗口进行定位。 relative 生成相对定位的元素，相对于其正常位置进行定位。 static 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right - z-index 声明）。 inherit 规定从父元素继承 position 属性的值 CSS3有哪些新特性？ 新增各种CSS选择器 （: not(.input)：所有 class 不是“input”的节点） 圆角 （border-radius:8px） 多列布局 （multi-column layout） 阴影和反射 （Shadow\\Reflect） 文字特效 （text-shadow、） 文字渲染 （Text-decoration） 线性渐变 （gradient） 旋转 （transform） 增加了旋转,缩放,定位,倾斜,动画，多背景 transform:\\scale(0.85,0.90)\\ translate(0px,-30px)\\ skew(-9deg,0deg)\\Animation: CSS3有哪些新特性？ 新增选择器 p:nth-child(n){color: rgba(255, 0, 0, 0.75)} 弹性盒模型 display: flex; 多列布局 column-count: 5; 媒体查询 @media (max-width: 480px) {.box: {column-count: 1;}} 个性化字体 @font-face{font-family: BorderWeb; src:url(BORDERW0.eot);} 颜色透明度 color: rgba(255, 0, 0, 0.75); 圆角 border-radius: 5px; 渐变 background:linear-gradient(red, green, blue); 阴影 box-shadow:3px 3px 3px rgba(0, 64, 128, 0.3); 倒影 box-reflect: below 2px; 文字装饰 text-stroke-color: red; 文字溢出 text-overflow:ellipsis; 背景效果 background-size: 100px 100px; 边框效果 border-image:url(bt_blue.png) 0 10; 转换 旋转 transform: rotate(20deg); 倾斜 transform: skew(150deg, -10deg); 位移 transform: translate(20px, 20px); 缩放 transform: scale(.5); 平滑过渡 transition: all .3s ease-in .1s; 动画 @keyframes anim-1 {50% {border-radius: 50%;}} animation: anim-1 1s; css3 有哪些新特性 选择器 E:last-child 匹配父元素的最后一个子元素 E。 E:nth-child(n)匹配父元素的第 n 个子元素 E。 E:nth-last-child(n) CSS3 匹配父元素的倒数第 n 个子元素 E。 多栏布局 1234567891011121314&lt;div class=\"mul-col\"&gt; &lt;div&gt; &lt;h3&gt;新手上路&lt;/h3&gt; &lt;p&gt;新手专区 消费警示 交易安全 24小时在线帮助 免费开店&lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;付款方式&lt;/h3&gt; &lt;p&gt;快捷支付 信用卡 余额宝 蚂蚁花呗 货到付款&lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;淘宝特色&lt;/h3&gt; &lt;p&gt;手机淘宝 旺信 大众评审 B格指南&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 12345678.mul-col &#123; column-count: 3; column-gap: 5px; column-rule: 1px solid gray; border-radius: 5px; border: 1px solid gray; padding: 10px;&#125; 多背景图 1/* backgroundimage:url('1.jpg),url('2.jpg') */ CSS3 word-wrap 属性 123p.test &#123; word-wrap: break-word;&#125; 文字阴影 1text-shadow: 5px 2px 6px rgba(64, 64, 64, 0.5); @font-face 属性 Font-face 可以用来加载字体样式，而且它还能够加载服务器端的字体文件，让客户端显示客户端所没有安装的字体。 12345678910111213141516171819202122232425@font-face &#123; font-family: BorderWeb; src: url(BORDERW0.eot);&#125;@font-face &#123; font-family: Runic; src: url(RUNICMT0.eot);&#125;.border &#123; font-size: 35px; color: black; font-family: \"BorderWeb\";&#125;.event &#123; font-size: 110px; color: black; font-family: \"Runic\";&#125;/* 淘宝网字体使用 */@font-face &#123; font-family: iconfont; src: url(//at.alicdn.com/t/font_1465189805_4518812.eot);&#125; 圆角 1border-radius: 15px; 边框图片 CSS3 border-image 属性 盒阴影 1/* box-shadow: 水平方向的偏移量 垂直方向的偏移量 模糊程度 扩展程度 颜色 是否具有内阴影 */ 盒子大小 CSS3 box-sizing 属性 媒体查询 CSS3 @media 查询 CSS3 动画 @keyframes 1234567891011@keyframes abc &#123; from &#123; transform: rotate(0); &#125; 50% &#123; transform: rotate(90deg); &#125; to &#123; transform: rotate(360deg); &#125;&#125; animation 属性 1/* animation：name duration timing-function delay interation-count direction play-state */ 渐变效果 1234567background-image: -webkit-gradient( linear, 0% 0%, 100% 0%, from(#2a8bbe), to(#fe280e)); CSS3 弹性盒子模型 弹性盒子是 CSS3 的一种新的布局模式。 CSS3 弹性盒（ Flexible Box 或 flexbox），是一种当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式。 引入弹性盒布局模型的目的是提供一种更加有效的方式来对一个容器中的子元素进行排列、对齐和分配空白空间。 CSS3 过渡 123456div &#123; transition: width 2s; -moz-transition: width 2s; /* Firefox 4 */ -webkit-transition: width 2s; /* Safari 和 Chrome */ -o-transition: width 2s; /* Opera */&#125; CSS3 变换 rotate()旋转 translate()平移 scale( )缩放 skew()扭曲/倾斜 变换基点 3d 转换 参考 一个满屏 品 字布局 如何设计?简单的方式： 上面的div宽100%， 下面的两个div分别宽50%， 然后用float或者inline使其不换行即可 请写出多种等高布局css定义的权重1234567891011121314151617181920212223// 以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100//以下例子是演示各种定义的权重值：/*权重为1*/div&#123;&#125;/*权重为10*/.class1&#123;&#125;/*权重为100*/#id1&#123;&#125;/*权重为100+1=101*/#id1 div&#123;&#125;/*权重为10+1=11*/.class1 div&#123;&#125;/*权重为10+10+1=21*/.class1 .class2 div&#123;&#125;// 如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现 谈谈浮动和清除浮动浮动的框可以向左或向右移动，直到他的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中，所以文档的普通流的块框表现得就像浮动框不存在一样。浮动的块框会漂浮在文档普通流的块框上 解释下什么是浮动和它的工作原理？非IE浏览器下，容器不设高度且子元素浮动时，容器高度不能被内容撑开。此时，内容会溢出到容器外面而影响布局。这种现象被称为浮动（溢出）。 工作原理： 浮动元素脱离文档流，不占据空间（引起“高度塌陷”现象） 浮动元素碰到包含它的边框或者其他浮动元素的边框停留 浮动元素引起的问题？ 父元素的高度无法被撑开，影响与父元素同级的元素 与浮动元素同级的非浮动元素会跟随其后 列举几种清除浮动的方式？ 添加额外标签，例如 &lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt; 使用 br 标签和其自身的 clear 属性，例如 &lt;br clear=&quot;all&quot; /&gt; 父元素设置 overflow：hidden; 在IE6中还需要触发 hasLayout，例如zoom：1; 父元素也设置浮动 使用 :after 伪元素。由于IE6-7不支持 :after，使用 zoom:1 触发 hasLayout CSS 清除浮动的几种方法（至少两种）清除浮动： 核心：clear:both; 1.（不推荐使用） 在浮动的盒子下面再放一个标签，使用 clear:both;来清除浮动 a 内部标签：会将父盒子的高度重新撑开 b 外部标签：只能将浮动盒子的影响清除，但是不会撑开盒子 2.使用 overflow 清除浮动（不推荐使用） 先找到浮动盒子的父元素，给父元素添加一个属性：overflow:hidden;就会清除子元素对页面的影响 3.使用伪元素清除浮动(用的最多) 伪元素：在页面上不存在的元素，但是可以通过 css 添加上去 种类： :after(在。。。之后) :before(在。。。之前) 注意：每个元素都有自己的伪元素 12345678910111213.clearfix:after &#123; content:&quot;&quot;; height:0; line-height:0; display:block; clear:both; visibility:hidden; /_将元素隐藏起来_/ 在页面的 clearfix 元素后面添加了一个空的块级元素 （这个元素的高为 0 行高也为 0 并且这个元素清除了浮动）&#125;.clearfix &#123; zoom:1;/_为了兼容 IE6_/&#125; 清除浮动最佳实践（after伪元素闭合浮动）123456789.clearfix:after&#123; content: &quot;\\200B&quot;; display: table; height: 0; clear: both; &#125; .clearfix&#123; *zoom: 1; &#125; 请解释一下为什么需要清除浮动？清除浮动的方式清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示 父级div定义height 父级div 也一起浮动； 常规的使用一个class； 12345678910.clearfix:before, .clearfix:after &#123; content: &quot; &quot;; display: table;&#125;.clearfix:after &#123; clear: both;&#125;.clearfix &#123; *zoom: 1;&#125; SASS编译的时候，浮动元素的父级div定义伪类:after 1234567&amp;:after,&amp;:before&#123; content: &quot; &quot;; visibility: hidden; display: block; height: 0; clear: both;&#125; 解析原理： display:block 使生成的元素以块级元素显示,占满剩余空间 height:0 避免生成内容破坏原有布局的高度。 visibility:hidden 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互 通过 content:”.”生成内容作为最后一个元素，至于content里面是点还是其他都是可以的，例如oocss里面就有经典的 content:”.”,有些版本可能content 里面内容为空,一丝冰凉是不推荐这样做的,firefox直到7.0 content:”” 仍然会产生额外的空隙 zoom：1 触发IE hasLayout 通过分析发现，除了clear：both用来闭合浮动的，其他代码无非都是为了隐藏掉content生成的内容，这也就是其他版本的闭合浮动为什么会有font-size：0，line-height：0 zoom:1的清除浮动原理? 清除浮动，触发hasLayout； Zoom属性是IE浏览器的专有属性，它可以设置或检索对象的缩放比例。解决ie下比较奇葩的bug 譬如外边距（margin）的重叠，浮动清除，触发ie的haslayout属性等 css的content属性？有什么作用与应用css的content属性专门应用在before/after伪元素上，用来插入生成内容。常用伪类清除浮动： 12345678910.clearfix:after&#123;content:&quot;.&quot;;display:block;height:0;visibility:hidden;clear:both;&#125;.clearfix&#123;*zoom:1;&#125; 清除浮动的方式1、给父元素定义height2、结尾处加空div标签clear：both；3、父级元素定义伪类：如上；4、父级元素定义overflow：hidden；5、父级元素定义overflow：auto；6、父级元素也浮动,需要定义宽度；7、父级元素定义display：table；8、结尾处加br标签clear：both； 第三种：after伪元素方法清理浮动，文档结构更加清晰 知道 css 有个 content 属性吗？有什么作用？有什么应用？知道。css 的 content 属性专门应用在 before/after 伪元素上，用来插入生成内容。最常见的应用是利用伪类清除浮动。 1234567891011//一种常见利用伪类清除浮动的代码.clearfix:after &#123; content: \".\"; //这里利用到了content属性 display: block; height: 0; visibility: hidden; clear: both;&#125;.clearfix &#123; zoom: 1;&#125; after 伪元素通过 content 在元素的后面生成了内容为一个点的块级素，再利用 clear:both 清除浮动。 知道 css 计数器（序列数字字符自动递增）吗？如何通过 css content 属性实现 css 计数器？css 计数器是通过设置 counter-reset 、counter-increment 两个属性 、及 counter()/counters()一个方法配合 after / before 伪类实现。 box-sizing 常用的属性有哪些？分别有什么作用？ box-sizing: content-box; // 默认的标准(W3C)盒模型元素效果 box-sizing: border-box; // 触发怪异(IE)盒模型元素的效果 box-sizing: inherit; // 继承父元素 box-sizing 属性的值 CSS选择器有哪些？ id选择器 #id 类选择器 .class 标签选择器 div, h1, p 相邻选择器 h1 + p 子选择器 ul &gt; li 后代选择器 li a 通配符选择器 * 属性选择器 a[rel=’external’] 伪类选择器 a:hover, li:nth-child CSS哪些属性可以继承？哪些属性不可以继承？ 可以继承的样式：font-size、font-family、color、list-style、cursor 不可继承的样式：width、height、border、padding、margin、background CSS3新增伪类有哪些？ :root 选择文档的根元素，等同于 html 元素 :empty 选择没有子元素的元素 :target 选取当前活动的目标元素 :not(selector) 选择除 selector 元素意外的元素 :enabled 选择可用的表单元素 :disabled 选择禁用的表单元素 :checked 选择被选中的表单元素 :after 在元素内部最前添加内容 :before 在元素内部最后添加内容 :nth-child(n) 匹配父元素下指定子元素，在所有子元素中排序第n :nth-last-child(n) 匹配父元素下指定子元素，在所有子元素中排序第n，从后向前数 :nth-child(odd) :nth-child(even) :nth-child(3n+1) :first-child :last-child :only-child :nth-of-type(n) 匹配父元素下指定子元素，在同类子元素中排序第n :nth-last-of-type(n) 匹配父元素下指定子元素，在同类子元素中排序第n，从后向前数 :nth-of-type(odd) :nth-of-type(even) :nth-of-type(3n+1) :first-of-type :last-of-type :only-of-type ::selection 选择被用户选取的元素部分 :first-line 选择元素中的第一行 :first-letter 选择元素中的第一个字符 请列举几种隐藏元素的方法 visibility: hidden; 这个属性只是简单的隐藏某个元素，但是元素占用的空间任然存在 opacity: 0; CSS3属性，设置0可以使一个元素完全透明 position: absolute; 设置一个很大的 left 负值定位，使元素定位在可见区域之外 display: none; 元素会变得不可见，并且不会再占用文档的空间。 transform: scale(0); 将一个元素设置为缩放无限小，元素将不可见，元素原来所在的位置将被保留 &lt;div hidden=&quot;hidden&quot;&gt; HTML5属性,效果和display:none;相同，但这个属性用于记录一个元素的状态 height: 0; 将元素高度设为 0 ，并消除边框 filter: blur(0); CSS3属性，将一个元素的模糊度设置为0，从而使这个元素“消失”在页面中 rgba() 和 opacity 的透明效果有什么不同？rgba()和 opacity 都能实现透明效果 opacity 作用于元素以及元素内的所有内容（包括文字）的透明度 rgba() 只作用于元素自身的颜色或其背景色，子元素不会继承透明效果 css样式继承拓展：http://www.cnblogs.com/thislbq/p/5882105.html css 属性 content 有什么作用？content 属性专门应用在 before/after 伪元素上，用于插入额外内容或样式 请解释一下 CSS3 的 Flexbox（弹性盒布局模型）以及适用场景？Flexbox 用于不同尺寸屏幕中创建可自动扩展和收缩布局 经常遇到的浏览器的JS兼容性有哪些？解决方法是什么？ 当前样式：getComputedStyle(el, null) VS el.currentStyle 事件对象：e VS window.event 鼠标坐标：e.pageX, e.pageY VS window.event.x, window.event.y 按键码：e.which VS event.keyCode 文本节点：el.textContent VS el.innerText 在列的父元素上使用这个背景图进行Y轴的铺放，从而实现一种等高列的假像 模仿表格布局等高列效果：兼容性不好，在ie6-7无法正常运行 css3 flexbox 布局： .container{display: flex; align-items: stretch;} 在CSS样式中常使用 px、em 在表现上有什么区别？ px 相对于显示器屏幕分辨率，无法用浏览器字体放大功能 em 值并不是固定的，会继承父级的字体大小： em = 像素值 / 父级font-size 为什么要初始化CSS样式？ 不同浏览器对有些标签样式的默认值解析不同 不初始化CSS会造成各现浏览器之间的页面显示差异 可以使用 reset.css 或 Normalize.css 做 CSS 初始化 去掉标签的默认样式如：margin,padding，其他浏览器默认解析字体大小，字体设置。 当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化 设置css样式的三种方式？外部样式表，引入一个外部css文件内部样式表，将css代码放在标签内部内联样式，将css样式直接定义在html元素内部 介绍使用过的 CSS 预处理器？ CSS 预处理器基本思想：为 CSS 增加了一些编程的特性（变量、逻辑判断、函数等） 开发者使用这种语言进行进行 Web 页面样式设计，再编译成正常的 CSS 文件使用 使用 CSS 预处理器，可以使 CSS 更加简洁、适应性更强、可读性更佳，无需考虑兼容性 最常用的 CSS 预处理器语言包括：Sass（SCSS）和 LESS CSS优化、提高性能的方法有哪些？ 多个css合并，尽量减少HTTP请求 将css文件放在页面最上面 移除空的css规则 避免使用CSS表达式 选择器优化嵌套，尽量避免层级过深 充分利用css继承属性，减少代码量 抽象提取公共样式，减少代码量 属性值为0时，不加单位 属性值为小于1的小数时，省略小数点前面的0 css雪碧图 浏览器是怎样解析CSS选择器的？浏览器解析 CSS 选择器的方式是从右到左 在网页中的应该使用奇数还是偶数的字体？在网页中的应该使用“偶数”字体： 偶数字号相对更容易和 web 设计的其他部分构成比例关系 使用奇数号字体时文本段落无法对齐 宋体的中文网页排布中使用最多的就是 12 和 14 margin和padding分别适合什么场景使用？ 需要在border外侧添加空白，且空白处不需要背景（色）时，使用 margin 需要在border内测添加空白，且空白处需要背景（色）时，使用 padding 抽离样式模块怎么写，说出思路？CSS可以拆分成2部分：公共CSS 和 业务CSS： 网站的配色，字体，交互提取出为公共CSS。这部分CSS命名不应涉及具体的业务 对于业务CSS，需要有统一的命名，使用公用的前缀。可以参考面向对象的CSS 元素竖向的百分比设定是相对于容器的高度吗？元素竖向的百分比设定是相对于容器的宽度，而不是高度 全屏滚动的原理是什么？ 用到了CSS的那些属性？ 原理类似图片轮播原理，超出隐藏部分，滚动时显示 可能用到的CSS属性：overflow:hidden; transform:translate(100%, 100%); display:none; 什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？ 响应式设计就是网站能够兼容多个终端，而不是为每个终端做一个特定的版本 基本原理是利用CSS3媒体查询，为不同尺寸的设备适配不同样式 对于低版本的IE，可采用JS获取屏幕宽度，然后通过resize方法来实现兼容： 12345678910111213141516$(window).resize(function () &#123; screenRespond();&#125;);screenRespond();function screenRespond()&#123;var screenWidth = $(window).width();if(screenWidth &lt;= 1800)&#123; $(\"body\").attr(\"class\", \"w1800\");&#125;if(screenWidth &lt;= 1400)&#123; $(\"body\").attr(\"class\", \"w1400\");&#125;if(screenWidth &gt; 1800)&#123; $(\"body\").attr(\"class\", \"\");&#125;&#125; 什么是视差滚动效果，如何给每页做不同的动画？ 视差滚动是指多层背景以不同的速度移动，形成立体的运动效果，具有非常出色的视觉体验 一般把网页解剖为：背景层、内容层和悬浮层。当滚动鼠标滚轮时，各图层以不同速度移动，形成视差的 实现原理 以 “页面滚动条” 作为 “视差动画进度条” 以 “滚轮刻度” 当作 “动画帧度” 去播放动画的 监听 mousewheel 事件，事件被触发即播放动画，实现“翻页”效果 a标签上四个伪类的执行顺序是怎么样的？> visited > hover > active```123456789- L-V-H-A love hate 用喜欢和讨厌两个词来方便记忆### 伪元素和伪类的区别和作用？- 伪元素 -- 在内容元素的前后插入额外的元素或样式，但是这些元素实际上并不在文档中生成。- 它们只在外部显示可见，但不会在文档的源代码中找到它们，因此，称为“伪”元素。例如： p::before {content:”第一章：”;}p::after {content:”Hot!”;}p::first-line {background:red;}p::first-letter {font-size:30px;} 12- 伪类 -- 将特殊的效果添加到特定选择器上。它是已有元素上添加类别的，不会产生新的元素。例如： a:hover {color: #FF00FF}p:first-child {color: red} 1234567891011121314151617181920212223242526272829303132### ::before 和 :after 中双冒号和单冒号有什么区别？* 在 CSS 中伪类一直用 : 表示，如 :hover, :active 等* 伪元素在CSS1中已存在，当时语法是用 : 表示，如 :before 和 :after* 后来在CSS3中修订，伪元素用 :: 表示，如 ::before 和 ::after，以此区分伪元素和伪类* 由于低版本IE对双冒号不兼容，开发者为了兼容性各浏览器，继续使使用 :after 这种老语法表示伪元素* 综上所述：::before 是 CSS3 中写伪元素的新语法； :after 是 CSS1 中存在的、兼容IE的老语法### 如何修改Chrome记住密码后自动填充表单的黄色背景？- 产生原因：由于Chrome默认会给自动填充的input表单加上 input:-webkit-autofill 私有属性造成的- 解决方案1：在form标签上直接关闭了表单的自动填充：autocomplete=&quot;off&quot;- 解决方案2：input:-webkit-autofill &#123; background-color: transparent; &#125;### input [type=search] 搜索框右侧小图标如何美化？```cssinput[type=&quot;search&quot;]::-webkit-search-cancel-button&#123; -webkit-appearance: none; height: 15px; width: 15px; border-radius: 8px; background:url(&quot;images/searchicon.png&quot;) no-repeat 0 0; background-size: 15px 15px;&#125; 网站图片文件，如何点击下载？而非点击预览？12&lt;a href=&quot;logo.jpg&quot; download&gt;下载&lt;/a&gt;&lt;a href=&quot;logo.jpg&quot; download=&quot;网站LOGO&quot; &gt;下载&lt;/a&gt; iOS safari 如何阻止“橡皮筋效果”？1234567$(document).ready(function()&#123; var stopScrolling = function(event) &#123; event.preventDefault(); &#125; document.addEventListener('touchstart', stopScrolling, false); document.addEventListener('touchmove', stopScrolling, false);&#125;); 你对 line-height 是如何理解的？ line-height 指一行字的高度，包含了字间距，实际上是下一行基线到上一行基线距离 如果一个标签没有定义 height 属性，那么其最终表现的高度是由 line-height 决定的 一个容器没有设置高度，那么撑开容器高度的是 line-height 而不是容器内的文字内容 把 line-height 值设置为 height 一样大小的值可以实现单行文字的垂直居中 line-height 和 height 都能撑开一个高度，height 会触发 haslayout，而 line-height 不会 line-height 三种赋值方式有何区别？（带单位、纯数字、百分比） 带单位：px 是固定值，而 em 会参考父元素 font-size 值计算自身的行高 纯数字：会把比例传递给后代。例如，父级行高为 1.5，子元素字体为 18px，则子元素行高为 1.5 * 18 = 27px 百分比：将计算后的值传递给后代 怎么让Chrome支持小于12px 的文字？12345.shrink&#123; -webkit-transform:scale(0.8); -o-transform:scale(1); display:inline-block;&#125; 用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观 使用12px及12px以上字体大小：为了兼容各大主流浏览器，建议设计美工图时候设置大于或等于12px的字体大小，如果是接单的这个时候就需要给客户讲解小于12px浏览器不兼容等事宜 继续使用小于12px字体大小样式设置：如果不考虑chrome可以不用考虑兼容，同时在设置小于12px对象设置-webkit-text-size-adjust:none，做到最大兼容考虑 让页面里的字体变清晰，变细用CSS怎么做？（IOS手机浏览器字体齿轮设置）1-webkit-font-smoothing: antialiased; font-style 属性 oblique 是什么意思？font-style: oblique; 使没有 italic 属性的文字实现倾斜 display:inline-block 什么时候会显示间隙？ 相邻的 inline-block 元素之间有换行或空格分隔的情况下会产生间距 非 inline-block 水平元素设置为 inline-block 也会有水平间距 可以借助 vertical-align:top; 消除垂直间隙 可以在父级加 font-size：0; 在子元素里设置需要的字体大小，消除垂直间隙 把 li 标签写到同一行可以消除垂直间隙，但代码可读性差 去除 inline-block 元素间间距的方法 移除空格 使用 margin 负值 使用 font-size:0 letter-spacing word-spacing 解析：更详细的介绍请看去除 inline-block 元素间间距的 N 种方法 那么问题来了，浏览器还有默认的天生 inline-block 元素（拥有内在尺寸，可设置高宽，但不会自动换行），有哪些？&lt;input&gt; 、&lt;img&gt; 、&lt;button&gt; 、&lt;texterea&gt; 、&lt;label&gt;。 overflow: scroll 时不能平滑滚动的问题怎么处理？监听滚轮事件，然后滚动到一定距离时用 jquery 的 animate 实现平滑效果。 一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度12345678- 方案1： .sub &#123; height: calc(100%-100px); &#125;- 方案2： .container &#123; position:relative; &#125; .sub &#123; position: absolute; top: 100px; bottom: 0; &#125;- 方案3： .container &#123; display:flex; flex-direction:column; &#125; .sub &#123; flex:1; &#125; CSS选择符有哪些？哪些属性可以继承？ id选择器（ # myid） 类选择器（.myclassname） 标签选择器（div, h1, p） 相邻选择器（h1 + p） 子选择器（ul &gt; li） 后代选择器（li a） 通配符选择器（ * ） 属性选择器（a[rel = “external”]） 伪类选择器（a:hover, li:nth-child） 可继承的样式： font-size font-family color, UL LI DL DD DT 不可继承的样式：border padding margin width height CSS3新增伪类有那些？ p:first-of-type 选择属于其父元素的首个 元素的每个 元素。 p:last-of-type 选择属于其父元素的最后 元素的每个 元素。 p:only-of-type 选择属于其父元素唯一的 元素的每个 元素。 p:only-child 选择属于其父元素的唯一子元素的每个 元素。 p:nth-child(2) 选择属于其父元素的第二个子元素的每个 元素。 :after 在元素之前添加内容,也可以用来做清除浮动。 :before 在元素之后添加内容 :enabled :disabled 控制表单控件的禁用状态。 :checked 单选框或复选框被选中 position的值relative和absolute定位原点是？ absolute 生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。 fixed （老IE不支持） 生成绝对定位的元素，相对于浏览器窗口进行定位。 relative 生成相对定位的元素，相对于其正常位置进行定位。 static 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。 inherit 规定从父元素继承 position 属性的值 请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？ 一个用于页面布局的全新CSS3功能，Flexbox可以把列表放在同一个方向（从上到下排列，从左到右），并让列表能延伸到占用可用的空间 较为复杂的布局还可以通过嵌套一个伸缩容器（flex container）来实现 采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。 它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目” 常规布局是基于块和内联流方向，而Flex布局是基于flex-flow流可以很方便的用来做局中，能对不同屏幕大小自适应 在布局上有了比以前更加灵活的空间 css多列等高如何实现？ 利用padding-bottom|margin-bottom正负值相抵； 设置父容器设置超出隐藏（overflow:hidden），这样子父容器的高度就还是它里面的列没有设定padding-bottom时的高度 当它里面的任 一列高度增加了，则父容器的高度被撑到里面最高那列的高度 其他比这列矮的列会用它们的padding-bottom补偿这部分高度差 经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8 浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一 IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大 浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;} 这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别) 渐进识别的方式，从总体中逐渐排除局部 首先，巧妙的使用“\\9”这一标记，将IE游览器从所有情况中分离出来。 接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别 123456.bb&#123; background-color:red;/*所有识别*/ background-color:#00deff\\9; /*IE6、7、8识别*/ +background-color:#a200ff;/*IE6、7识别*/ _background-color:#1e0bd1;/*IE6识别*/ &#125; IE下,可以使用获取常规属性的方法来获取自定义属性,也可以使用getAttribute()获取自定义属性; Firefox下,只能使用getAttribute()获取自定义属性 解决方法:统一通过getAttribute()获取自定义属性。 IE下,even对象有x,y属性,但是没有pageX,pageY属性 Firefox下,event对象有pageX,pageY属性,但是没有x,y属性 解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。 Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示, 可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。 超链接访问过后hover样式就不出现了。被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序: L-V-H-A : a:link {} a:visited {} a:hover {} a:active {} absolute的containing block(容器块)计算方式跟正常流有什么不同？ 无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断： 1、若此元素为 inline 元素，则 containing block为能够包含这个元素生成的第一个和最后一个 inline box 的 padding box (除 margin, border 外的区域) 的最小矩形； 2、否则,则由这个祖先元素的 padding box 构成。如果都找不到，则为 initial containing block。 补充： static(默认的)/relative：简单说就是它的父元素的内容框（即去掉padding的部分） absolute: 向上找最近的定位为absolute/relative的元素 fixed: 它的containing block一律为根元素(html/body)，根元素也是initial containing block CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？ 对于普通元素visibility:collapse;会将元素完全隐藏,不占据页面布局空间,与display:none;表现相同. 如果目标元素为table,visibility:collapse;将table隐藏,但是会占据页面布局空间. 仅在Firefox下起作用,IE会显示元素,Chrome会将元素隐藏,但是占据空间. position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？ 如果元素的display为none,那么元素不被渲染,position,float不起作用, 如果元素拥有position:absolute;或者position:fixed;属性那么元素将为绝对定位,float不起作用. 如果元素float属性不是none,元素会脱离文档流,根据float属性值来显示.有浮动,绝对定位,inline-block属性的元素,margin不会和垂直方向上的其他元素margin折叠 css定义的权重 以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下例子是演示各种定义的权重值 123456789101112131415161718/*权重为1*/div&#123;&#125;/*权重为10*/.class1&#123;&#125;/*权重为100*/#id1&#123;&#125;/*权重为100+1=101*/#id1 div&#123;&#125;/*权重为10+1=11*/.class1 div&#123;&#125;/*权重为10+10+1=21*/.class1 .class2 div&#123;&#125; 如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现 移动端的布局用过媒体查询吗？ 假设你现在正用一台显示设备来阅读这篇文章，同时你也想把它投影到屏幕上，或者打印出来，而显示设备、屏幕投影和打印等这些媒介都有自己的特点，CSS就是为文档提供在不同媒介上展示的适配方法 当媒体查询为真时，相关的样式表或样式规则会按照正常的级联规被应用。 当媒体查询返回假， 标签上带有媒体查询的样式表 仍将被下载 （只不过不会被应用） 包含了一个媒体类型和至少一个使用 宽度、高度和颜色等媒体属性来限制样式表范围的表达式 CSS3加入的媒体查询使得无需修改内容便可以使样式应用于某些特定的设备范围 1234567&lt;style&gt;@media (min-width: 700px) and (orientation: landscape)&#123; .sidebar &#123; display: none; &#125;&#125;&lt;/style&gt; 使用 CSS 预处理器吗？喜欢那个？SASS (SASS、LESS没有本质区别，只因为团队前端都是用的SASS) CSS优化、提高性能的方法有哪些？ 关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）； 如果规则拥有 ID 选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）； 提取项目的通用公有样式，增强可复用性，按模块编写组件；增强项目的协同开发性、可维护性和可扩展性; 使用预处理工具或构建工具（gulp对css进行语法检查、自动补前缀、打包压缩、自动优雅降级） 浏览器是怎样解析CSS选择器的？ 样式系统从关键选择器开始匹配，然后左移查找规则选择器的祖先元素 只要选择器的子树一直在工作，样式系统就会持续左移，直到和规则匹配，或者是因为不匹配而放弃该规则 margin和padding分别适合什么场景使用？ margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。 margin用于布局分开元素使元素与元素互不相干； padding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段 ::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用 单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。（伪元素由双冒号和伪元素名称组成） 双冒号是在当前规范中引入的，用于区分伪类和伪元素。不过浏览器需要同时支持旧的已经存在的伪元素写法 比如:first-line、:first-letter、:before、:after等，而新的在CSS3中引入的伪元素则不允许再支持旧的单冒号的写法。 想让插入的内容出现在其它内容前，使用::before，否者，使用::after；在代码顺序上，::after生成的内容也比::before生成的内容靠后。 如果按堆栈视角，::after生成的内容会在::before生成的内容之上 如何修改chrome记住密码后自动填充表单的黄色背景 ？12345input:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill &#123; background-color: rgb(250, 255, 189); /* #FAFFBD; */ background-image: none; color: rgb(0, 0, 0);&#125; 让页面里的字体变清晰，变细用CSS怎么做？-webkit-font-smoothing: antialiased; font-style属性可以让它赋值为“oblique” oblique是什么意思？倾斜的字体样式 position:fixed;在android下无效怎么处理？ fixed的元素是相对整个页面固定位置的，你在屏幕上滑动只是在移动这个所谓的viewport，原来的网页还好好的在那，fixed的内容也没有变过位置， 所以说并不是iOS不支持fixed，只是fixed的元素不是相对手机屏幕固定的 &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&quot;/&gt; 如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms 什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做） 如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，所以不如隔离开。 因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的 同时这种方式不会将cookie传入Web Server，也减少了Web Server对cookie的处理分析环节，提高了webserver的http请求的解析速度。 什么是CSS 预处理器 / 后处理器？ 预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。 后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。 盒模型：content（元素内容） + padding（内边距） + border（边框） + margin（外边距） 延伸： box-sizing content-box：默认值，总宽度 = margin + border + padding + width border-box：盒子宽度包含 padding 和 border，总宽度 = margin + width inherit：从父元素继承 box-sizing 属性 BFC、IFC、GFC、FFC：FC（Formatting Contexts），格式化上下文 BFC：块级格式化上下文，容器里面的子元素不会在布局上影响到外面的元素，反之也是如此(按照这个理念来想，只要脱离文档流，肯定就能产生 BFC)。产生 BFC 方式如下 float 的值不为 none。 overflow 的值不为 visible。 position 的值不为 relative 和 static。 display 的值为 table-cell, table-caption, inline-block中的任何一个 用处？常见的多栏布局，结合块级别元素浮动，里面的元素则是在一个相对隔离的环境里运行 IFC：内联格式化上下文，IFC 的 line box（线框）高度由其包含行内元素中最高的实际高度计算而来（不受到竖直方向的 padding/margin 影响)。 IFC中的line box一般左右都贴紧整个 IFC，但是会因为 float 元素而扰乱。float 元素会位于 IFC 与 line box 之间，使得 line box 宽度缩短。 同个 ifc 下的多个 line box 高度会不同。 IFC中时不可能有块级元素的，当插入块级元素时（如 p 中插入 div）会产生两个匿名块与 div 分隔开，即产生两个 IFC ，每个 IFC 对外表现为块级元素，与 div 垂直排列。 用处？ 水平居中：当一个块要在环境中水平居中时，设置其为 inline-block 则会在外层产生IFC，通过 text-align 则可以使其水平居中。 垂直居中：创建一个 IFC，用其中一个元素撑开父元素的高度，然后设置其 vertical-align: middle，其他行内元素则可以在此父元素下垂直居中 GFC：网格布局格式化上下文（display: grid） FFC：自适应格式化上下文（display: flex） BFC 什么是 BFC BFC（Block Formatting Context）格式化上下文，是 Web 页面中盒模型布局的 CSS 渲染模式，指一个独立的渲染区域或者说是一个隔离的独立容器。 形成 BFC 的条件 浮动元素，float 除 none 以外的值 定位元素，position（absolute，fixed） display 为以下其中之一的值 inline-block，table-cell，table-caption overflow 除了 visible 以外的值（hidden，auto，scroll） BFC 的特性 内部的 Box 会在垂直方向上一个接一个的放置。 垂直方向上的距离由 margin 决定 bfc 的区域不会与 float 的元素区域重叠。 计算 bfc 的高度时，浮动元素也参与计算 bfc 就是页面上的一个独立容器，容器里面的子元素不会影响外面元素。 对BFC规范(块级格式化上下文：block formatting context)的理解？ 一个页面是由很多个 Box 组成的,元素的类型和 display 属性,决定了这个 Box 的类型 不同类型的 Box,会参与不同的 Formatting Context（决定如何渲染文档的容器）,因此Box内的元素会以不同的方式渲染,也就是说BFC内部的元素和外部的元素不会互相影响 谈一谈你对CSS盒模型的认识及BFC 专业的面试，一定会问 CSS 盒模型。对于这个题目，我们要回答一下几个方面： 基本概念：content、padding、margin 标准盒模型、IE盒模型的区别。不要漏说了IE盒模型，通过这个问题，可以筛选一部分人 CSS如何设置这两种模型（即：如何设置某个盒子为其中一个模型）？如果回答了上面的第二条，还会继续追问这一条。 JS如何设置、获取盒模型对应的宽和高？这一步，已经有很多人答不上来了。 实例题：根据盒模型解释边距重叠。 前四个方面是逐渐递增，第五个方面，却鲜有人知。 BFC（边距重叠解决方案）或IFC。 如果能回答第五条，就会引出第六条。BFC是面试频率较高的。 总结：以上几点，从上到下，知识点逐渐递增，知识面从理论、CSS、JS，又回到CSS理论 接下来，我们把上面的六条，依次讲解。 标准盒模型和IE盒子模型标准盒子模型： IE盒子模型： 上图显示： 在 CSS 盒子模型 (Box Model) 规定了元素处理元素的几种方式： width和height：内容的宽度、高度（不是盒子的宽度、高度）。 padding：内边距。 border：边框。 margin：外边距。 CSS盒模型和IE盒模型的区别： 在标准盒子模型中，width 和 height 指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。 IE盒子模型中，width 和 height 指的是内容区域+border+padding的宽度和高度。 CSS如何设置这两种模型 代码如下： 12345/* 设置当前盒子为 标准盒模型（默认） */box-sizing: content-box;/* 设置当前盒子为 IE盒模型 */box-sizing: border-box; 备注：盒子默认为标准盒模型。 JS如何设置、获取盒模型对应的宽和高 方式一：通过DOM节点的 style 样式获取 1element.style.width/height; 缺点：通过这种方式，只能获取行内样式，不能获取内嵌的样式和外链的样式。 这种方式有局限性，但应该了解。 方式二（通用型） 1window.getComputedStyle(element).width/height; 方式二能兼容 Chrome、火狐。是通用型方式。 方式三（IE独有的） 1element.currentStyle.width/height; 和方式二相同，但这种方式只有IE独有。获取到的即时运行完之后的宽高（三种css样式都可以获取）。 方式四 1element.getBoundingClientRect().width/height; 此 api 的作用是：获取一个元素的绝对位置。绝对位置是视窗 viewport 左上角的绝对位置。此 api 可以拿到四个属性：left、top、width、height。 总结： 上面的四种方式，要求能说出来区别，以及哪个的通用型更强。 margin塌陷/margin重叠 标准文档流中，竖直方向的margin不叠加，只取较大的值作为margin(水平方向的margin是可以叠加的，即水平方向没有塌陷现象)。 PS：如果不在标准流，比如盒子都浮动了，那么两个盒子之间是没有margin重叠的现象的。 我们来看几个例子。 兄弟元素之间 如下图所示： 子元素和父元素之间 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; .father &#123; background: green; &#125; /* 给儿子设置margin-top为10像素 */ .son &#123; height: 100px; margin-top: 10px; background: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"father\"&gt; &lt;div class=\"son\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 上面的代码中，儿子的height是 100px，magin-top 是10px。注意，此时父亲的 height 是100，而不是110。因为儿子和父亲在竖直方向上，共一个margin。 儿子这个盒子： 父亲这个盒子： 上方代码中，如果我们给父亲设置一个属性：overflow: hidden，就可以避免这个问题，此时父亲的高度是110px，这个用到的就是BFC（下一段讲解）。 善于使用父亲的padding，而不是儿子的margin 其实，这一小段讲的内容与上一小段相同，都是讲父子之间的margin重叠。 我们来看一个奇怪的现象。现在有下面这样一个结构：（div中放一个p） 123&lt;div&gt; &lt;p&gt;&lt;/p&gt;&lt;/div&gt; 上面的结构中，我们尝试通过给儿子p一个margin-top:50px;的属性，让其与父亲保持50px的上边距。结果却看到了下面的奇怪的现象： 此时我们给父亲div加一个border属性，就正常了： 如果父亲没有border，那么儿子的margin实际上踹的是“流”，踹的是这“行”。所以，父亲整体也掉下来了。 margin这个属性，本质上描述的是兄弟和兄弟之间的距离； 最好不要用这个marign表达父子之间的距离。 所以，如果要表达父子之间的距离，我们一定要善于使用父亲的padding，而不是儿子的`margin。 BFC（边距重叠解决方案） BFC（Block Formatting Context）：块级格式化上下文。你可以把它理解成一个独立的区域。 另外还有个概念叫IFC。不过，BFC问得更多。 BFC 的原理/BFC的布局规则【非常重要】 BFC 的原理，其实也就是 BFC 的渲染规则（能说出以下四点就够了）。包括： BFC 内部的子元素，在垂直方向，边距会发生重叠。 BFC在页面中是独立的容器，外面的元素不会影响里面的元素，反之亦然。（稍后看举例1） BFC区域不与旁边的float box区域重叠。（可以用来清除浮动带来的影响）。（稍后看举例2） 计算BFC的高度时，浮动的子元素也参与计算。（稍后看举例3） 如何生成BFC 有以下几种方法： 方法1：overflow: 不为visible，可以让属性是 hidden、auto。【最常用】 方法2：浮动中：float的属性值不为none。意思是，只要设置了浮动，当前元素就创建了BFC。 方法3：定位中：只要posiiton的值不是 static或者是relative即可，可以是absolute或fixed，也就生成了一个BFC。 方法4：display为inline-block, table-cell, table-caption, flex, inline-flex BFC 的应用 举例1：解决 margin 重叠 当父元素和子元素发生 margin 重叠时，解决办法：给子元素或父元素创建BFC。 比如说，针对下面这样一个 div 结构： 1234&lt;div class=\"father\"&gt; &lt;p class=\"son\"&gt; &lt;/p&gt;&lt;/div&gt; 上面的div结构中，如果父元素和子元素发生margin重叠，我们可以给子元素创建一个 BFC，就解决了： 1234&lt;div class=\"father\"&gt; &lt;p class=\"son\" style=\"overflow: hidden\"&gt; &lt;/p&gt;&lt;/div&gt; 因为第二条：BFC区域是一个独立的区域，不会影响外面的元素。 举例2：BFC区域不与float区域重叠： 针对下面这样一个div结构； 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .father-layout &#123; background: pink; &#125; .father-layout .left &#123; float: left; width: 100px; height: 100px; background: green; &#125; .father-layout .right &#123; height: 150px; /*右侧标准流里的元素，比左侧浮动的元素要高*/ background: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;section class=\"father-layout\"&gt; &lt;div class=\"left\"&gt; 左侧，生命壹号 &lt;/div&gt; &lt;div class=\"right\"&gt; 右侧，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae， &lt;/div&gt;&lt;/section&gt;&lt;/body&gt;&lt;/html&gt; 效果如下： 上图中，由于右侧标准流里的元素，比左侧浮动的元素要高，导致右侧有一部分会跑到左边的下面去。 如果要解决这个问题，可以将右侧的元素创建BFC，因为第三条：BFC区域不与float box区域重叠。解决办法如下：（将right区域添加overflow属性） 123&lt;div class=\"right\" style=\"overflow: hidden\"&gt; 右侧，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，smyhvae，&lt;/div&gt; 上图表明，解决之后，father-layout的背景色显现出来了，说明问题解决了。 举例3：清除浮动 现在有下面这样的结构： 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .father &#123; background: pink; &#125; .son &#123; float: left; background: green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;section class=\"father\"&gt; &lt;div class=\"son\"&gt; 生命壹号 &lt;/div&gt;&lt;/section&gt;&lt;/body&gt;&lt;/html&gt; 效果如下： 上面的代码中，儿子浮动了，但由于父亲没有设置高度，导致看不到父亲的背景色（此时父亲的高度为0）。正所谓有高度的盒子，才能关住浮动。 如果想要清除浮动带来的影响，方法一是给父亲设置高度，然后采用隔墙法。方法二是 BFC：给父亲增加 overflow=hidden属性即可， 增加之后，效果如下： 为什么父元素成为BFC之后，就有了高度呢？这就回到了第四条：计算BFC的高度时，浮动元素也参与计算。意思是，在计算BFC的高度时，子元素的float box也会参与计算 实现不使用 border 画出 1px 高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。1&lt;div style=\"height:1px;overflow:hidden;background:red\"&gt;&lt;/div&gt; CSS 隐藏元素的几种方法（至少说出三种）Opacity:元素本身依然占据它自己的位置并对网页的布局起作用。它也将响应用户交互; Visibility:与 opacity 唯一不同的是它不会响应任何用户交互。此外，元素在读屏软件中也会被隐藏; Display:display 设为 none 任何对该元素直接打用户交互操作都不可能生效。此外，读屏软件也不会读到元素的内容。这种方式产生的效果就像元素完全不存在; Position:不会影响布局，能让元素保持可以操作; Clip-path:clip-path 属性还没有在 IE 或者 Edge 下被完全支持。如果要在你的 clip-path 中使用外部的 SVG 文件，浏览器支持度还要低; 页面导入样式时，使用 link 和@import 有什么区别？ Link 属于 html 标签，而@import 是 CSS 中提供的 在页面加载的时候，link 会同时被加载，而@import 引用的 CSS 会在页面加载完成后才会加载引用的 CSS @import 只有在 ie5 以上才可以被识别，而 link 是 html 标签，不存在浏览器兼容性问题 Link 引入样式的权重大于@import 的引用（@import 是将引用的样式导入到当前的页面中） Link支持使用 javascript 改变样式，@import不可 CSS引入的方式有哪些?答：内联 内嵌 外链 导入 伪元素和伪类的区别？1、伪元素使用 2 个冒号，常见的有：::before，::after，::first-line，::first-letter，::selection、::placeholder 等； 1伪类使用1个冒号，常见的有：:hover，:link，:active，:target，:not()，:focus等。 2、伪元素添加了一个页面中没有的元素（只是从视觉效果上添加了，不是在文档树中添加）； 1伪类是给页面中已经存在的元素添加一个类。 解析： CSS 伪元素是添加到选择器的关键字，去选择元素的特定部分。它们可以用于装饰（:first-line，:first-letter）或将元素添加到标记中（与 content:…组合），而不必修改标记（:before，:after）。 :first-line和:first-letter可以用来修饰文字。 上面提到的.clearfix方法中，使用clear: both来添加不占空间的元素。 使用:before和after展示提示中的三角箭头。鼓励关注点分离，因为三角被视为样式的一部分，而不是真正的 DOM。如果不使用额外的 HTML 元素，只用 CSS 样式绘制三角形是不太可能的。 参考 CSS优先级算法如何计算？ 优先级就近原则，同权重情况下样式定义最近者为准 载入样式以最后载入的定位为准 优先级为: !important &gt; id &gt; class &gt; tag important 比 内联优先级高 同权重: 内联样式表（标签内部）&gt; 嵌入样式表（当前文件中）&gt; 外部样式表（外部文件中）。 !important &gt; id &gt; class &gt; tag important 比 内联优先级高 CSS如何计算选择器优先？ 相同权重，定义最近者为准：行内样式 &gt; 内部样式 &gt; 外部样式 含外部载入样式时，后载入样式覆盖其前面的载入的样式和内部样式 选择器优先级: 行内样式[1000] &gt; id[100] &gt; class[10] &gt; Tag[1] 在同一组属性设置中，!important 优先级最高，高于行内样式 CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？CSS3 新增伪类有那些？ 1.id选择器（ # myid） 2.类选择器（.myclassname） 3.标签选择器（div, h1, p） 4.相邻选择器（h1 + p） 5.子选择器（ul &lt; li） 6.后代选择器（li a） 7.通配符选择器（ * ） 8.属性选择器（a[rel = &quot;external&quot;]） 9.伪类选择器（a: hover, li: nth - child） * 可继承： font-size font-family color, UL LI DL DD DT; * 不可继承 ：border padding margin width height ; * 优先级就近原则，样式定义最近者为准; * 载入样式以最后载入的定位为准;优先级为: !important &gt; id &gt; class &gt; tag important 比 内联优先级高CSS3新增伪类举例： 12345678910111213 p:first-of-type 选择属于其父元素的首个 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。 p:last-of-type 选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。 p:only-of-type 选择属于其父元素唯一的 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。 p:only-child 选择属于其父元素的唯一子元素的每个 &lt;p&gt; 元素。 p:nth-child(2) 选择属于其父元素的第二个子元素的每个 &lt;p&gt; 元素。 :enabled、:disabled 控制表单控件的禁用状态。 :checked，单选框或复选框被选中。 CSS 选择器的优先级是如何计算的？浏览器通过优先级规则，判断元素展示哪些样式。优先级通过 4 个维度指标确定，我们假定以a、b、c、d命名，分别代表以下含义： a表示是否使用内联样式（inline style）。如果使用，a为 1，否则为 0。 b表示 ID 选择器的数量。 c表示类选择器、属性选择器和伪类选择器数量之和。 d表示标签（类型）选择器和伪元素选择器之和。 优先级的结果并非通过以上四个值生成一个得分，而是每个值分开比较。a、b、c、d权重从左到右，依次减小。判断优先级时，从左到右，一一比较，直到比较出最大值，即可停止。所以，如果b的值不同，那么c和d不管多大，都不会对结果产生影响。比如0，1，0，0的优先级高于0，0，10，10。 当出现优先级相等的情况时，最晚出现的样式规则会被采纳。如果你在样式表里写了相同的规则（无论是在该文件内部还是其它样式文件中），那么最后出现的（在文件底部的）样式优先级更高，因此会被采纳。 在写样式时，我会使用较低的优先级，这样这些样式可以轻易地覆盖掉。尤其对写 UI 组件的时候更为重要，这样使用者就不需要通过非常复杂的优先级规则或使用!important的方式，去覆盖组件的样式了。 解析：参考、参考 行内元素和块级元素的具体区别？行内元素的padding和margin可设置吗？ 块级元素(block)特性： 总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示; 宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制; 内联元素(inline)特性： 和相邻的内联元素在同一行; 宽度(width)、高度(height)、内边距的 top/bottom(padding-top/padding-bottom)和外边距的 top/bottom(margin-top/margin-bottom)都不可改变（也就是 padding 和 margin 的 left 和 right 是可以设置的），就是里面文字或图片的大小。 块级元素：div、p、h1~h6、hr、ul、ol、li、dl、dt、dd、form、table、tbody、tfoot、thead、（header、article、footer、nav、section）内联元素：span、a、b、br、em、strong、img、input、abbr、button、label、textarea（拓展：浏览器默认的inline-block元素）、、、、 12345678附：行内块元素的兼容性使用？ div｛ display:inline-blcok; //触发ie的hasLayout display:inline; ｝ div｛ display：inline；*zoom：1; ｝ 外边距重叠是什么？导致的结果是什么？在css当中两个（普通文档流）竖直方向上的毗邻（没有被非空内容、padding、border 或 clear 分隔开）盒子的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，所结合而成的外边距成为折叠外边距。注意：父块级盒子与子块级盒子在垂直方向上毗邻也会导致外边距重叠； 123456789计算规则： 两个竖直方向上相邻的外边距都是正数，折叠结果是他们两者之间较大的值。 两个竖直方向上相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。 两个竖直方向上相邻的外边距一正一负时，折叠结果是两者的相加的和；(附：如何使元素上下margin不折叠？) 1、浮动、inline-block、绝对定位； 2、创建块级格式化上下文（BFC）的元素，不和它的子元素发生margin折叠； (详细链接：https://www.zhihu.com/question/19823139) css中文字的水平垂直居中？line-height 设置为盒子高度text-align center; box-sizing 常用的属性？分别有什么作用？box-sizing：content-box|border-box|inherit；content-box：宽、高应用到元素的内容框。在高、宽之外绘制元素的内边距和边框（默认效果）；border-box：元素的任何内边距和边框都在已设定的宽度和高度内进行绘制。此时的宽高=content+padding+border； css 中可以让文字在垂直和水平方向上重叠的两个属性是什么？垂直方向：line-height 水平方向：letter-spacing letter-spacing 的妙用知道有哪些么？可以用于消除 inline-block 元素间的换行符空格间隙问题。 px 和em的区别px 和 em 都是长度单位 px 的值是固定的，指定是多少就是多少，计算比较容易。 em 得值不是固定的，并且 em 会继承父级元素的字体大小。 浏览器的默认字体高都是 16px。所以未经调整的浏览器都符合: 1em=16px。那么 12px=0.75em, 10px=0.625em。 用纯 CSS 创建一个三角形的原理是什么？12345678span &#123; width: 0; height: 0; border-top: 40px solid transparent; border-left: 40px solid transparent; border-right: 40px solid transparent; border-bottom: 40px solid #ff0000;&#125; css_001 Sass、LESS 是什么？大家为什么要使用他们？他们是 CSS 预处理器。他是 CSS 上的一种抽象层。他们是一种特殊的语法/语言编译成 CSS。 例如 Less 是一种动态样式语言. 将 CSS 赋予了动态语言的特性，如变量，继承，运算， 函数. LESS 既可以在客户端上运行 (支持 IE 6+, Webkit, Firefox)，也可一在服务端运行 (借助 Node.js)。 为什么要使用它们？ 结构清晰，便于扩展。 可以方便地屏蔽浏览器私有语法差异。这个不用多说，封装对浏览器语法差异的重复处理，减少无意义的机械劳动。 可以轻松实现多重继承。 完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译。 移动端 1px 问题的解决办法推荐解决方法：媒体查询 + transfrom 1234567891011121314/* 2倍屏 */@media only screen and (-webkit-min-device-pixel-ratio: 2.0) &#123; .border-bottom::after &#123; -webkit-transform: scaleY(0.5); transform: scaleY(0.5); &#125;&#125;/* 3倍屏 */@media only screen and (-webkit-min-device-pixel-ratio: 3.0) &#123; .border-bottom::after &#123; -webkit-transform: scaleY(0.33); transform: scaleY(0.33); &#125;&#125; 其他解决方案参考 哪些 css 属性可以继承？可继承： font-size font-family color, ul li dl dd dt; 不可继承 ：border padding margin width height ; li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？行框的排列会受到中间空白（回车\\空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔 解决办法：在ul设置设置font-size=0,在li上设置需要的文字大小（把字符大小设为0），就没有空格了 ### 浏览器的默认行为是把 inline 元素间的空白字符（空格换行 tab）渲染成一个空格，也就是我们上面的代码换行后会产生换行字符，而它会变成一个空格，当然空格就占用一个字符的宽度。 解决方案： 方法一：既然是因为&lt;li&gt;换行导致的，那就可以将&lt;li&gt;代码全部写在一排，如下 123456789&lt;div class=\"wrap\"&gt; &lt;h3&gt;li标签空白测试&lt;/h3&gt; &lt;ul&gt; &lt;li class=\"part1\"&gt;&lt;/li&gt; &lt;li class=\"part2\"&gt;&lt;/li&gt; &lt;li class=\"part3\"&gt;&lt;/li&gt; &lt;li class=\"part4\"&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 方法二：我们为了代码美观以及方便修改，很多时候我们不可能将&lt;li&gt;全部写在一排，那怎么办？既然是空格占一个字符的宽度，那我们索性就将&lt;ul&gt;内的字符尺寸直接设为 0，将下面样式放入样式表，问题解决。 123.wrap ul &#123; font-size: 0px;&#125; 但随着而来的就是&lt;ul&gt;中的其他文字就不见了，因为其尺寸被设为 0px 了，我们只好将他们重新设定字符尺寸。方法三：本来以为方法二能够完全解决问题，但经测试，将 li 父级标签字符设置为 0 在 Safari 浏览器依然出现间隔空白；既然设置字符大小为 0 不行，那咱就将间隔消除了，将下面代码替换方法二的代码，目前测试完美解决。同样随来而来的问题是 li 内的字符间隔也被设置了，我们需要将 li 内的字符间隔设为默认。 123.wrap ul &#123; letter-spacing: -5px;&#125; 之后记得设置 li 内字符间隔 123.wrap ul li &#123; letter-spacing: normal;&#125; png、jpg、gif 这些图片格式解释一下，分别什么时候用？，webp 呢gif 图形交换格式，索引颜色格式，颜色少的情况下，产生的文件极小，支持背景透明，动画，图形渐进，无损压缩（适合线条，图标等），缺点只有 256 种颜色 jpg 支持上百万种颜色，有损压缩，压缩比可达 180：1，而且质量受损不明显，不支持图形渐进与背景透明，不支持动画 png 为替代 gif 产生的，位图文件，支持透明，半透明，不透明。不支持动画，无损图像格式。Png8 简单说是静态 gif，也只有 256 色，png24 不透明，但不止 256 色。 webp 谷歌开发的旨在加快图片加载速度的图片格式，图片压缩体积是 jpeg 的 2/3，有损压缩。高版本的 W3C 浏览器才支持，google39+，safari7+ style 标签写在 body 后与 body 前有什么区别？从上向下加载，加载顺序不同 超链接访问过后 hover 样式就不出现的问题是什么？如何解决？被点击访问过的超链接样式不在具有 hover 和 active 了,解决方法是改变 CSS 属性的排列顺序: L-V-H-A（link,visited,hover,active） 什么是 Css Hack？ie6,7,8 的 hack 分别是什么？针对不同的浏览器写不同的 CSS code 的过程，就是 CSS hack。 示例如下： 12345678910111213141516171819#test&#123; width:300px; height:300px; background-color:blue; /_firefox_/ background-color:red\\9; /_all ie_/ background-color:yellow; /_ie8_/ +background-color:pink; /_ie7_/ \\_background-color:orange; /_ie6_/ &#125; :root #test &#123; background-color:purple\\9; &#125; /*ie9*/@media all and (min-width:0px) &#123; #test &#123;background-color:black;&#125; &#125; /*opera*/@media screen and (-webkit-min-device-pixel-ratio:0)&#123; #test &#123;background-color:gray;&#125; &#125; /*chrome and safari*/ 重置（resetting）CSS 和 标准化（normalizing）CSS 的区别是什么？你会选择哪种方式，为什么？ 重置（Resetting）： 重置意味着除去所有的浏览器默认样式。对于页面所有的元素，像margin、padding、font-size这些样式全部置成一样。你将必须重新定义各种元素的样式。 标准化（Normalizing）： 标准化没有去掉所有的默认样式，而是保留了有用的一部分，同时还纠正了一些常见错误。 当需要实现非常个性化的网页设计时，我会选择重置的方式，因为我要写很多自定义的样式以满足设计需求，这时候就不再需要标准化的默认样式了。 解析：参考 什么是 Fouc(文档样式短暂失效Flash of Unstyled Content)？在引用 css 的过程中，如果方法不当或者位置引用不对，会导致某些页面在 windows 下的 ie 出现一些奇怪的现象，以无样式显示页面内容的瞬间闪烁，这种现象称之为文档样式短暂失效，简称 FOCU。 原因： 当样式表晚于结构性html加载时，加载到此样式表时，页面将停止之前的渲染。等待此样式表被下载和解析后，再重新渲染页面，期间导致短暂的花屏现象。 使用 import 方法导入样式表 将样式表放在页面底部 有几个样式表，放在 html 结构的不同位置。 其实原理很清楚：当样式表晚于结构性 html 加载，当加载到此样式表时，页面将停止之前的渲染。此样式表被下载和解析后，将重新渲染页面，也就出现了短暂的花屏现象。 解决方法：使用 link 标签将样式表放在文档 head 中。 PNG,GIF,JPG 的区别及如何选GIF： 1：256 色 2： 无损，编辑 保存时候，不会损失。 3：支持简单动画。 4：支持 boolean 透明，也就是要么完全透明，要么不透明 JPEG： 1：millions of colors 2： 有损压缩， 意味着每次编辑都会失去质量。 3：不支持透明。 4：适合照片，实际上很多相机使用的都是这个格式。 PNG： 1：无损，其实 PNG 有好几种格式的，一般分为两类：PNG8 和 truecolor PNGs； 与 GIF 相比： 它通常会产生较小的文件大小。 它支持阿尔法（变量）透明度。 无动画支持 与 JPEG 相比： 文件更大 无损 因此可以作为 JPEG 图片中间编辑的中转格式。 结论： JPEG 适合照片 GIF 适合动画 PNG 适合其他任何种类——图表，buttons，背景，图表等等。 参考 position 的值， relative 和 absolute 分别是相对于谁进行定位的？ absolute :生成绝对定位的元素， 相对于最近一级的 定位不是 static 的父元素来进行定位。 fixed （老 IE 不支持）生成绝对定位的元素，通常相对于浏览器窗口或 frame 进行定位。 relative 生成相对定位的元素，相对于其在普通流中的位置进行定位。 static 默认值。没有定位，元素出现在正常的流中 sticky 生成粘性定位的元素，容器的位置根据正常文档流计算得出 对偏移、卷曲、可视的理解偏移offsetWidth width + padding + borderoffsetHeight height + padding + borderoffsetLeftoffsetTopoffsetParent注意：没有offsetRight和offsetBottom 卷曲scrollWidth width + paddingscrollHeight 当内部的内容溢出盒子的时候， 顶边框的底部，计算到内容的底部；如果内容没有溢出盒子，计算方式为盒子内部的真实高度（边框到边框）scrollLeft 这个scroll系列属性不是只读的scrollTopscroll() 此函数可以获取卷曲的高度和卷曲的宽度 123456function myScroll() &#123; return &#123; top: window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0, left: window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0 &#125;;&#125; 滚动滚动条的时候触发事件box（window）.onscroll = function () {} 可视clientWidth 获取的是元素内部的真实宽度 width + paddingclientHeight 边框之间的高度clientLeft 相当于左边框的宽度 如果元素包含了滚动条，并且滚动条显示在元素的左侧。这时，clientLeft属性会包含滚动条的宽度17pxclientTop 相当于顶边框的宽度client() 此函数可以获取浏览器可视区域的宽高 123456function myClient() &#123; return &#123; wid: window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth || 0, heit: window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight || 0 &#125;;&#125; @offsetHeight和style.height的区别 demo.style.height只能获取行内样式，如果样式写到了其他地方，甚至根本就没写，便无法获取style.height是字符串（而且带单位），offsetHeight是数值demo.style.height可以设置行内样式，offsetHeight是只读属性因此，一般用demo.offsetHeight来获取某元素的真实宽度/高度，用style.height来设置宽度/高度 @offsetLeft和style.left的区别 一、style.left只能获取行内样式二、offsetLeft只读，style.left可读可写三、offsetLeft是数值，style.left是字符串并且有单位px四、如果没有加定位，style.left获取的数值可能是无效的五、最大区别在于offsetLeft以border左上角为基准，style.left以margin左上角为基准 @scrollHeight和scrollWidth 标签内部实际内容的高度/宽度不计算边框，如果内容不超出盒子，值为盒子的宽高（不带边框）如果内容超出了盒子，就是从顶部或左部边框内侧一直到内容a的最外部分 @scrollTop和scrollLeft 被卷去部分的 顶部/左侧 到可视区域 顶部/左侧 的距离 解析： offset大全 scroll大全 三个height比较 style.left和offsetLeft client大全 简述一下 Sass、Less，且说明区别？他们是动态的样式语言，是 CSS 预处理器,CSS 上的一种抽象层。他们是一种特殊的语法/语言而编译成 CSS。 变量符不一样，less 是@，而 Sass 是$; Sass 支持条件语句，可以使用 if{}else{},for{}循环等等。而 Less 不支持; Sass 是基于 Ruby 的，是在服务端处理的，而 Less 是需要引入 less.js 来处理 Less 代码输出 Css 到浏览器 Css Sprites概念： 将多个小图片拼接到一个图片中。通过 background-position 和元素尺寸调节需要显示的背景图案。 介绍：Css Sprites（雪碧图或 css 精灵），是网页图片处理的一种方式，它允许你将一个页面涉及到的所有零星图片都包含到一张大图中去，这样一来，当访问该页面时，载入的图片就不会像以前那样一幅一幅地慢慢显示出来了。 原理：将许多的小图片整合到一张大图片中，利用 css 中的 background-image 属性，background-position 属性定位某个图片位置，来达到在大图片中引用某个部位的小图片的效果。 优点：减少网页的 http 请求，提升网页加载速度。增加图片信息重复度，提高压缩比，减少图片大小。合并多张小图片成大图，能减少字节总数（大图大小&lt;=多张小图大小） 缺点：前期需要处理图片将小图合并，多些许工程量，图片合并麻烦。对于需要经常改变的图片维护起来麻烦，修改一个图片可能需要从新布局整个图片，样式。 base64介绍：base64 是网络上最常见的用于传输 8Bit 字节代码的编码方式之一，要求把每三个 8Bit 的字节转换为四个 6Bit 的字节，Base64 是网络上最常见的用于传输 8Bit 字节代码的编码方式之一。 通俗点讲：将资源原本二进制形式转成以 64 个字符基本单位，所组成的一串字符串。一张图片转成 base64 编码，图片直接以 base64 形式嵌入文件中（很长没截完）： 生成 base64 编码：图片生成 base64 可以用一些工具，如在线工具，但在项目中这样一个图片这样生成是挺繁琐。特别说下，webpack 中的 url-loader 可以完成这个工作，可以对限制大小的图片进行 base64 的转换，非常方便。 优点：base64 的图片会随着 html 或者 css 一起下载到浏览器,减少了请求.可避免跨域问题 缺点：老东西（低版本）的 IE 浏览器不兼容。体积会比原来的图片大一点。css 中过多使用 base64 图片会使得 css 过大，不利于 css 的加载。 适用场景：应用于小的图片几 k 的，太大的图片会转换后的大小太大，得不偿失。用于一些 css sprites 不利处理的小图片，如一些可以通过 background-repeat 平铺来做成背景的图片 解析：参考 如果设计中使用了非标准的字体，你该如何去实现？使用@font-face并为不同的font-weight定义font-family。 请阐述Float定位的工作原理。浮动（float）是 CSS 定位属性。浮动元素从网页的正常流动中移出，但是保持了部分的流动性，会影响其他元素的定位（比如文字会围绕着浮动元素）。这一点与绝对定位不同，绝对定位的元素完全从文档流中脱离。 CSS 的clear属性通过使用left、right、both，让该元素向下移动（清除浮动）到浮动元素下面。 如果父元素只包含浮动元素，那么该父元素的高度将塌缩为 0。我们可以通过清除（clear）从浮动元素后到父元素关闭前之间的浮动来修复这个问题。 有一种 hack 的方法，是自定义一个.clearfix类，利用伪元素选择器::after清除浮动。另外还有一些方法，比如添加空的&lt;div&gt;&lt;/div&gt;和设置浮动元素父元素的overflow属性。与这些方法不同的是，clearfix方法，只需要给父元素添加一个类，定义如下： 12345.clearfix::after &#123; content: \"\"; display: block; clear: both;&#125; 值得一提的是，把父元素属性设置为overflow: auto或overflow: hidden，会使其内部的子元素形成块格式化上下文（Block Formatting Context），并且父元素会扩张自己，使其能够包围它的子元素。 解析：参考 请阐述z-index属性，并说明如何形成层叠上下文（stacking context）CSS 中的z-index属性控制重叠元素的垂直叠加顺序。z-index只能影响position值不是static的元素。 没有定义z-index的值时，元素按照它们出现在 DOM 中的顺序堆叠（层级越低，出现位置越靠上）。非静态定位的元素（及其子元素）将始终覆盖静态定位（static）的元素，而不管 HTML 层次结构如何。 层叠上下文是包含一组图层的元素。 在一组层叠上下文中，其子元素的z-index值是相对于该父元素而不是 document root 设置的。每个层叠上下文完全独立于它的兄弟元素。如果元素 B 位于元素 A 之上，则即使元素 A 的子元素 C 具有比元素 B 更高的z-index值，元素 C 也永远不会在元素 B 之上. 每个层叠上下文是自包含的：当元素的内容发生层叠后，整个该元素将会在父层叠上下文中按顺序进行层叠。少数 CSS 属性会触发一个新的层叠上下文，例如opacity小于 1，filter不是none，transform不是none。 解析：参考 1、参考 2、参考 3 如何解决不同浏览器的样式兼容性问题？ 在确定问题原因和有问题的浏览器后，使用单独的样式表，仅供出现问题的浏览器加载。这种方法需要使用服务器端渲染。 使用已经处理好此类问题的库，比如 Bootstrap。 使用 autoprefixer 自动生成 CSS 属性前缀。 使用 Reset CSS 或 Normalize.css。 如何为功能受限的浏览器提供页面？ 使用什么样的技术和流程？ 优雅的降级：为现代浏览器构建应用，同时确保它在旧版浏览器中正常运行。 Progressive enhancement - The practice of building an application for a base level of user experience, but adding functional enhancements when a browser supports it. 渐进式增强：构建基于用户体验的应用，但在浏览器支持时添加新增功能。 利用 caniuse.com 检查特性支持。 使用 autoprefixer 自动生成 CSS 属性前缀。 使用 Modernizr进行特性检测。 有什么不同的方式可以隐藏内容（使其仅适用于屏幕阅读器）？这些方法与可访问性（a11y）有关。 visibility: hidden：元素仍然在页面流中，并占用空间。 width: 0; height: 0：使元素不占用屏幕上的任何空间，导致不显示它。 position: absolute; left: -99999px： 将它置于屏幕之外。 text-indent: -9999px：这只适用于block元素中的文本。 Metadata： 例如通过使用 Schema.org，RDF 和 JSON-LD。 WAI-ARIA：如何增加网页可访问性的 W3C 技术规范。 即使 WAI-ARIA 是理想的解决方案，我也会采用绝对定位方法，因为它具有最少的注意事项，适用于大多数元素，而且使用起来非常简单。 解析：参考 1、参考 2、参考 3 除了screen，你还能说出一个 @media 属性的例子吗？ all适用于所有设备。 print为了加载合适的文档到当前使用的可视窗口. 需要提前咨询 paged media（媒体屏幕尺寸）, 以满足个别设备网页尺寸不匹配等问题。 screen主要适用于彩色的电脑屏幕 speech 解析：speech 这个合成器. 注意: CSS2 已经有一个相似的媒体类型叫 aural.参考 编写高效的 CSS 应该注意什么？首先，浏览器从最右边的选择器，即关键选择器（key selector），向左依次匹配。根据关键选择器，浏览器从 DOM 中筛选出元素，然后向上遍历被选元素的父元素，判断是否匹配。选择器匹配语句链越短，浏览器的匹配速度越快。避免使用标签和通用选择器作为关键选择器，因为它们会匹配大量的元素，浏览器必须要进行大量的工作，去判断这些元素的父元素们是否匹配。 BEM (Block Element Modifier) methodology recommends that everything has a single class, and, where you need hierarchy, that gets baked into the name of the class as well, this naturally makes the selector efficient and easy to override.BEM (Block Element Modifier)原则上建议为独立的 CSS 类命名，并且在需要层级关系时，将关系也体现在命名中，这自然会使选择器高效且易于覆盖。 搞清楚哪些 CSS 属性会触发重新布局（reflow）、重绘（repaint）和合成（compositing）。在写样式时，避免触发重新布局的可能。 解析：参考 1、参考 2 使用 CSS 预处理的优缺点分别是什么？优点： 提高 CSS 可维护性。 易于编写嵌套选择器。 引入变量，增添主题功能。可以在不同的项目中共享主题文件。 通过混合（Mixins）生成重复的 CSS。 Splitting your code into multiple files. CSS files can be split up too but doing so will require a HTTP request to download each CSS file. 将代码分割成多个文件。不进行预处理的 CSS，虽然也可以分割成多个文件，但需要建立多个 HTTP 请求加载这些文件。 缺点： 需要预处理工具。 重新编译的时间可能会很慢。 对于你使用过的 CSS 预处理，说说喜欢和不喜欢的地方？喜欢： 绝大部分优点上题以及提过。 Less 用 JavaScript 实现，与 NodeJS 高度结合。 Dislikes: 我通过node-sass使用 Sass，它用 C ++ 编写的 LibSass 绑定。在 Node 版本切换时，我必须经常重新编译。 Less 中，变量名称以@作为前缀，容易与 CSS 关键字混淆，如@media、@import和@font-face。 解释浏览器如何确定哪些元素与 CSS 选择器匹配。这部分与上面关于编写高效的 CSS 有关。浏览器从最右边的选择器（关键选择器）根据关键选择器，浏览器从 DOM 中筛选出元素，然后向上遍历被选元素的父元素，判断是否匹配。选择器匹配语句链越短，浏览器的匹配速度越快。 例如，对于形如p span的选择器，浏览器首先找到所有&lt;span&gt;元素，并遍历它的父元素直到根元素以找到&lt;p&gt;元素。对于特定的&lt;span&gt;，只要找到一个&lt;p&gt;，就知道’`已经匹配并停止继续匹配。 解析：参考 说说你对盒模型的理解，以及如何告知浏览器使用不同的盒模型渲染布局。CSS 盒模型描述了以文档树中的元素而生成的矩形框，并根据排版模式进行布局。每个盒子都有一个内容区域（例如文本，图像等）以及周围可选的padding、border和margin区域。 CSS 盒模型负责计算： 块级元素占用多少空间。 边框是否重叠，边距是否合并。 盒子的尺寸。 盒模型有以下规则： 块级元素的大小由width、height、padding、border和margin决定。 如果没有指定height，则块级元素的高度等于其包含子元素的内容高度加上padding（除非有浮动元素，请参阅下文）。 如果没有指定width，则非浮动块级元素的宽度等于其父元素的宽度减去父元素的padding。 元素的height是由内容的height来计算的。 元素的width是由内容的width来计算的。 默认情况下，padding和border不是元素width和height的组成部分。 解析：参考 * { box-sizing: border-box; }会产生怎样的效果？ 元素默认应用了box-sizing: content-box，元素的宽高只会决定内容（content）的大小。 box-sizing: border-box改变计算元素width和height的方式，border和padding的大小也将计算在内。 元素的height = 内容（content）的高度 + 垂直方向的padding + 垂直方向border的宽度 元素的width = 内容（content）的宽度 + 水平方向的padding + 水平方向border的宽度 relative、fixed、absolute和static四种定位有什么区别？经过定位的元素，其position属性值必然是relative、absolute、fixed或static。 static：默认定位属性值。该关键字指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。 relative：该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。 absolute：不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。 fixed：不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的层叠上下文。当元素祖先的 transform 属性非 none 时，容器由视口改为该祖先。 static：盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下（即便被定位元素为 table 时），该元素定位均不对后续元素造成影响。当元素 B 被粘性定位时，后续元素的位置仍按照 B 未定位时的位置来确定。position: static 对 table 元素的效果与 position: relative 相同。 解析：参考 你使用过哪些现有的 CSS 框架？你是如何改进它们的？ Bootstrap： 更新周期缓慢。Bootstrap 4 已经处于 alpha 版本将近两年了。添加了在页面中广泛使用的微调按钮组件。 Semantic UI：源代码结构使得自定义主题很难理解。非常规主题系统的使用体验很差。外部库的路径需要硬编码（hard code）配置。变量重新赋值没有 Bootstrap 设计得好。 Bulma： 需要很多非语义的类和标记，显得很多余。不向后兼容，以至于升级版本后，会破坏应用的正常运行。 你了解 CSS Flex 和 Grid 吗？lex 主要用于一维布局，而 Grid 则用于二维布局。 Flexflex 容器中存在两条轴， 横轴和纵轴， 容器中的每个单元称为 flex item。 在容器上可以设置 6 个属性： flex-direction flex-wrap flex-flow justify-content align-items align-content 注意：当设置 flex 布局之后，子元素的 float、clear、vertical-align 的属性将会失效。 Flex 项目属性有六种属性可运用在 item 项目上: order flex-basis flex-grow flex-shrink flex align-self GridCSS 网格布局用于将页面分割成数个主要区域，或者用来定义组件内部元素间大小、位置和图层之间的关系。 像表格一样，网格布局让我们能够按行或列来对齐元素。 但是，使用 CSS 网格可能还是比 CSS 表格更容易布局。 例如，网格容器的子元素可以自己定位，以便它们像 CSS 定位的元素一样，真正的有重叠和层次。 响应式设计与自适应设计有何不同？响应式设计和自适应设计都以提高不同设备间的用户体验为目标，根据视窗大小、分辨率、使用环境和控制方式等参数进行优化调整。 响应式设计的适应性原则：网站应该凭借一份代码，在各种设备上都有良好的显示和使用效果。响应式网站通过使用媒体查询，自适应栅格和响应式图片，基于多种因素进行变化，创造出优良的用户体验。就像一个球通过膨胀和收缩，来适应不同大小的篮圈。 自适应设计更像是渐进式增强的现代解释。与响应式设计单一地去适配不同，自适应设计通过检测设备和其他特征，从早已定义好的一系列视窗大小和其他特性中，选出最恰当的功能和布局。与使用一个球去穿过各种的篮筐不同，自适应设计允许使用多个球，然后根据不同的篮筐大小，去选择最合适的一个。 解析：参考 1、参考 2、参考 3 你有没有使用过视网膜分辨率的图形？当中使用什么技术？我倾向于使用更高分辨率的图形（显示尺寸的两倍）来处理视网膜显示。更好的方法是使用媒体查询，像@media only screen and (min-device-pixel-ratio: 2) { ... }，然后改变background-image。 对于图标类的图形，我会尽可能使用 svg 和图标字体，因为它们在任何分辨率下，都能被渲染得十分清晰。 还有一种方法是，在检查了window.devicePixelRatio的值后，利用 JavaScript 将&lt;img&gt;的src属性修改，用更高分辨率的版本进行替换。 解析：参考 什么情况下，用translate()而不用绝对定位？什么时候，情况相反。translate()是transform的一个值。改变transform或opacity不会触发浏览器重新布局（reflow）或重绘（repaint），只会触发复合（compositions）。而改变绝对定位会触发重新布局，进而触发重绘和复合。transform使浏览器为元素创建一个 GPU 图层，但改变绝对定位会使用到 CPU。 因此translate()更高效，可以缩短平滑动画的绘制时间。 当使用translate()时，元素仍然占据其原始空间（有点像position：relative），这与改变绝对定位不同。 解析：参考、参考、参考、参考 文本超出部分显示省略号单行 123overflow: hidden;text-overflow: ellipsis;white-space: nowrap; 多行 1234display: -webkit-box;-webkit-box-orient: vertical;-webkit-line-clamp: 3; // 最多显示几行overflow: hidden; 过渡与动画的区别是什么transition 可以在一定的时间内实现元素的状态过渡为最终状态，用于模拟以一种过渡动画效果，但是功能有限，只能用于制作简单的动画效果而动画属性 animation 可以制作类似 Flash 动画，通过关键帧控制动画的每一步，控制更为精确，从而可以制作更为复杂的动画。 css有哪些选择器？ id选择器 类选择器 标签选择器 123456又可以细分为：派生选择器（包括后代选择器、子元素选择器、相邻兄弟选择器）伪元素选择器属性选择器群组选择器通配符选择器 css优先级定义？一般而言，选择器越特殊指向越准确，优先级越高； 计算方法： 标签选择器优先级为1 类选择器优先级为10 id选择器优先级为100 行内样式优先级为1000 ！important 无限大； 附：css选择器执行效率与兼容性详列：http://www.cnblogs.com/xiaowuzi/p/3726835.html 超链接访问过后hover样式就不出现？如何解决？改变css属性的排列顺序（LVHA）link visited hover active css hack的原理？由于不同的浏览器和浏览器各版本对css的支持及解析结果不一样，以及css优先级对浏览器展现效果的影响，我们可以据此针对不同浏览器情景来应用不同的css。 css hack的分类？​ css hack有三种表现形式，css属性前缀法、选择器前缀法以及ie条件注释法（即头部引用if ie）。实际项目中css hack大部分是针对ie浏览器不同版本之间的表现差异而引入的。 属性前缀法： 例：ie6能识别下划线“_”和星号“”，ie7能识别星号“”（以上版本并不支持），但不能识别下划线“_”，ie6~ie10都认识“\\9”，但是其他浏览器不能支持（也就是说可以利用这个特性恶心一下还在使用老版本的用户，哈哈）（“\\9”测试网址http://www.jb51.net/css/24944.html）*选择器前缀法（选择器hack）** 例：ie6能识别*html .class{},ie7能识别+html .class{} 或者:first-child+html .class{};*ie条件注释法：** 针对所有ie（ie10+已经不再支持条件注释）：，针对ie6及以下版本：.这类hack不仅针对css生效，对写在判断语句里面的所有代码都会生效。 css hack书写顺序： 一般将适用范围广，能识别能力强的css定义在前面。因为写在后面代码如果被识别会覆盖前面识别的。 （hack参考大全：http://blog.csdn.net/freshlover/article/details/12132801）","categories":[{"name":"前端知识点","slug":"前端知识点","permalink":"http://www.bluedream.top/categories/前端知识点/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://www.bluedream.top/tags/CSS/"},{"name":"选择器","slug":"选择器","permalink":"http://www.bluedream.top/tags/选择器/"},{"name":"盒子模型","slug":"盒子模型","permalink":"http://www.bluedream.top/tags/盒子模型/"},{"name":"样式表","slug":"样式表","permalink":"http://www.bluedream.top/tags/样式表/"},{"name":"CSS精灵","slug":"CSS精灵","permalink":"http://www.bluedream.top/tags/CSS精灵/"}]},{"title":"HTML","slug":"HTML","date":"2019-09-06T03:11:11.000Z","updated":"2019-09-25T13:55:04.236Z","comments":true,"path":"前端知识点/HTML.html","link":"","permalink":"http://www.bluedream.top/前端知识点/HTML.html","excerpt":"","text":"常考问题怎么让一个不定宽高的 DIV，垂直水平居中？1.使用 CSS方法： 父盒子设置： 123display：table-cell；text-align：center；vertical-align：middle； Div 设置： 12display：inline-block；vertical-align：middle； 2.使用 CSS3transform： 父盒子设置： 1display：relative Div 设置： 1234transform：translate(-50%，-50%)；position：absolute；top：50%；left：50%； position几个属性的作用？position的常见四个属性值： relative，absolute，fixed，static。 一般都要配合”left”、”top”、”right”以及 “bottom” 属性使用： 1.Static： 默认位置，设置为 static 的元素，它始终会处于页面流给予的位置（static 元素会忽略任何 top、bottom、left 或 right 声明）。一般不常用。 2.Relative： 位置被设置为 relative 的元素，可将其移至相对于其正常位置的地方，意思就是如果设置了 relative 值，那么，它偏移的 top，right，bottom，left 的值都以它原来的位置为基准偏移，而不管其他元素会怎么样。注意 relative 移动后的元素在原来的位置仍占据空间。 3.Absolute： 位置设置为 absolute 的元素，可定位于相对于包含它的元素的指定坐标。意思就是如果它的父容器设置了 position 属性，并且 position 的属性值为 absolute 或者 relative，那么就会依据父容器进行偏移。如果其父容器没有设置 position 属性，那么偏移是以 body 为依据。注意设置 absolute 属性的元素在标准流中不占位置。 4.Fixed： 位置被设置为 fixed 的元素，可定位于相对于浏览器窗口的指定坐标。不论窗口滚动与否，元素都会留在那个位置。它始终是以 body 为依据的。 注意设置 fixed 属性的元素在标准流中不占位置。 px，em，rem的区别？ 1.px 像素（Pixel）。绝对单位。 像素 px 是相对于显示器屏幕分辨率而言的，是一个虚拟长度单位，是计算机系统的数字化图像长度单位，如果 px 要换算成物理长度，需要指定精度 DPI。 2.em 是相对长度单位，相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。它会继承父级元素的字体大小，因此并不是一个固定的值。 3.rem是CSS3新增的一个相对单位（rootem，根 em），使用 rem 为元素设定字体大小时，仍然是相对大小，但相对于HTML 根元素。 4.区别：IE 无法调整那些使用 px 作为单位的字体大小，而 em 和 rem 可以缩放，rem 相对的只是 HTML 根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了 IE8 及更早版本外，所有浏览器均已支持 rem。 什么是BFC？1.定义： BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box 参与， 它规定了内部的Block-level Box 如何布局，并且与这个区域外部毫不相干。 2.布局规则： A. 内部的 Box 会在垂直方向，一个接一个地放置。 B. Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box的margin 会发生重叠。 C. 每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。 D. BFC 的区域不会与 float box 重叠。 E. BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。 F. 计算 BFC 的高度时，浮动元素也参与计算。 3.哪些元素会生成 BFC： A. 根元素 B. float 属性不为 none C. position 为 absolute 或 fixed D. display 为 inline-block， table-cell，table-caption， flex， inline-flex F. overflow 不为visible 表格自动换行怎么实现？word-break：normal 使用浏览器默认的换行规则； break-all允许单词内换行； keep-all只能在半角空格或连字符处换行 word-wrap：normal 是用浏览器默认的换行规则；break-word 在长单词或 URL 地址内部进行换行。 box-sizing、transition、translate分别是什么？ Box-sizing： 用来指定盒模型的大小的计算方式。主要分为boreder-box（从边框固定盒子大小）、content-box（从内容固定盒子大小）两种计算方式。 transition： 当前元素只要有“属性”发生变化时，可以平滑的进行过渡。通过 transtion-propety 设置过渡属性； transtion-duration 设置过渡时间； trantion-timing-function 设置过渡速度； trantion-delay 设置过渡延时 translate：通过移动改变元素的位置；有 x、y、z 三个属性 选择器优先级是怎样的？！important&gt;行内样式&gt;id 选择器&gt;类选择器&gt;标签选择器&gt;通配符&gt;继承 权重算法： （0，0，0，0）==》第一个 0 对应的是 important 的个数，第二个 0 对应的是 id 选择器的个数，第三个 0 对应的类选择器的个数，第四个 0 对应的是标签选择器的个数，就是当前选择器的权重。 比较： 先从第一个 0 开始比较，如果第一个 0 大，那么说明这个选择器的权重高，如果第一个相同，比较第二个，依次类推 Iframe的作用？ 用法： Iframe是用来在网页中插入第三方页面，早期的页面使用 iframe 主要是用于导航栏这种很多页面都相同的部分，这样可以在切换页面的时候避免重复下载。 优点： 便于修改，模块分离，像一些信息管理系统会用到。 iframe 能够原封不动的把嵌入的网页展现出来。 用来加载速度较慢的第三方内容如图标和广告 可以使脚本可以并行下载，可以实现跨子域通信 如果有多个网页引用 iframe，那么你只需要修改 iframe 的内容，就可以实现调用的每一个页面内容的更改，方便快捷。 网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用 iframe 来嵌套，可以增加代码的可重用。 缺点： iframe 的创建比一般的 DOM 元素慢了 1-2 个数量级 会产生很多页面，不容易管理，iframe 页面会增加服务器的 http 请求 搜索引擎的检索程序（爬虫）无法解读这种页面，不利于 SEO；替代方案一般就是动态语言的 Incude 机制和 ajax 动态填充内容等。 框架结构中出现各种滚动条 使用框架结构时，保证设置正确的导航链接。 iframe 会阻塞主页面的 Onload （加载）事件，如果页面的onload 事件不能及时触发，会让用户觉得网页加载很慢，用户体验不好； 本上不推荐使用，如果需要使用iframe，在 Safari 和 Chrome 中可以通过javascript动态给iframe添加src属性值来避免阻塞。 iframe 和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。 HTML 与 XHTM有什么区别，你觉得应该使用哪一个并说出理由。区别： HTML是一种基本的 WEB 网页设计语言，XHTML 是一个基于 XML 的置标语言。 应该使用XHTML，因为XHTML是XML重写了HTML的规范，比HTML更加严格，表现如下： 1、XHTML中所有的标记都必须有一个相应的结束标签；XHTML文档必须拥有根元素。 2、XHTML所有标签的元素和属性的名字都必须使用小写； 3、所有的XML标记都必须合理嵌套； 4、所有的属性都必须用引号“”括起来； 5、把所有&lt;和&amp;特殊符号用编码表示； 6、给所有属性附一个值； 7、不要在注释内容中使用“–”； 8、图片必须使用说明文字。 display：none；与 visibility： hidden 的区别是什么？display：none；使用该属性后，HTML 元素（对象）的宽度、高度等各种属性值都将“丢失”； visibility：hidden； 使用该属性后，HTML 元素（对象）仅仅是在视觉上看不见（完全透明），而它所占据的空间位置仍然存在，也即是说它仍具有高度、宽度等属性值。 语义化 HTML标签的语义化是指：通过使用包含语义的标签（如h1-h6）恰当地表示文档结构。 就是让浏览器更好的读懂你写的代码，在进行 HTML 结构、表现、行为设计时，尽量使用语义化的标签，使程序代码简介明了，易于进行Web 操作和网站 SEO，方便团队协作的一种标准，以图实现一种“无障碍”的 Web 开发。 css命名的语义化是指：为html标签添加有意义的class 为什么需要语义化： 去掉样式后页面呈现清晰的结构 盲人使用读屏器更好地阅读 搜索引擎更好地理解页面，有利于收录 便团队项目的可持续运作及维护 简述一下你对 HTML 语义化的理解？①用正确的标签做正确的事情。 ②html 语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析；即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的; ③ 搜索引擎的爬虫也依赖于 HTML 标记来确定上下文和各个关键字的权重，利于 SEO; ④ 使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。 Doctype作用？标准模式与兼容模式各有什么区别? DOCTYPE 是一种标准通用标记语言的文档类型声明，位于位于HTML文档中的第一行，处于 &lt;html&gt; 标签之前。 它的目的是要告诉浏览器的标准通用标记语言解析器，它应该按照何种规范（HTML 或 XHTML 规范）或使用什么样的文档类型定义（DTD）来解析文档。（如果你的页面没有 DOCTYPE 的声明，那么 compatMode 默认就是 BackCompat,浏览器按照自己的方式解析渲染页面） 只有确定了一个正确的文档类型，超文本标记语言或可扩展超文本标记语言中的标签和层叠样式表才能生效，甚至对 javascript 脚本都会有所影响。 DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。 标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作 声明是用来指示web浏览器关于页面使用哪个HTML版本进行编写的指令。 浏览器本身分为两种模式，一种是标准模式，一种是怪异模式，浏览器通过 doctype 来区分这两种模式，doctype 在 html 中的作用就是触发浏览器的标准模式，如果 html 中省略了 doctype，浏览器就会进入到 Quirks 模式的怪异状态，在这种模式下，有些样式会和标准模式存在差异，而 html 标准和 dom 标准值规定了标准模式下的行为，没有对怪异模式做出规定，因此不同浏览器在怪异模式下的处理也是不同的，所以一定要在 html 开头使用 doctype。 HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？ HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行） 而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型 其中，SGML 是标准通用标记语言,简单的说，就是比 HTML,XML 更老的标准，这两者都是由 SGML 发展而来的。BUT，HTML5 不是的。 &lt;!DOCTYPE&gt;声明位于位于 HTML 文档中的第一行，处于 &lt;html&gt; 标签之前。作用：告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE 不存在或格式不正确 行内元素首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素 一个行内元素只占据它对应标签的边框所包含的空间一般情况下，行内元素只能包含数据和其他行内元素 常用：a b span img input select strong（强调的语气） 1234big, i, small, ttabbr, acronym, cite, code, dfn, em, kbd, samp, varbdo, br, map, object, q, script, sub, supbutton, label, textarea 块级元素占据一整行，高度、行高、内边距和外边距都可以改变，可以容纳块级标签和其他行内标签 常用：div ul ol li dl dt dd h1 h2 h3 h4…p 1header,form,table,article,hr,aside,figure,canvas,video,audio,footer 空(void)元素有那些？常见的空元素:&lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt; 页面导入样式时，使用link和@import有什么区别？ link属于XHTML标签，除了加载CSS外，还能用于定义RSS,定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS 页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载 import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题 HTML5 的 form 如何关闭自动完成功能？答案：将不想要自动完成的 form 或 input 设置为 autocomplete=off 解析：MDN 请描述一下 cookies，sessionStorage 和 localStorage 的区别？ cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密） cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递 sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存 存储大小： cookie数据大小不能超过4k sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大 有期时间： localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据 sessionStorage 数据在当前浏览器窗口关闭后自动删除 cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭 html5有哪些新特性、移除了那些元素？ HTML5 现在已经不是 SGML的子集，主要是关于图像，位置，存储，多任务等功能的增加 新增功能 用于媒介回放的 video 和 audio 元素; 本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失; sessionStorage 的数据在浏览器关闭后自动删除; 语意化更好的内容元素，比如 article、footer、header、nav、section、aside; 表单控件，calendar、date、time、email、url、search 新的技术webworker, websocket, Geolocation 拖拽释放(Drag and drop) API 地理(Geolocation) API 画布(Canvas) API; 移除的元素： 纯表现的元素：basefont，big，center，font, s，strike，tt，u; 对可用性产生负面影响的元素：frame，frameset，noframes 如何处理HTML5新标签的浏览器兼容问题？支持 HTML5 新标签： IE8/IE7/IE6 支持通过 document.createElement 方法产生的标签，可以利用这一特性让这些浏览器支持 HTML5 新标签，浏览器支持新标签后，还需要添加标签默认的样式： 当然最好的方式是直接使用成熟的框架、使用最多的是 html5shim 框架 12345&lt;!--[if lt IE 9]&gt; &lt;script&gt; src = \"http://html5shim.googlecode.com/svn/trunk/html5.js\"; &lt;/script&gt;&lt;![endif]--&gt; 如何区分 HTML 和HTML5？DOCTYPE声明\\新增的结构元素\\功能元素 HTML5的离线储存怎么使用，工作原理能不能解释一下？ 用户在线时，保存更新用户机器上的缓存文件；当用户离线时，可以正常访离线储存问站点或应用内容 在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。 如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储 离线的情况下，浏览器就直接使用离线存储的资源 原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示 HTML5的离线储存使用： 在文档的 html 标签设置 manifest 属性，如 manifest=”/offline.appcache” 1234&lt;!DOCTYPE html&gt;&lt;html manifest=\"cache.manifest\"&gt; ...&lt;/html&gt; 在项目中新建 manifest 文件，manifest 文件的命名建议：xxx.appcache 在 web 服务器配置正确的 MIME-type，即 text/cache-manifest 如何使用： 页面头部像下面一样加入一个manifest的属性； 在cache.manifest文件的编写离线存储的资源 在离线状态时，操作window.applicationCache进行需求实现 123456789CACHE MANIFEST #v0.11 CACHE: js/app.js css/style.css NETWORK: resourse/logo.png FALLBACK: / /offline.html 代码说明： 离线存储的 manifest 一般由三个部分组成: CACHE:表示需要离线存储的资源列表，由于包含 manifest 文件的页面将被自动离线存储，所以不需要把页面自身也列出来。 NETWORK:表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些资源。不过，如果在 CACHE 和 NETWORK 中有一个相同的资源，那么这个资源还是会被离线存储，也就是说 CACHE 的优先级更高。 FALLBACK:表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问 offline.html。 参考 HTML5的form如何关闭自动完成功能？给不想要提示的 form 或某个 input 设置为 autocomplete=off。 如何实现浏览器内多个标签页之间的通信？（阿里） WebSocket SharedWorker(Web Worker API) 也可以调用localstorge、cookies等本地存储方式，storage 事件(localStorge API) iframe + contentWindow postMessage Label 的作用是什么？是怎么用的？label 标签来定义表单控制间的关系，当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。 解析：两种用法：一种是 id 绑定，一种是嵌套 12345使用方法1： `&lt;label for=\"mobile\"&gt;Number:&lt;/label&gt;` `&lt;input type=\"text\" id=\"mobile\"/&gt;`使用方法2： `&lt;label&gt;Date:&lt;input type=\"text\"/&gt;&lt;/label&gt;` webSocket如何兼容低浏览器？(阿里) Adobe Flash Socket 、 ActiveX HTMLFile (IE) 、 基于 multipart 编码发送 XHR 、 基于长轮询的 XHR 如何处理HTML5新标签的浏览器兼容问题？ 通过 document.createElement 创建新标签 使用垫片 html5shiv.js 页面大量图片，如何优化加载，优化用户体验图片懒加载，在页面上的未可视区域可以添加一个滚动条事件，判断图片位置与浏览器顶端的距离与页面的距离，如果前者小于后者，优先加载。 如果为幻灯片、相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优先下载。 如果图片为 css 图片，可以使用 CSSsprite，SVGsprite，Iconfont、Base64 等技术。 如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩的特别厉害的缩略图，以提高用户体验。 如果图片展示区域小于图片的真实大小，则因在服务器端根据业务需要先行进行图片压缩，图片压缩后大小与展示一致。 HTML5 存储类型有什么区别？答案：Media API、Text Track API、Application Cache API、User Interaction、Data Transfer API、Command API、Constraint Validation API、History API HTML5 引入什么新的表单属性？Datalist datetime output keygen date month week time number range emailurl 简单问题标签上title 与 alt 属性的区别是什么? Alt 当图片不显示时，用文字代表。Title为该属性提供信息。 改变元素的外边距用什么属性？改变元素的内填充用什么属性？改变元素的外边距用 margin，改变元素的内填充用 padding。 在新窗口打开链接的方法是？ target：_blank。 合理的页面布局中常听过结构与表现分离，那么结构是什么？表现是什么？结构是 html，表现是 css。 新的 HTML5 文档类型和字符集是？12HTML5文档类型：&lt;!doctype html&gt;HTML5使用的编码&lt;meta charset=”UTF-8”&gt; 不常考问题请谈一下你对网页标准和标准制定机构重要性的理解。答案：降低开发难度及开发成本，减少各种 BUG、安全问题， 提高网站易用性 对 web 标准、可用性、可访问性的理解可用性（Usability）：产品是否容易上手，用户能否完成任务，效率如何，以及这过程中用户的主观感受可好，是从用户的角度来看产品的质量。可用性好意味着产品质量高，是企业的核心竞争力。 可访问性（Accessibility）：Web 内容对于残障用户的可阅读和可理解性 可维护性（Maintainability）：一般包含两个层次，一是当系统出现问题时，快速定位并解决问题的成本，成本低则可维护性好。二是代码是否容易被人理解，是否容易修改和增强功能。 前端页面有哪三层构成，分别是什么？作用是什么？答案：分成：结构层、表示层、行为层。 结构层（structural layer） 由 HTML 或 XHTML 之类的标记语言负责创建。标签，也就是那些出现在尖括号里的单词，对网页内容的语义含义做出了描述，但这些标签不包含任何关于如何显示有关内容的信息。例如，P 标签表达了这样一种语义：“这是一个文本段。” 表示层（presentation layer） 由 CSS 负责创建。 CSS 对“如何显示有关内容”的问题做出了回答。 行为层（behaviorlayer） 负责回答“内容应该如何对事件做出反应”这一问题。这是 Javascript 语言和 DOM 主宰的领域。 对于 WEB 标准以及 W3C 的理解与认识问题web 标准简单来说可以分为结构、表现和行为。其中结构主要是有 HTML 标签组成。或许通俗点说，在页面 body 里面我们写入的标签都是为了页面的结构。表现即指 css 样式表，通过 css 可以是页面的结构标签更具美感。行为是指页面和用户具有一定的交互，同时页面结构或者表现发生变化，主要是有 js 组成。 web 标准一般是将该三部分独立分开，使其更具有模块化。但一般产生行为时，就会有结构或者表现的变化，也使这三者的界限并不那么清晰。 答案：标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链 css 和 js 脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性。 W3C 对 web 标准提出了规范化的要求，也就是在实际编程中的一些代码规范：包含如下几点 1.对于结构要求：（标签规范可以提高搜索引擎对页面的抓取效率，对 SEO 很有帮助） 1）标签字母要小写 2）标签要闭合 3）标签不允许随意嵌套 2.对于 css 和 js 来说 1）尽量使用外链 css 样式表和 js 脚本。是结构、表现和行为分为三块，符合规范。同时提高页面渲染速度，提高用户的体验。 2）样式尽量少用行间样式表，使结构与表现分离，标签的 id 和 class 等属性命名要做到见文知义，标签越少，加载越快，用户体验提高，代码维护简单，便于改版 3）不需要变动页面内容，便可提供打印版本而不需要复制内容，提高网站易用性。 介绍一下你对浏览器内核的理解？ 主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎 渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核 JS引擎则：解析和执行javascript来实现网页的动态效果 最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎 常见的浏览器内核有哪些？ Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等国产浏览器。[又称MSHTML] Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等 Presto内核：Opera7及以上。 [Opera内核原为：Presto，现为：Blink;] Webkit内核：Safari,Chrome等。 [ Chrome的Blink（WebKit的分支）] Blink内核：新版 Chrome、新版 Opera 页面可见性（Page Visibility API） 可以有哪些用途？ 通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等; 在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放 实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果1&lt;div style=&quot;height:1px;overflow:hidden;background:red&quot;&gt;&lt;/div&gt; 网页验证码是干嘛的，是为了解决什么安全问题 区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水 有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试 title与h1的区别、b与strong的区别、i与em的区别？ title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响 strong是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：会重读，而是展示强调内容 i内容展示为斜体，em表示强调的文本 页面导入样式时，使用 link 和 @import 有什么区别？ link 属于HTML标签，除了加载CSS外，还能用于定 RSS等；@import 只能用于加载CSS 页面加载的时，link 会同时被加载，而 @import 引用的 CSS 会等到页面被加载完再加载 @import 只在 IE5 以上才能被识别，而 link 是HTML标签，无兼容问题 HTML5有哪些新特性？ 新增选择器 document.querySelector、document.querySelectorAll 拖拽释放(Drag and drop) API 媒体播放的 video 和 audio 本地存储 localStorage 和 sessionStorage 离线应用 manifest 桌面通知 Notifications 语意化标签 article、footer、header、nav、section 增强表单控件 calendar、date、time、email、url、search 地理位置 Geolocation 多任务 webworker 全双工通信协议 websocket 历史管理 history 跨域资源共享(CORS) Access-Control-Allow-Origin 页面可见性改变事件 visibilitychange 跨窗口通信 PostMessage Form Data 对象 绘画 canvas HTML5移除了那些元素？ 纯表现的元素：basefont、big、center、font、s、strike、tt、u 对可用性产生负面影响的元素：frame、frameset、noframes webSocket 如何兼容低浏览器？ Adobe Flash Socket ActiveX HTMLFile (IE) 基于 multipart 编码发送 XHR 基于长轮询的 XHR 页面可见性（Page Visibility API） 可以有哪些用途？ 在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放 当用户浏览其他页面，暂停网站首页幻灯自动播放 完成登陆后，无刷新自动同步其他页面的登录状态 标签 自然样式标签：b, i, u, s, pre 语义样式标签：strong, em, ins, del, code 应该准确使用语义样式标签, 但不能滥用。如果不能确定时，首选使用自然样式标签 title 与 h1 的区别title 表示是整个页面标题，h1 则表示层次明确的标题，对页面信息的抓取有很大的影响 ①title用于网站信息标题，突出网站标题或关键字，一个网站可以有多个title，seo权重高于H1；H1概括的是文章主题，一个页面最好只用一个H1，seo权重低于title。 解析： A.从网站角度而言，title则重于网站信息标题，突出网站标题或关键字用title，一篇文章，一个页面最好只 用一个H1，H1用得太多，会稀释主题；一个网站可以有多个title，最好一个单页用一个title以便突出网站页面 主题信息。 B.从文章角度而言，H1则概括的是文章主题，突出文章主题，用H1，面对的用户，要突出其视觉效果。 C.从SEO角度而言，title的权重高于H1，其适用性要比H1广。 b 与 strong 的区别strong 标明重点内容，有语气加强的含义，使用阅读设备阅读网络时，strong 会重读，而 b 是展示强调内容 ②b为了加粗而加粗，strong为了标明重点而加粗 解析： A.b这个标签对应 bold，即文本加粗，其目的仅仅是为了加粗显示文本，是一种样式／风格需求； B.strong这个标签意思是加强字符的语气，表示该文本比较重要，提醒读者／终端注意。为了达到这个目的，浏览器等终端将其加粗显示； i 与 em 的区别？i 内容展示为斜体，em 表示强调的文本 ③ 同②i为了斜体而斜体，em为了标明重点而斜体，且对于搜索引擎来说strong和em比b和i要重视的多 其他描述一下cookie、sessionStorage和localStorage的区别？sessionStorage用于本地存储一个session中的数据，这些数据只有在同一个会话页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。web storage（包含sessionStorage和localStorage）和cookie的区别：web storage的概念与cookie相似，区别是它是为了更大容量存储设计的。cookie的大小是受限的，并且每次发送请求新页面的时候cookie都会被发送过去，这样无形当中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。web storage拥有setItem，getItem，romoveItem，clear等方法，cookie需要开发者自己封装setCookie，getCookie。Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在，而web storage仅仅是为了本地“存储”数据而生。 简述一下 src 与 href 的区别答案：src 用于引用资源，替换当前元素；href 用于在当前文档和引用资源之间确立联系。 解析： href href 标识超文本引用，用在 link 和 a 等元素上，href 是引用和页面关联，是在当前元素和引用资源之间建立联系若在文档中添加 href ，浏览器会识别该文档为 CSS 文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用 link 方式加载 CSS，而不是使用 @import 方式。 src src 表示引用资源，替换当前元素，用在 img，script，iframe 上，src 是页面内容不可缺少的一部分。当浏览器解析到 src ，会暂停其他资源的下载和处理（图片不会暂停其他资源下载和处理），直到将该资源加载、编译、执行完毕，图片和框架等也如此，类似于将所指向资源应用到当前内容。这也是为什么建议把 js 脚本放在底部而不是头部的原因。 参考 src与href的区别src（source）指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档中，如js脚本，img图片和iframe等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，类似于将所指向资源嵌入当前标签内。href（hypertext reference/超文本引用）指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也就是为什么建议使用link方式加载css而不是使用@import方式。 css引入方式1.link2.@import “style.css”;/@import url(“style.css”) (官方定义 import规则一定要先于除了@charset的其他任何css规则)不建议使用@import的理由： 1.影响浏览器的并行下载 2.多个@import导致下载顺序紊乱 详解为什么要避免使用@import​ 如果使用css @import，这样会导致css无法并行下载，在使用@import引用的文件只有在引用它的那个css文件被下载、解析之后，浏览器才会知道还有另外一个css需要下载，这时才会去下载，然后下载后开始解析、构建渲染树（render tree）等一系列操作，因此css @import 引起的css解析延迟会加长页面留白期。所以，要尽量避免使用css @import而尽量采用link标签的方式引入。 link和@import的详细区别？1、link属于XHTML标签，除了加载css，还能用于定义RSS，定义rel链接属性等作用；而@import是CSS提供的，只能用于加载CSS。2、页面被加载时，link会并行加载，而@import引用的CSS会等到页面被加载完再加载（详细如上。）3、import是CSS2.1提出的，只在IE5以上才被识别，而linkXHTML标签无兼容问题； css、js的性能优化，从用户刷新网页开始，一次js请求一般情况下哪些地方会有缓存处理？dns缓存，cdn缓存，浏览器缓存，服务器缓存。（附：缓存介绍）DNS（Domain Name System/域名解析系统）：短时间内多次访问某个网址，系统会设计一个本地“dns缓存”，当第一次访问chenxixunhan.com，dns返回了正确的ip后，系统就会将这个结果临时存储起来，这就是dns缓存。它会有一个失效时间，在这时间内，当再次访问时，系统会从电脑本地的dns缓存中把结果交还给你，而不必再去询问dns服务器，变相“加速”了网址的解析。CDN（Content Delivery Network/内容分发网络）通过在不同地点缓存内容，然后通过负载平衡等技术将用户请求定向到最近的缓存服务器上获取内容，提高用户访问网站的响应速度。浏览器缓存为了节约网络的资源加速浏览，浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以从本地磁盘显示文档，这样就可以加速页面的阅览。web服务器缓存Web缓存服务器的应用模式主要是正向代理和反向代理。正向代理(Proxy)模式是代理网络用户访问internet，客户端将本来要直接发送到internet上源服务器的连接请求发送给代理服务器处理。正向代理的目的是加速用户在使用浏览器访问Internet时的请求响应时间，并提高广域网线路的利用率。正向代理浏览器无需和该站点建立联系，只访问到Web缓存即可。通过正向代理，大大提高了后续用户的访问速度，使他们无需再穿越Internet，只要从本地Web缓存就可以获取所需要的信息，避免了带宽问题，同时可以大量减少重复请求在网络上的传输，从而降低网络流量，节省资费。反向代理(Reverse Proxy)模式是针对Web服务器加速功能的，在该模式中，缓存服务器放置在web应用服务器的前面，当用户访问web应用服务器的时候，首先经过缓存服务器，并将用户的请求和应用服务器应答的内容写入缓存服务器中，从而为后续用户的访问提供更快的响应。 页面大量图片，如何优化加载，优化用户体验？1、图片懒加载。在页面的未可视区域添加一个滚动事件，判断图片位置与浏览器顶端的距离与页面的距离，如果前者小于后者，优先加载。2、如果为幻灯片、相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优先下载。3、如果图片为css图片，可以使用CSSsprite，SVGsprite等技术。4、如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩的特别厉害的缩略图，以提高用户体验。5、如果图片展示区域小于图片的真实大小，应在服务器端根据业务需要先进行图片压缩，图片压缩后大小与展示一致。 以前端的角度出发做好SEO(Search Engine Optimization/搜索引擎优化)需要考虑什么？1、了解搜索引擎如何抓取网页和如何索引网页。2、meta标签优化包括主题（title），网站描述（description），和关键字（keywords）。还有其它的隐藏文字如author（作者），category（目录），language（编码语种）等。（拓展：meta？（元信息/meta-information））meta元素可提供有关页面的元信息，如针对搜索引擎和更新频度的描述。位于文档头部，一种辅助性的标签（详细：https://zhidao.baidu.com/question/2052283721385566387.html） 1234567891011123、如何选取关键词并在网页中放置关键词 搜索就得用关键词。关键词分析和选择是SEO最重要的工作之一。首先给网站确定关键词（一般在5个上下），然后针对这些关键字进行优化，包括关键词密度（Density），相关度（Relavacy），突出性（Prominency）等等。4、了解主要的搜索引擎 对网站流量主要起决定作用的几个。 英文：Google，Yahoo，Bing等； 中文：百度，搜狗，有道等。 不同的搜索引擎对页面的抓取和索引、排序的规则都不一样。各搜索门户和搜索引擎的关系。5、主要的互联网目录。6、按点击付费的搜索引擎7、搜索引擎登录8、链接交换和链接广泛度9、合理的标签使用（详细链接http://www.jb51.net/css/238279.html 第十六点） html5的新特性？处理html5标签的浏览器兼容问题？htm5现在已经不是SGML的子集，主要关于图像、位置、存储，多任务等功能的增加；1.绘画canvas；2.用于媒介回放的video和audio3.本地离线存储localStorage长期存储数据，浏览器关闭后数据不丢失。4.sessionStorage的数据在浏览器关闭后自动删除；5.语义化更好的内容元素，如article、footer、header、nav、section6.表单控件，calendar、date、time、email、url、search；7.新的计数webworker（多线程），websocket（双向通信），geolocation（地理定位）；（新的理解） 123456兼容性： 1.ie6~ie8支持通过document.createElement方法产生的标签,利用这一特性让这些浏览支持html5新标签，并需要添加默认样式。 2. 使用成熟的框架如：html5shiv； &lt;!--[if lt IE 9]&gt; &lt;script&gt; src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"&lt;/script&gt; &lt;![endif]--&gt; 从输入url到网页最终展现到用户面前，中间发生了什么？1、输入地址2、浏览器查找域名的ip地址（包括dns查找：浏览器缓存-&gt;系统缓存-&gt;路由器缓存）dns查找过程如下：1、浏览器缓存——浏览器会缓存dns记录一段时间，但是操作系统不会告诉浏览器存储dns的记录事件，所以不同浏览器会自固定一个时间（2~30分钟）；2、系统缓存——如果在浏览器缓存里没有找到需要的记录，浏览器会做一个系统调用，以便获得系统缓存中的记录；3、路由器缓存——接着，请求发向路由器，它一般会有自己的dns缓存；4、ISP（网络服务提供商）DNS缓存——接下来检查ISP缓存DNS的服务器。这里一般能找到相应的缓存记录。5、递归搜索——ISP的DNS服务器从根域名服务器开始进行递归搜索，从com顶级域名服务器到example的域名服务器。3、浏览器给web服务器发送一个HTTP请求请求中可能包含存储该域名的cookies，也会存储登录用户名和密码以及一些用户设置等。4、HTTP（超文本传输协议）请求的建立建立TCP（传输控制协议）链接：在HTTP工作开始之前，web浏览器首先要通过网络与web服务器建立连接，该连接通过TCP来完成的，该协议与IP协议共同构建Internet，即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。HTTP是比TCP更高层的应用层协议。根据规则只有低层协议建立之后，才能进行更高层协议的连接。因此，首先要建立TCP链接，一般TCP链接的端口号是80。在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。第一次握手：主机A发送位码syn=1，随机产生seq（sequence序列号） number=1234567的数据包到服务器，主机B由syn=1知道，A要求建立联机；第二次握手：主机B收到请求后确认联机信息，向A发送ack（Acknowledgement 确认信息） number=(主机A的seq+1)，syn=1，ack=1.随机产生seq=7654321的包；第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码syn是否为1，若正确，主机A会再发送ack number=（主机B的seq+1），ack=1；主机B收到后确认seq值与ack=1则链接建立成功。完成三次握手，主机A与主机B开始传送数据。一旦建立了TCP连接，web浏览器就会向web服务器发送请求命令。浏览器发送其求命令之后，还要以头信息的形式向web服务器发送一些别的信息，之后浏览器发送一空白行来通知服务器，它已经结束了该头信息的发送。5、服务器的永久重定向响应服务器给浏览器响应一个301永久重定向响应，这样浏览器就会访问“http://www.chenxixunhan.com/”而非”http://chenxixunhan.com/“。为什么要重定向而不直接发回用户想看到的网页内容？其中一个原因跟搜索引擎排名相关。如果一个页面有两个地址，就像“http://www.chenxixunhan.com/”和”http://chenxixunhan.com/“，搜索引擎会认为他们是两个网站，结果造成每一个的搜索链接都减少从而降低排名。而搜索引擎知道301永久重定向，会把访问带www的和不带www的地址归到同一个网站排名下。还有一个原因是用不同的地址会造成缓存友好性变差。当一个页面有好几个名字时，它可能会在缓存里出现好几次。HTTP/1.1 301 Moved PermanentlyCache-Control: private, no-store, no-cache, must-revalidate, post-check=0,pre-check=0Expires: Sat, 01 Jan 2000 00:00:00 GMTLocation: HTTP://www.facebook.com/P3P: CP=”DSP LAW”Pragma: no-cacheSet-Cookie: made_write_conn=deleted; expires=Thu, 12-Feb-2009 05:09:50 GMT;path=/; domain=.facebook.com; httponlyContent-Type: text/html; charset=utf-8X-Cnection: closeDate: Fri, 12 Feb 2010 05:09:51 GMTContent-Length: 06、浏览器跟踪重定向地址现在，浏览器知道了“http://www.chenxixunhan.com/”才是要访问的正确地址，所以它会发送另一个获取请求也就是GET HTTP://www.facebook.com/ HTTP/1.1Accept: application/x-ms-application, image/jpeg, application/xaml+xml, […]Accept-Language: en-USUser-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; […]Accept-Encoding: gzip, deflateConnection: Keep-AliveCookie: lsd=XW[…]; c_user=21[…]; x-referer=[…]Host: www.facebook.com头信息以之前请求中的意义相同；7、服务器“处理”请求服务器接收到获取请求，然后处理返回一个响应。8、服务器发回一个HTML响应HTTP/1.1 200 OKCache-Control: private, no-store, no-cache, must-revalidate, post-check=0,pre-check=0Expires: Sat, 01 Jan 2000 00:00:00 GMTP3P: CP=”DSP LAW”Pragma: no-cacheContent-Encoding: gzipContent-Type: text/html; charset=utf-8X-Cnection: closeTransfer-Encoding: chunkedDate: Fri, 12 Feb 2010 09:05:55 GMT 2b3Tn@[…]整个响应大小为35kB，其中大部分在整理后以blob（二进制）类型传输。内容编码头告诉浏览器整个响应体用gzip算法进行压缩。解压blob块后，你可以看到html文档。关于压缩，头信息说明了是否缓存这个页面，如果缓存的话如何去做，有什么cookies要去设置（前面响应没有这点）和隐私信息等等。注意：报头中把Content-type设置为“text/html”。报头让浏览器将该响应内容以HTML形式呈现，而不是以文件格式下载它。浏览器会根据报头信息决定如何解释该响应，不过同时也会考虑像URL扩展内容等其他因素。9、浏览器开始显示HTML在浏览器没有完整接受全部HTML文档时，它就开始显示这个页面了。10、浏览器发送获取嵌入在HTML中的对象在浏览器显示HTML时，它会注意到需要获取其它地址内容的标签。这时，浏览器会发送一个获取请求来重新获得这些文件。下面几个是一个叫雷锋的作者访问facebook.com时需要重获取的几个URL* 图片HTTP://static.ak.fbcdn.net/rsrc.php/z12E0/hash/8q2anwu7.gifHTTP://static.ak.fbcdn.net/rsrc.php/zBS5C/hash/7hwy7at6.gif…* CSS 式样表HTTP://static.ak.fbcdn.net/rsrc.php/z448Z/hash/2plh8s4n.cssHTTP://static.ak.fbcdn.net/rsrc.php/zANE1/hash/cvtutcee.css…* JavaScript 文件HTTP://static.ak.fbcdn.net/rsrc.php/zEMOA/hash/c8yzb6ub.jsHTTP://static.ak.fbcdn.net/rsrc.php/z6R9L/hash/cq2lgbs8.js ​ 这些地址都要经历一个和HTML读取类似的过程。所以浏览器会在DNS查找这些域名，发送请求，重定向等等。​ 但不像动态页面那样，静态文件会允许浏览器对其进行缓存。有的文件可能不需要与服务器通讯，而从缓存中直接读取。服务器的相应中包含了静态文件保存的期限信息，所以浏览器知道要把它们缓存多长时间。还有，每个响应度可能包含像版本号一样的ETag（电子标签）头（被请求变量的实体值），如果浏览器观察到文件的版本ETag信息已经存在，就马上停止这个文件的传输。11、浏览器发送异步（Ajax）请求​ 在web2.0伟大精神的指引下（。。。骚货），页面显示完成后客户仍与服务器端保持着联系。​ 以Facebook聊天功能为例，它会持续与服务器保持联系来及时更新你那写亮亮灰灰的好友状态。​ 为了更新这些头像亮着的好友状态，在浏览器中执行的javascript代码服务器发送异步请求。这个异步请求发送给特定的地址，它是一个按照程式构造的获取或发送请求。​ facebook聊天功能提供了关于ajax一个有意思的问题案例：把数据从服务器端推送到客户端，因为HTTP是一个请求-响应协议，所以聊天服务器不能把新消息发给客户。取而代之的是客户端不得不隔几秒就轮询下服务器端看自己有没有新消息。​ 这些情况发生时长轮询是个减轻服务器负载挺有趣的技术。如果当被轮询时服务器没有新消息，它就不理这个客户端。而当尚未超时的情况下收到了该客户的新消息，服务器就会找到未完成的请求，把新消息作为响应返回给客户端。​ （我擦，你可真是个磨人的小妖精，真尼玛能搞，源自：http://www.qdfuns.com/notes/15102/a5bee6b87d22ab0ecb28101f385db2e4.html） ​ （拓展：请求url响应返回状态代码及其文本描述？（详情：D:\\notes_web_book\\HTTP协议详解.pdf））​ 状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值：​ 1xx：指示信息–表示请求已接收，继续处理​ 2xx：成功–表示请求已被成功接收、理解、接受​ 3xx：重定向–要完成请求必须进行更进一步的操作​ 4xx：客户端错误–请求有语法错误或请求无法实现​ 5xx：服务器端错误–服务器未能实现合法的请求 ​ 常见状态代码、状态描述说明：​ 200 OK //客户端请求成功​ 400 Bad Request //客户端请求有语法错误，不能被服务器所理解​ 401 Unauthorized //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用​ 403 Forbidden //服务器收到请求，但是拒绝提供服务​ 404 Not Found //请求资源不存在，eg：输入了错误的 URL​ 500 Internal Server Error //服务器发生不可预期的错误​ 503 Server Unavailable //服务器当前不能处理客户端的请求，一段时间后，可能恢复正常​ eg：HTTP/1.1 200 OK 请描述下 SEO 中的 TDK？答案：在 SEO 中，所谓的 TDK 其实就是 title、description、keywords 这三个标签，title 标题标签，description 描述标签，keywords 关键词标签 严格模式与混杂模式严格模式：以浏览器支持的最高标准运行 混杂模式：页面以宽松向下兼容的方式显示，模拟老式浏览器的行为 列举 IE 与其他浏览器不一样的特性？a. IE 的排版引擎是 Trident （又称为 MSHTML） b. Trident 内核曾经几乎与 W3C 标准脱节（2005 年） c. Trident 内核的大量 Bug 等安全性问题没有得到及时解决 d. JS 方面，有很多独立的方法，例如绑定事件的 attachEvent、创建事件的 createEventObject 等 e. CSS 方面，也有自己独有的处理方式，例如设置透明，低版本 IE 中使用滤镜的方式 为什么用多个域名存储网站资源更有效？1、CDN 缓存更方便 2、突破浏览器并发限制 3、节约 cookie 带宽 4、节约主域名的连接数，优化页面响应速度 5、防止不必要的安全问题 页面可见性（Page Visibility）API 可以有哪些用途？页面可见性： 就是对于用户来说，页面是显示还是隐藏, 所谓显示的页面，就是我们正在看的页面；隐藏的页面，就是我们没有看的页面。 因为，我们一次可以打开好多标签页面来回切换着，始终只有一个页面在我们眼前，其他页面就是隐藏的，还有一种就是………，(把浏览器最小化，所有的页面就都不可见了)。 API 很简单，document.hidden 就返回一个布尔值，如果是 true, 表示页面可见，false 则表示，页面隐藏。 不同页面之间来回切换，触发 visibilitychange 事件。 还有一个 document.visibilityState, 表示页面所处的状态，取值：visible, hidden 等四个。 1234567document.addEventListener(\"visibilitychange\", function() &#123; if (document.hidden) &#123; document.title = \"hidden\"; &#125; else &#123; document.title = \"visibile\"; &#125;&#125;); 我们打开这个页面，然后再打开另一个页面，来回点击这两个页面，当我们看到这个页面时，标题显示 visiable ,当我们看另一个页面时，标题显示 hidden; 动画，视频，音频都可以在页面显示时打开，在页面隐藏时关闭 解析：参考 Quirks(怪癖）模式是什么？它和 Standards（标准）模式有什么区别1 以 ie6 为例，如果写了 DTD，就意味着这个页面将采用对 CSS 支持更好的布局，而如果没有，则采用兼容之前的布局方式。这就是 Quirks 模式（怪癖模式，诡异模式，怪异模式）。 2 区别：总体会有布局、样式解析和脚本执行三个方面的区别。 设置一个元素的宽度和高度 给&lt;span&gt;等行内元素设置 width 和 height 用 margin:0 auto 设置水平居中 从 IE6 开始，引入了 Standards 模式，标准模式中，浏览器尝试给符合标准的文档在规范上的正确处理达到在指定浏览器中的程度。 在 IE6 之前 CSS 还不够成熟，所以 IE5 等之前的浏览器对 CSS 的支持很差， IE6 将对 CSS 提供更好的支持，然而这时的问题就来了，因为有很多页面是基于旧的布局方式写的，而如果 IE6 支持 CSS 则将令这些页面显示不正常，如何在即保证不破坏现有页面，又提供新的渲染机制呢？ 在写程序时我们也会经常遇到这样的问题，如何保证原来的接口不变，又提供更强大的功能，尤其是新功能不兼容旧功能时。遇到这种问题时的一个常见做法是增加参数和分支，即当某个参数为真时，我们就使用新功能，而如果这个参数 不为真时，就使用旧功能，这样就能不破坏原有的程序，又提供新功能。IE6 也是类似这样做的，它将 DTD（文档类型定义）当成了这个“参数”，因为以前的页面大家都不会去写 DTD，所以 IE6 就假定 如果写了 DTD，就意味着这个页面将采用对 CSS 支持更好的布局，而如果没有，则采用兼容之前的布局方式。这就是 Quirks 模式（怪癖模式，诡异模式，怪异模式）。 区别： 总体会有布局、样式解析和脚本执行三个方面的区别。 盒模型：在 W3C 标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在 Quirks 模式下，IE 的宽度和高度还包含了 padding 和 border。 设置行内元素的高宽：在 Standards 模式下，给&lt;span&gt;等行内元素设置 wdith 和 height 都不会生效，而在 quirks 模式下，则会生效。 设置百分比的高度：在 standards 模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置百分比的高度，子元素设置一个百分比的高度是无效的 用 margin:0 auto 设置水平居中：使用 margin:0 auto 在 standards 模式下可以使元素水平居中，但在 quirks 模式下却会失效。 （还有很多，答出什么不重要，关键是看他答出的这些是不是自己经验遇到的，还是说都是看文章看的，甚至完全不知道。） div+css 的布局较 table 布局有什么优点？答案：分离 方便改版 快清晰简洁 seo 1.改版的时候更方便 只要改 css 文件。 2.页面加载速度更快、结构化清晰、页面显示简洁。 3.表现与结构相分离。 4.易于优化（seo）搜索引擎更友好，排名更容易靠前。 你能描述一下渐进增强和优雅降级之间的不同吗?渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。 （一开始保证最基本的功能，再改进和追加功能） 优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。 （一开始就构建完整的功能，再针对低版本浏览器进行兼容。） 区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。 知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？答案：微格式（Microformats）是一种让机器可读的语义化 XHTML 词汇的集合，是结构化数据的开放标准。是为特殊应用而制定的特殊格式。 优点：将智能数据添加到网页上，让网站内容在搜索引擎结果界面可以显示额外的提示。（应用范例：豆瓣，有兴趣自行 google） webSocket 如何兼容低版本浏览器？答案：对于低端不支持 websocket 的浏览器，一般有几个解决方案 使用轮询或长连接的方式实现伪 websocket 的通信 使用 flash 或其他方法实现一个 websocket 客户端 ： 参考参考 如何在页面上实现一个圆形的可点击区域？答案：css3、js、map 加 area 一.border-radius (css3) 对于圆形，最直接的方法想到的就是 css3 的圆角属性，这个属性可以将 html 元素的形状设置为圆形，这之后你想对该圆形区域设置什么事件就设置什么事件(当然包括点击)。（这里就不做具体的 test 了） 二.纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等 通过事件坐标来实现（js），也就是通过 js 来进行一个区域判断，进而简介地的形成可点区域，以下给出主要的 js 测试代码： 1234567891011121314151617181920212223242526272829303132// 获取目标元素var box = document.getElementById(\"box\");// 对目标元素target的圆形区域进行一个点击事件绑定function bindClickOnCircleArea(target, callback) &#123; target.onclick = function(e) &#123; e = e || window.event; // target中心点的坐标 var x1 = 100; var y1 = 100; // 事件源坐标 var x2 = e.offsetX; var y2 = e.offsetY; // 校验是否在圆形点击区，在的话就执行callback回调 // 计算事件触发点与target中心的位置 var len = Math.abs(Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))); // 通过半径进行校验 if (len &lt;= 100) &#123; callback(); &#125; else &#123; alert(\"死鬼，跑哪去啊，你老婆我是黄皮肤还是白皮肤都分不清了吗\"); &#125; &#125;;&#125;// 执行bindClickOnCircleArea(box, function() &#123; alert(\"老婆，你让我好找啊，呜呜呜\");&#125;); 三.通过 map 加 area或者svg 123456789&lt;img src=\"../imgs/test.jpg\" width=\"200\" border=\"0\" usemap=\"#Map\" /&gt;&lt;map name=\"Map\" id=\"Map\"&gt; &lt;area shape=\"circle\" coords=\"100,100,100\" href=\"http://www.baidu.com\" target=\"_blank\" /&gt;&lt;/map&gt; 参考 前端需要注意哪些 SEO 合理的 title、description、keywords：搜索对着三项的权重逐个减小，title 值强调重点即可，重要关键词出现不要超过 2 次，而且要靠前，不同页面 title 要有所不同；description 把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面 description 有所不同；keywords 列举出重要关键词即可 语义化的 HTML 代码，符合 W3C 规范：语义化代码让搜索引擎容易理解网页 重要内容 HTML 代码放在最前：搜索引擎抓取 HTML 顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取 重要内容不要用 js 输出：爬虫不会执行 js 获取内容 少用 iframe：搜索引擎不会抓取 iframe 中的内容 非装饰性图片必须加 alt 提高网站速度：网站速度是搜索引擎排序的一个重要指标 解析：参考 HTML 全局属性(global attribute)有哪些 accesskey:设置快捷键，提供快速访问元素如aaa在 windows 下的 firefox 中按 alt + shift + a 可激活元素 class:为元素设置类标识，多个类名用空格分开，CSS 和 javascript 可通过 class 属性获取元素 contenteditable: 指定元素内容是否可编辑 contextmenu: 自定义鼠标右键弹出菜单内容 data-*: 为元素增加自定义属性 dir: 设置元素文本方向 draggable: 设置元素是否可拖拽 dropzone: 设置元素拖放类型： copy, move, link hidden: 表示一个元素是否与文档。样式上会导致元素不显示，但是不能用这个属性实现样式效果 id: 元素 id，文档内唯一 lang: 元素内容的的语言 spellcheck: 是否启动拼写和语法检查 style: 行内 css 样式 tabindex: 设置元素可以获得焦点，通过 tab 可以导航 title: 元素相关的建议信息 translate: 元素和子孙节点内容是否需要本地化 解析：参考 meta viewport 原理是什么？答案：meta viewport 标签的作用是让当前 viewport 的宽度等于设备的宽度，同时不允许用户进行手动缩放 viewportde 原理：移动端浏览器通常都会在一个比移动端屏幕更宽的虚拟窗口中渲染页面，这个虚拟窗口就是 viewport; 目的是正常展示没有做移动端适配的网页，让他们完整的展示给用户； 解析：Viewport ：字面意思为视图窗口，在移动 web 开发中使用。表示将设备浏览器宽度虚拟成一个特定的值（或计算得出），这样利于移动 web 站点跨设备显示效果基本一致。移动版的 Safari 浏览器最新引进了 viewport 这个 meta tag，让网页开发者来控制 viewport 的大小和缩放，其他手机浏览器也基本支持。 在移动端浏览器当中，存在着两种视口，一种是可见视口（也就是我们说的设备大小），另一种是视窗视口（网页的宽度是多少）。举个例子：如果我们的屏幕是 320 像素 * 480 像素的大小（iPhone4），假设在浏览器中，320 像素的屏幕宽度能够展示 980 像素宽度的内容。那么 320 像素的宽度就是可见视口的宽度，而能够显示的 980 像素的宽度就是视窗视口的宽度。 为了显示更多的内容，大多数的浏览器会把自己的视窗视口扩大，简易的理解，就是让原本 320 像素的屏幕宽度能够容下 980 像素甚至更宽的内容（将网页等比例缩小）。 Viewport 属性值 width 设置 layout viewport 的宽度，为一个正整数，或字符串”width-device” initial-scale 设置页面的初始缩放值，为一个数字，可以带小数 minimum-scale 允许用户的最小缩放值，为一个数字，可以带小数 maximum-scale 允许用户的最大缩放值，为一个数字，可以带小数 height 设置 layout viewport 的高度，这个属性对我们并不重要，很少使用 user-scalable 是否允许用户进行缩放，值为”no”或”yes”, no 代表不允许，yes 代表允许这些属性可以同时使用，也可以单独使用或混合使用，多个属性同时使用时用逗号隔开就行了。 Canvas描述：Canvas 元素用于在网页上绘制图形，该元素标签强大之处在于可以直接在 HTML 上进行图形操作。 通过 Javascript 来绘制 2D 图形。 是逐像素进行渲染的。 在 canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。 SVG描述： 一种使用 XML 描述的 2D 图形的语言SVG 基于 XML 意味着，SVG DOM 中的每个元素都是可用的，可以为某个元素附加 Javascript 事件处理器。在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。 Canvas 和 SVG 有什么区别？Canvas 和 SVG 都允许您在浏览器中创建图形，但是它们在根本上是不同的。 Canvas 依赖分辨率 不支持事件处理器 弱的文本渲染能力 能够以 .png 或 .jpg 格式保存结果图像 最适合图像密集型的游戏，其中的许多对象会被频繁重绘 SVG 不依赖分辨率 支持事件处理器 最适合带有大型渲染区域的应用程序（比如谷歌地图） 复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快） 不适合游戏应用 为什么最好把 CSS 的&lt;link&gt;标签放在&lt;head&gt;&lt;/head&gt;之间？把&lt;link&gt;标签放在&lt;head&gt;&lt;/head&gt;之间是规范要求的内容。此外，这种做法可以让页面逐步呈现，提高了用户体验。将样式表放在文档底部附近，会使许多浏览器（包括 Internet Explorer）不能逐步呈现页面。一些浏览器会阻止渲染，以避免在页面样式发生变化时，重新绘制页面中的元素。这种做法可以防止呈现给用户空白的页面或没有样式的内容。 为什么最好把 JS 的&lt;script&gt;标签恰好放在&lt;/body&gt;之前，有例外情况吗？脚本在下载和执行期间会阻止 HTML 解析。把&lt;script&gt;标签放在底部，保证 HTML 首先完成解析，将页面尽早呈现给用户。 例外情况是当你的脚本里包含document.write()时。但是现在，document.write()不推荐使用。同时，将&lt;script&gt;标签放在底部，意味着浏览器不能开始下载脚本，直到整个文档（document）被解析。也许，对此比较好的做法是，&lt;script&gt;使用defer属性，放在&lt;head&gt;中。","categories":[{"name":"前端知识点","slug":"前端知识点","permalink":"http://www.bluedream.top/categories/前端知识点/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://www.bluedream.top/tags/HTML/"},{"name":"Web","slug":"Web","permalink":"http://www.bluedream.top/tags/Web/"},{"name":"标签","slug":"标签","permalink":"http://www.bluedream.top/tags/标签/"},{"name":"浏览器","slug":"浏览器","permalink":"http://www.bluedream.top/tags/浏览器/"}]},{"title":"JavaScript类、对象和继承","slug":"JavaScript类、对象和继承","date":"2019-09-05T13:10:40.000Z","updated":"2019-09-20T01:34:49.217Z","comments":true,"path":"前端知识点/JavaScript类、对象和继承.html","link":"","permalink":"http://www.bluedream.top/前端知识点/JavaScript类、对象和继承.html","excerpt":"","text":"类的定义、实例化JavaScript如何实现一个类，怎么实例化这个类？ 构造函数法（this + prototype） – 用 new 关键字 生成实例对象缺点：用到了 this 和 prototype，编写复杂，可读性差 123456789function Mobile(name, price)&#123; this.name = name;//通过this，表明这是一个构造函数 this.price = price; &#125; Mobile.prototype.sell = function()&#123; alert(this.name + \"，售价 $\" + this.price); &#125; var iPhone7 = new Mobile(\"iPhone7\", 1000); iPhone7.sell(); Object.create 法 – 用 Object.create() 生成实例对象缺点：不能实现私有属性和私有方法，实例对象之间也不能共享数据 1234567891011121314151617181920var Person = &#123; firstname: \"Mark\", lastname: \"Yun\", age: 25, introduce: function()&#123; alert('I am ' + Person.firstname + ' ' + Person.lastname); &#125;&#125;;var person = Object.create(Person);person.introduce();// Object.create 要求 IE9+，低版本浏览器可以自行部署：if (!Object.create) &#123; Object.create = function (o) &#123; function F() &#123;&#125; F.prototype = o; return new F(); &#125;; &#125; 极简主义法（消除 this 和 prototype） – 调用 createNew() 得到实例对象优点：容易理解，结构清晰优雅，符合传统的”面向对象编程”的构造 12345678910111213141516171819var Cat = &#123; age: 3, // 共享数据 -- 定义在类对象内，createNew() 外 createNew: function () &#123; var cat = &#123;&#125;; // var cat = Animal.createNew(); // 继承 Animal 类 cat.name = \"小咪\"; var sound = \"喵喵喵\"; // 私有属性--定义在 createNew() 内，输出对象外 cat.makeSound = function () &#123; alert(sound); // 暴露私有属性 &#125;; cat.changeAge = function(num)&#123; Cat.age = num; // 修改共享数据 &#125;; return cat; // 输出对象 &#125;&#125;;var cat = Cat.createNew();cat.makeSound(); ES6 语法糖 class – 用 new 关键字 生成实例对象类的实例化很简单，直接 new 出来即可。函数可以作为构造函数来使用，通过 new 来实例化，其实函数本身也是一个对象。 1234567891011 class Point &#123; constructor(x, y) &#123; this.x = x;//可以在构造函数里写属性 this.y = y; &#125; toString() &#123; return '(' + this.x + ', ' + this.y + ')'; &#125; &#125;var point = new Point(2, 3); 对象什么是面向对象？面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。 面向对象和面向过程的异同 面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。 面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。 面向对象的三大特性 封装 继承 多态 谈谈This对象的理解 this总是指向函数的直接调用者（而非间接调用者） 如果有new关键字，this指向new出来的那个对象 在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent（触发事件）中的this总是指向全局对象Window 原型的constructor属性问题：已知A继承了B，B继承了C。怎么判断 a 是由A直接生成的实例，还是B直接生成的实例呢？还是C直接生成的实例呢？ 分析：这就要用到原型的constructor属性了。 foo.__proto__.constructor === M的结果为true，但是 foo.__proto__.constructor === Object的结果为false。 所以，用 consturctor判断就比用 instanceof判断，更为严谨。 new 操作符具体干了什么呢?12function Test()&#123;&#125;const test = new Test() 创建一个新的空对象实例。 1const obj = &#123;&#125; 设置新对象的 constructor 属性为构造函数的名称，设置新对象的proto属性指向构造函数的 prototype 对象（设置原型链） 12obj.constructor = Testobj.__proto__ = Test.prototype 使用新对象调用函数，函数中的 this 被指向新实例对象（执行构造函数，传入相应的参数，如果没有参数就不用传；让 Func 中的 this 指向 obj，并执行 Func 的函数体） 1Test.call(obj) 将初始化完毕的新对象地址，保存到等号左边的变量中。判断 Func 的返回值类型： 如果无返回值或者返回一个非对象值，则就将步骤（1）创建的对象返回；如果返回值是一个新对象的话那么直接直接返回该对象。 new操作符具体干了什么呢? 创建一个空实例对象，并且 this 变量引用该对象，同时还继承了该函数的原型 属性和方法被加入到 this 引用的对象中 新创建的对象由 this 所引用，并且最后隐式的返回 this call() 和 apply() 的含义和区别？含义： call：调用一个对象的一个方法，用另一个对象替换当前对象。 例如：B.call(A, args1,args2);即 A 对象调用 B 对象的方法。 apply：调用一个对象的一个方法，用另一个对象替换当前对象。 例如：B.apply(A, arguments);即 A 对象应用 B 对象的方法。 相同点： 方法的含义是一样的，即方法功能是一样的； 第一个参数的作用是一样的； 不同点：两者传入的列表形式不一样 call 可以传入多个参数； apply 只能传入两个参数，所以其第二个参数往往是作为数组形式传入 javascript 的本地对象，内置对象和宿主对象 本地对象ECMA-262 把本地对象（native object）定义为“独立于宿主环境的 ECMAScript 实现提供的对象”。简单来说，本地对象就是 ECMA-262 定义的类（引用类型）。它们包括：Object、Function、Array、String、Boolean、Number、Date、RegExp、Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError、URIError 内置对象JS中内置了17个对象，常用的是Array对象、Date对象、正则表达式对象、string对象、Global对象 宿主对象由ECMAScript实现的宿主环境提供的对象，可以理解为：浏览器提供的对象。所有的BOM和DOM都是宿主对象。 如何判断一个对象是否属于某个类？instanceof 123if (a instanceof Person) &#123; alert(\"yes\");&#125; 对象的几种创建方式 javascript创建对象简单的说,无非就是用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能混合使用 第一种：内置对象Object 创建1234567var wcDog =new Object(); wcDog.name=&quot;旺财&quot;; wcDog.age=3; wcDog.work=function()&#123; alert(&quot;我是&quot;+wcDog.name+&quot;,汪汪汪......&quot;); &#125; wcDog.work(); 123var Person = new Object();Person.name = \"Nike\";Person.age = 29; 这行代码创建了 Object 引用类型的一个新实例，然后把实例保存在变量 Person 中。 第二种：使用对象字面量表示法12345var Person = &#123;&#125;; //相当于 var Person = new Object();var Person = &#123; name: 'Nike'; age: 29;&#125; 对象字面量是对象定义的一种简写形式，目的在于简化创建包含大量属性的对象的过程。也就是说，第一种和第二种方式创建对象的方法其实都是一样的，只是写法上的区别不同 在介绍第三种的创建方法之前，我们应该要明白为什么还要用别的方法来创建对象，也就是第一种，第二种方法的缺点所在：它们都是用了同一个接口创建很多对象，会产生大量的重复代码，就是如果你有 100 个对象，那你要输入 100 次很多相同的代码。那我们有什么方法来避免过多的重复代码呢，就是把创建对象的过程封装在函数体内，通过函数的调用直接生成对象。 第三种：使用工厂模式创建对象123456789101112function createPerson(name, age, job) &#123; var o = new Object(); o.name = name; o.age = age; o.job = job; o.sayName = function() &#123; alert(this.name); &#125;; return o;&#125;var person1 = createPerson(\"Nike\", 29, \"teacher\");var person2 = createPerson(\"Arvin\", 20, \"student\"); 在使用工厂模式创建对象的时候，我们都可以注意到，在 createPerson 函数中，返回的是一个对象。那么我们就无法判断返回的对象究竟是一个什么样的类型。于是就出现了第四种创建对象的模式。 第四种:使用构造函数创建对象12345678910function Person(name, age, job) &#123; this.name = name; this.age = age; this.job = job; this.sayName = function() &#123; alert(this.name); &#125;;&#125;var person1 = new Person(\"Nike\", 29, \"teacher\");var person2 = new Person(\"Arvin\", 20, \"student\"); 对比工厂模式，我们可以发现以下区别： 1.没有显示地创建对象 2.直接将属性和方法赋给了 this 对象 3.没有 return 语句 4.终于可以识别的对象的类型。对于检测对象类型，我们应该使用 instanceof 操作符，我们来进行自主检测： 1234567alert(person1 instanceof Object); //turealert(person1 instanceof Person); //turealert(person2 instanceof Object); //turealert(person2 instanceof Object); //ture 同时我们也应该明白，按照惯例，构造函数始终要应该以一个大写字母开头，而非构造函数则应该以一个小写字母开头。 那么构造函数确实挺好用的，但是它也有它的缺点： 就是每个方法都要在每个实例上重新创建一遍，方法指的就是我们在对象里面定义的函数。如果方法的数量很多，就会占用很多不必要的内存。于是出现了第五种创建对象的方法 第五种：原型创建对象模式1234567function Dog()&#123;&#125;Dog.prototype.name=&quot;旺财&quot;;Dog.prototype.eat=function()&#123; alert(this.name+&quot;是个吃货&quot;);&#125;var wangcai =new Dog();wangcai.eat(); 123456789function Person() &#123;&#125;Person.prototype.name = \"Nike\";Person.prototype.age = 20;Person.prototype.jbo = \"teacher\";Person.prototype.sayName = function() &#123; alert(this.name);&#125;;var person1 = new Person();person1.sayName(); 使用原型创建对象的方式，可以让所有对象实例共享它所包含的属性和方法。 如果是使用原型创建对象模式，请看下面代码： 123456789101112function Person() &#123;&#125;Person.prototype.name = \"Nike\";Person.prototype.age = 20;Person.prototype.jbo = \"teacher\";Person.prototype.sayName = function() &#123; alert(this.name);&#125;;var person1 = new Person();var person2 = new Person();person1.name = \"Greg\";alert(person1.name); //'Greg' --来自实例alert(person2.name); //'Nike' --来自原型 当为对象实例添加一个属性时，这个属性就会屏蔽原型对象中保存的同名属性。 这时候我们就可以使用构造函数模式与原型模式结合的方式，构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性 第六种：组合使用构造函数模式和原型模式123456789101112function Person(name, age, job) &#123; this.name = name; this.age = age; this.job = job;&#125;Person.prototype = &#123; constructor: Person, sayName: function() &#123; alert(this.name); &#125;;&#125;var person1 = new Person('Nike', 20, 'teacher'); 123456789function Car(name,price)&#123; this.name=name; this.price=price; &#125; Car.prototype.sell=function()&#123; alert(&quot;我是&quot;+this.name+&quot;，我现在卖&quot;+this.price+&quot;万元&quot;); &#125; var camry =new Car(&quot;凯美瑞&quot;,27); camry.sell(); 用function来模拟无参的构造函数 123456789 function Person()&#123;&#125; //定义一个function，如果使用new&quot;实例化&quot;,该function可以看作是一个Class var person=new Person(); person.name=&quot;Mark&quot;; person.age=&quot;25&quot;; person.work=function()&#123; alert(person.name+&quot; hello...&quot;); &#125;person.work(); 用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性） 12345678910function Pet(name,age,hobby)&#123; this.name=name;//this作用域：当前对象 this.age=age; this.hobby=hobby; this.eat=function()&#123; alert(&quot;我叫&quot;+this.name+&quot;,我喜欢&quot;+this.hobby+&quot;,是个程序员&quot;); &#125; &#125; var maidou =new Pet(&quot;麦兜&quot;,25,&quot;coding&quot;);//实例化、创建对象 maidou.eat();//调用eat方法 继承 继承的本质就是原型链。（这些问题必问的，其实就是考察你对原型链的掌握程度。） Javascript如何实现继承？ 构造函数绑定：使用 call 或 apply 方法，将父对象的构造函数绑定在子对象上 12345function Cat(name,color)&#123; Animal.apply(this, arguments); this.name = name; this.color = color;&#125; 实例继承：将子对象的 prototype 指向父对象的一个实例 12Cat.prototype = new Animal();Cat.prototype.constructor = Cat; 拷贝继承：如果把父对象的所有属性和方法，拷贝进子对象 12345678function extend(Child, Parent) &#123; var p = Parent.prototype; var c = Child.prototype; for (var i in p) &#123; c[i] = p[i]; &#125; c.uber = p; &#125; 原型继承：将子对象的 prototype 指向父对象的 prototype 1234567function extend(Child, Parent) &#123; var F = function()&#123;&#125;; F.prototype = Parent.prototype; Child.prototype = new F(); Child.prototype.constructor = Child; Child.uber = Parent.prototype;&#125; ES6 语法糖 extends：class ColorPoint extends Point {} 123456789class ColorPoint extends Point &#123; constructor(x, y, color) &#123; super(x, y); // 调用父类的constructor(x, y) this.color = color; &#125; toString() &#123; return this.color + ' ' + super.toString(); // 调用父类的toString() &#125;&#125; 原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式 12345678910111213function Parent()&#123; this.name = &apos;wang&apos;; &#125; function Child()&#123; this.age = 28; &#125; Child.prototype = new Parent();//继承了Parent，通过原型 var demo = new Child(); alert(demo.age); alert(demo.name);//得到被继承的属性 &#125; JavaScript 继承方式和优缺点原型链继承1234567891011121314151617function Parent () &#123; this.name = 'kevin';&#125;Parent.prototype.getName = function () &#123; console.log(this.name);&#125;function Child () &#123;&#125;Child.prototype = new Parent();var child1 = new Child();console.log(child1.getName()) // kevin 缺点： 1.引用类型的属性被所有实例共享，举个例子： 12345678910111213141516171819function Parent () &#123; this.names = ['kevin', 'daisy'];&#125;function Child () &#123;&#125;Child.prototype = new Parent();var child1 = new Child();child1.names.push('yayu');console.log(child1.names); // [\"kevin\", \"daisy\", \"yayu\"]var child2 = new Child();console.log(child2.names); // [\"kevin\", \"daisy\", \"yayu\"] 2.在创建 Child 的实例时，不能向Parent传参 3.字面量重写原型会中断关系，使用引用类型的原型 借用构造函数(经典继承)1234567891011121314151617function Parent () &#123; this.names = ['kevin', 'daisy'];&#125;function Child () &#123; Parent.call(this);&#125;var child1 = new Child();child1.names.push('yayu');console.log(child1.names); // [\"kevin\", \"daisy\", \"yayu\"]var child2 = new Child();console.log(child2.names); // [\"kevin\", \"daisy\"] 优点： 1.避免了引用类型的属性被所有实例共享 2.可以在 Child 中向 Parent 传参 举个例子： 123456789101112131415function Parent (name) &#123; this.name = name;&#125;function Child (name) &#123; Parent.call(this, name);&#125;var child1 = new Child('kevin');console.log(child1.name); // kevinvar child2 = new Child('daisy');console.log(child2.name); // daisy 缺点： 方法都在构造函数中定义，每次创建实例都会创建一遍方法。 没有原型，则复用无从谈起。 组合继承原型链继承和经典继承双剑合璧。 1234567891011121314151617181920212223242526272829303132function Parent (name) &#123; this.name = name; this.colors = ['red', 'blue', 'green'];&#125;Parent.prototype.getName = function () &#123; console.log(this.name)&#125;function Child (name, age) &#123; Parent.call(this, name); this.age = age;&#125;Child.prototype = new Parent();var child1 = new Child('kevin', '18');child1.colors.push('black');console.log(child1.name); // kevinconsole.log(child1.age); // 18console.log(child1.colors); // [\"red\", \"blue\", \"green\", \"black\"]var child2 = new Child('daisy', '20');console.log(child2.name); // daisyconsole.log(child2.age); // 20console.log(child2.colors); // [\"red\", \"blue\", \"green\"] 优点：融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。 其背后的思路是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，既通过在原型上定义方法实现了函数复用，又保证每个实例都有它自己的属性。 原型式继承12345function createObj(o) &#123; function F()&#123;&#125; F.prototype = o; return new F();&#125; 就是 ES5 Object.create 的模拟实现，将传入的对象作为创建的对象的原型。 缺点： 包含引用类型的属性值始终都会共享相应的值，这点跟原型链继承一样。 12345678910111213var person = &#123; name: 'kevin', friends: ['daisy', 'kelly']&#125;var person1 = createObj(person);var person2 = createObj(person);person1.name = 'person1';console.log(person2.name); // kevinperson1.firends.push('taylor');console.log(person2.friends); // [\"daisy\", \"kelly\", \"taylor\"] 注意：修改person1.name的值，person2.name的值并未发生改变，并不是因为person1和person2有独立的 name 值，而是因为person1.name = &#39;person1&#39;，给person1添加了 name 值，并非修改了原型上的 name 值。 寄生式继承创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象。 1234567function createObj (o) &#123; var clone = object.create(o); clone.sayName = function () &#123; console.log('hi'); &#125; return clone;&#125; 缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法。 寄生组合式继承为了方便大家阅读，在这里重复一下组合继承的代码： 12345678910111213141516171819function Parent (name) &#123; this.name = name; this.colors = ['red', 'blue', 'green'];&#125;Parent.prototype.getName = function () &#123; console.log(this.name)&#125;function Child (name, age) &#123; Parent.call(this, name); this.age = age;&#125;Child.prototype = new Parent();var child1 = new Child('kevin', '18');console.log(child1) 组合继承最大的缺点是会调用两次父构造函数。 一次是设置子类型实例的原型的时候： 1Child.prototype = new Parent(); 一次在创建子类型实例的时候： 1var child1 = new Child('kevin', '18'); 回想下 new 的模拟实现，其实在这句中，我们会执行： 1Parent.call(this, name); 在这里，我们又会调用了一次 Parent 构造函数。 所以，在这个例子中，如果我们打印 child1 对象，我们会发现 Child.prototype 和 child1 都有一个属性为colors，属性值为[&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;]。 那么我们该如何精益求精，避免这一次重复调用呢？ 如果我们不使用 Child.prototype = new Parent() ，而是间接的让 Child.prototype 访问到 Parent.prototype 呢？ 看看如何实现： 12345678910111213141516171819202122232425function Parent (name) &#123; this.name = name; this.colors = ['red', 'blue', 'green'];&#125;Parent.prototype.getName = function () &#123; console.log(this.name)&#125;function Child (name, age) &#123; Parent.call(this, name); this.age = age;&#125;// 关键的三步var F = function () &#123;&#125;;F.prototype = Parent.prototype;Child.prototype = new F();var child1 = new Child('kevin', '18');console.log(child1); 最后我们封装一下这个继承方法： 1234567891011121314function object(o) &#123; function F() &#123;&#125; F.prototype = o; return new F();&#125;function prototype(child, parent) &#123; var prototype = object(parent.prototype); prototype.constructor = child; child.prototype = prototype;&#125;// 当我们使用的时候：prototype(Child, Parent); 优点：引用《JavaScript高级程序设计》中对寄生组合式继承的夸赞就是： 1.这种方式的高效率体现它只调用了一次 Parent 构造函数，并且因此避免了在 Parent.prototype 上面创建不必要的、多余的属性。 2.与此同时，原型链还能保持不变； 3.因此，还能够正常使用 instanceof 和 isPrototypeOf。 开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。 如何避免原型链上面的对象共享避免对象共享可以参考经典的 extend()函数，很多前端框架都有封装的，就是用一个空函数当做中间变量","categories":[{"name":"前端知识点","slug":"前端知识点","permalink":"http://www.bluedream.top/categories/前端知识点/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.bluedream.top/tags/JavaScript/"},{"name":"面向对象","slug":"面向对象","permalink":"http://www.bluedream.top/tags/面向对象/"},{"name":"类","slug":"类","permalink":"http://www.bluedream.top/tags/类/"},{"name":"对象","slug":"对象","permalink":"http://www.bluedream.top/tags/对象/"},{"name":"继承","slug":"继承","permalink":"http://www.bluedream.top/tags/继承/"}]},{"title":"面试技巧","slug":"面试技巧","date":"2019-09-02T07:30:21.000Z","updated":"2019-09-28T09:45:22.556Z","comments":true,"path":"前端面试题/面试技巧.html","link":"","permalink":"http://www.bluedream.top/前端面试题/面试技巧.html","excerpt":"","text":"面试是一个非常重要的过程，有些人在这个过程中感到不知所措，或者做得不好，使自己在求职中因小失大，达不到成功。在求职过程中注意了以下基本礼仪和技巧，才能达到事半功倍，增强面试的有效性。 面试前准备（1）穿着得体，干净。 （2）对公司做简单的了解 （3）保证充足睡眠，保持自信 注意事项(1)一旦约好面试时间，一定要提前 5-10 分钟到达地点，以表示求职者的诚意，给对方以信任感。 (2)面试时不要紧张，保持微笑，如果门关着，应先敲门，得到允许后再进去。开关门动作要轻。 (3) 对于面试官的问题要一一回答，可以适当点头，不要打断用人单位的问话或抢问抢答。回答问题是眼睛要注视面试官，切记不要左顾右盼。 谈话技巧(1)自我介绍在三分钟之内，口齿清晰，语言流利，吐字清晰。 (2) 注意听者的反应。比如，听者心不在焉，可能表示他对自己这段话没有兴趣，你得设法转移话题；侧耳倾听，可能说明由于自己音量过小使对方难于听清；皱眉、摆头可能表示自己言语有不当之处。根据对方的这些反应，就要适时地调整自己的语言、语调、语气、音量、修辞，包括陈述内容。这样才能取得良好的面试效果。 (3) 表示关注的手势。在与他人交谈中，一定要对对方的谈话表示关注，要表示出你在聚精会神地听。对方在感到自己的谈话被人关注和理解后，才能愉快专心地听取你的谈话，并对你产生好感。 回答问题的技巧(1) 把握重点，简捷明了，条理清楚，有理有据。一般情况下回答问题要结论在先，议论在后，先将自己的中心意思表达清晰，然后再做叙述和论证。否则，长篇大论，会让人不得要领。面试时间有限，神经有些紧张，多余的话太多，容易走题，反倒会将主题冲淡或漏掉。 (2) 讲清原委，避免抽象。 用人单位提问总是想了解一些应试者的具体情况，切不可简单地仅以“是”和“否”作答。应针对所提问题的不同，有的需要解释原因，有的需要说明程度。不讲原委，过于抽象的回答，往往不会给主试者留下具体的印象。 (3) 确认提问内容，切忌答非所问。面试中，如果对用人单位提出的问题，一时摸不到边际，以致不知从何答起或难以理解对方问题的含义时，可将问题复述一遍，并先谈自己对这一问题的理解，请教对方以确认内容。对不太明确的问题，一定要搞清楚，这样才会有的放矢，不致答非所问。 (4) 有个人见解，有个人特色。用人单位有时接待应试者若干名，相同的问题问若干遍，类似的回答也要听若干遍。因此，用人单位会有乏味、枯燥之感。只有具有独到的个人见解和个人特色的回答，才会引起对方的兴趣和注意。 (5) 知之为知之，不知为不知。面试遇到自己不知、不懂、不会的问题时，回避闪烁，默不作声，牵强附会，不懂装懂的做法均不足取，诚恳坦率地承认自己的不足之处，反倒会赢得主试者的信任和好感。 总结：保持自信，做自我介绍时，时间应控制在三分钟之内，不要啰嗦，把自己取得过什么成就，或者在公司做过什么贡献，总结自己的优势时刻保持微笑。最后，紧张的同学，可以把面试官当做同事，面试是一个相互选择的过程，你找我我还不一定干呢。 请你自我介绍一下你自己回答提示：一般人回答这个问题过于平常，只说姓名、年龄、爱好、工作经验，这些在简历上都有，其实，企业最希望知道的是求职者能否胜任工作，包括：最强的技能、最深入研究的知识领域、个性中最积极的部分、做过的最成功的事，主要的成就等，这些都可以和学习无关，也可以和学习有关，但要突出积极的个性和做事的能力，说得合情合理企业才会相信。企业很重视一个人的礼貌，求职者要尊重考官，在回答每个问题之后都说一句“谢谢”。企业喜欢有礼貌的求职者。 回答样本： 1、我叫xxx,来自于xxx，从网上看得到公司招聘的这个职位，觉得非常适合自己的发展。所以来这里争取下这份工作。2、接下来可以讲解自己的核心竞争力（最强的技能、最深入研究的知识领域、个性中最积极的部分）和闪光点（做过的最成功的事，主要的成就）。核心就是要体现自己胜任这份工作（介绍时候要自然有底气，合情合理，面试前要充分准备好）。3、先介绍到这里，面试官看看有什么问题，我可以再补充。4、最后要说谢谢，任何企业都喜欢有礼貌的人！ 注意：自曝其短（说自己的缺点）没有必要，自我介绍的时候千万不要和简历有冲突！ 你觉得你个性上最大的优点是什么？回答提示：沉着冷静、条理清楚、立场坚定、顽强向上、乐于助人和关心他人、适应能力和幽默感、乐观和友爱、技术狂热、学习能力强、为人谦和。 说说你最大的缺点？回答提示：这个问题企业问的概率很大，通常不希望听到直接回答的缺点是什么等，如果求职者说自己小心眼、爱忌妒人、非常懒、脾气大、工作效率低，企业肯定不会录用你。绝对不要自作聪明地回答“我最大的缺点是过于追求完美”，有的人以为这样回答会显得自己比较出色，但事实上，他已经岌芨可危了。企业喜欢求职者从自己的优点说起，中间加一些小缺点，最后再把问题转回到优点上，突出优点的部分。企业喜欢聪明的求职者。 你对加班的看法？回答提示：实际上好多公司问这个问题，并不证明一定要加班。 只是想测试你是否愿意为公司奉献。回答样本：如果是工作需要我会义不容辞加班。我现在单身，没有任何家庭负担，可以全身心的投入工作。但同时，我也会提高工作效率，减少不必要的加班。 你对薪资的要求？回答提示：如果你对薪酬的要求太低，那显然贬低自己的能力；如果你对薪酬的要求太高，那又会显得你分量过重，公司受用不起。一些雇主通常都事先对求聘的职位定下开支预算，因而他们第一次提出的价钱往往是他们所能给予的最高价钱。他们问你只不过想证实一下这笔钱是否足以引起你对该工作的兴趣。 回答样本一：“我对工资没有硬性要求。我相信贵公司在处理我的问题上会友善合理。我注重的是找对工作机会，所以只要条件公平，我则不会计较太多 回答样本二：我受过系统的软件编程的训练，不需要进行大量的培训。而且我本人也对编程特别感兴趣。因此，我希望公司能根据我的情况和市场标准的水平，给我合理的薪水。 回答样本三：如果你必须自己说出具体数目，请不要说一个宽泛的范围，那样你将只能得到最低限度的数字。最好给出一个具体的数字，这样表明你已经对当今的人才市场作了调查，知道像自己这样学历的雇员有什么样的价值。 我们先来了解面试官如何评判应聘者的工资，知己知彼才能对症下药啊！ 一些正规的大公司主要是根据以下四个方面进行评判（重要性从上至下） 1、掌握的技术（通过笔试、项目经验、工作时间）2、表达3、学历4、其他素质（如英语四六级等） 面试官评判应聘者工资的重要性之所以采取如此的顺序，根本原因在于面试官最最重要的是程序员能不能把工作做好，让公司放心。所以学员技术很重要，表达也很重要（技术牛但不会表达，也会让人怀疑技术实力） 当 HR 问：你对薪资有什么要求？大家找工作，都希望找个高薪的，那我们如何和公司去谈薪酬呢？如果你对薪酬的要求太低，那显然贬低自己的能力；如果你对薪酬的要求太高，那又会显得你分量过重，公司受用不起。这个问题确实是个比较难于回答的问题，处理不好的话，会影响面试的效果，但又是不可避免的一个现实问题。 对于这个问题，第一首先要知道程序员等级、技能、工资的绑定情况，因为我们前端工程师主要是看技术。技术实力决定了我们的月薪；第二要打探出公司能给出的薪资范围。在这个范围内争取高薪资。 回答提示： 第一步是了解对方可以提供的薪酬幅度是多少，这里的关键是善于发问，让对方多讲，而自己了解足够的信息。当经过几轮面试后，面试官会问应聘者：你还有什么想了解的问题吗？应聘者就可问：像你们这样的大企业都有自己的一套薪酬体系，请问可以简单介绍一下吗？面试官一般就会简单介绍一下，如果介绍得不是太详细，还可以问：贵公司的薪酬水平在同行业中的位置是怎样的？除了工资之外还有哪些奖金、福利和培训机会？试用期后工资的加幅是多少？等问题。从对方的回答中，你再对照一下市场行情心里就有底了。 第二步是根据以上信息，提出自己的期望薪酬。如果对自己想提的薪资还是把握不准，那也可以把问题抛给对方：我想请教一个问题，以我现在的经历、学历和您对我面试的了解，在公司的薪酬体系中大约能达到怎么样的水平？对方就会透露给你准备开的工资水平。 迂回战术求高薪如果你对该公司开出的薪资标准不太满意，就可以尝试用探讨式、协商式的口气去争取高一些：比如我认为工作最重要的是合作开心，薪酬是其次的，不过我原来的月薪是××元，如果跳槽的话就希望自己能有点进步，如果不是让您太为难的话，您看这个工资是不是可以有一点提高？这时要看对方的口气是否可以松动，松动的话则可以再举出你值更高价的理由。 如果对方的口气坚决，则可以迂回争取试用期的缩短，比如说：我对自己是比较有自信的，您看能不能一步到位直接拿转正期的工资，或者把３个月的试用期缩短为１个月？额外工资多争取。 很多企业除了正式的工资以外，都会产生一些奖金、福利等额外工资，在这方面应聘者就要大胆争取了。应聘者要注意察言观色见好就收，不要过度要求，否则让对方破例后，到时你进来后对方也会以更高的要求来考核你，还可能答应了最后也不兑现。为了保险起见，应聘者最好让对方在接收函上写明薪酬、试用期限、上班时间等，这样可免去日后口说无凭的纠纷。 总之，好的薪水是要靠势力得到的,但多调查和多注意这方面的资讯,使自己在面试前做到对这个职位的大致薪水有个了解,就会使你不至于提太高或太低不切实际的要求,从而失去到手的工作。 HR 指责要薪太高怎么办？想象下，当你实事求是的按照以上的方法报出自己的工资为 7000 元的时候，面试官呵呵笑道：“你是应届生，却要求 7000 元的工资，是不是太高了？”此时，你该怎么办？ 回答提示： 1、北京的生活成本高，3000元在北京生存很艰难，在饭店工作也可能不值这个，北京的web前端平均工资我也是有过了解的。同学大都是这个工资（注意：这个同学可以向HR强调是平时一起讨论问题的同学，暗示水平差不多)；2、上几家都给我6千了，我没有去（觉得自己值多少钱，那就是值多少）；3、我不是乱要价，我有能力完成完成上级交代的任务，创造出超过7000元价值的能力（强调自己的能力）；4、对技术狂热，会沿着前端道路一直往前走（强调自己对这份工作的热爱）；5、再说公司会有试用期，试用期可以低于7000，我会在这个阶段证明我自己的能力，可以如果没有达到，公司也可以开除我。 在五年的时间内，你的职业规划？回答提示：这是每一个应聘者都不希望被问到的问题，但是几乎每个人都会被问到。比较多的答案是“管理者”。但是近几年来，许多公司都已经建立了专门的技术途径。这些工作地位往往被称作“顾问”、“参议技师”或“高级软件工程师”等等。当然，说出其他一些你感兴趣的职位也是可以的，比如产品销售部经理，生产部经理等一些与你的专业有相关背景的工作。要知道，考官总是喜欢有进取心的应聘者，此时如果说“不知道”，或许就会使你丧失一个好机会。最普通的回答应该是 “我准备在技术领域有所作为”或“我希望能按照公司的管理思路发展”。 你朋友对你的评价？回答提示： 想从侧面了解一下你的性格及与人相处的问题。回答样本：“我的朋友都说我是一个可以信赖的人。因为，我一旦答应别人的事情，就一定会做到。如果我做不到，我就不会轻易许诺。回答样本：”我觉的我是一个比较随和的人，与不同的人都可以友好相处。在我与人相处时，我总是能站在别人的角度考虑问题“ 你还有什么问题要问吗？回答提示：企业的这个问题看上去可有可无，其实很关键，企业不喜欢说“没有问题”的人，因为其很注重员工的个性和创新能力。企业不喜欢求职者问个人福利之类的问题，如果有人这样问：贵公司对新入公司的员工有没有什么培训项目，我可以参加吗？或者说贵公司的晋升机制是什么样的？企业将很欢迎，因为体现出你对学习的热情和对公司的忠诚度以及你的上进心。 如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办？回答提示：一段时间发现工作不适合我，有两种情况： 1、如果你确实热爱这个职业，那你就要不断学习，虚心向领导和同事学习业务知识和处事经验，了解这个职业的精神内涵和职业要求，力争减少差距； 2、你觉得这个职业可有可无，那还是趁早换个职业，去发现适合你的，你热爱的职业，那样你的发展前途也会大点，对单位和个人都有好处。 在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？①.原则上我会尊重和服从领导的工作安排；同时私底下找机会以请教的口吻，婉转地表达自己的想法，看看领导是否能改变想法；② 如果领导没有采纳我的建议，我也同样会按领导的要求认真地去完成这项工作；③.还有一种情况，假如领导要求的方式违背原则，我会坚决提出反对意见；如领导仍固执己见，我会毫不犹豫地再向上级领导反映。 你希望与什么样的上级共事？① 通过应聘者对上级的“希望”可以判断出应聘者对自我要求的意识，这既上一个陷阱，又是一次机会；② 最好回避对上级具体的希望，多谈对自己的要求；③ 如“做为刚步入社会的新人，我应该多要求自己尽快熟悉环境、适应环境，而不应该对环境提出什么要求，只要能发挥我的专长就可以了 分析：这个问题比较好的回答是，希望我的上级能够在工作中对我多指导，对我工作中的错误能够立即指出。总之，从上级指导这个方面谈，不会有大的纰漏。 在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？①.原则上我会尊重和服从领导的工作安排；同时私底下找机会以请教的口吻，婉转地表达自己的想法，看看领导是否能改变想法；② 如果领导没有采纳我的建议，我也同样会按领导的要求认真地去完成这项工作；③.还有一种情况，假如领导要求的方式违背原则，我会坚决提出反对意见；如领导仍固执己见，我会毫不犹豫地再向上级领导反映。 与上级意见不一致，你将怎么办？① 一般可以这样回答“我会给上级以必要的解释和提醒，在这种情况下，我会服从上级的意见。”② 如果面试你的是总经理，而你所应聘的职位另有一位经理，且这位经理当时不在场，可以这样回答：“对于非原则性问题，我会服从上级的意见，对于涉及公司利益的重大问题，我希望能向更高层领导反映。” 分析：这个问题的标准答案是思路 1，如果用 2 的回答，必死无疑。你没有摸清楚改公司的内部情况，先想打小报告，这样的人没有人敢要。 如果你做的一项工作受到上级领导的表扬，但你主管领导却说是他做的，你该怎样？回答提示：我首先不会找那位上级领导说明这件事，我会主动找我的主管领导来沟通，因为沟通是解决人际关系的最好办法，但结果会有两种：我的主管领导认识到自己的错误，我想我会视具体情况决定是否原谅他；2.他更加变本加厉的来威胁我，那我会毫不犹豫地找我的上级领导反映此事，因为他这样做会造成负面影响，对今后的工作不利。 如果你的工作出现失误，给本公司造成经济损失，你认为该怎么办？① 我本意是为公司努力工作，如果造成经济损失，我认为首要的问题是想方设法去弥补或挽回经济损失。如果我无能力负责，希望单位帮助解决；② 是责任问题。分清责任，各负其责，如果是我的责任，我甘愿受罚；如果是一个我负责的团队中别人的失误，也不能幸灾乐祸，作为一个团队，需要互相提携共同完成工作，安慰同事并且帮助同事查找原因总结经验。③ 总结经验教训，一个人的一生不可能不犯错误，重要的是能从自己的或者是别人的错误中吸取经验教训，并在今后的工作中避免发生同类的错误。检讨自己的工作方法、分析问题的深度和力度是否不够，以致出现了本可以避免的错误。 如果你在这次考试中没有被录用，你怎么打算？回答提示：现在的社会是一个竞争的社会,从这次面试中也可看出这一点,有竞争就必然有优劣,有成功必定就会有失败.往往成功的背后有许多的困难和挫折,如果这次失败了也仅仅是一次而已,只有经过经验经历的积累才能塑造出一个完全的成功者。我会从以下几个方面来正确看待这次失败. 第一、要敢于面对,面对这次失败不气馁,接受已经失去了这次机会就不会回头这个现实,从心理意志和精神上体现出对这次失败的抵抗力。要有自信,相信自己经历了这次之后经过努力一定能行.能够超越自我. 第二、善于反思,对于这次面试经验要认真总结,思考剖析,能够从自身的角度找差距。正确对待自己,实事求是地评价自己,辩证的看待自己的长短得失,做一个明白人. 第三、走出阴影,要克服这一次失败带给自己的心理压力,时刻牢记自己弱点,防患于未然,加强学习,提高自身素质. 第四、认真工作,回到原单位岗位上后,要实实在在、踏踏实实地工作,三十六行,行行出状元,争取在本岗位上做出一定的成绩. 第五、再接再厉,成为软件工程师或网络工程师一直是我的梦想,以后如果有机会我仍然后再次参加竞争. 谈谈你对跳槽的看法？（1）正常的”跳槽”能促进人才合理流动，应该支持；（2）频繁的跳槽对单位和个人双方都不利，应该反对。 工作中你难以和同事、上司相处，你该怎么办？① 我会服从领导的指挥，配合同事的工作。② 我会从自身找原因，仔细分析是不是自己工作做得不好让领导不满意，同事看不惯。还要看看是不是为人处世方面做得不好。如果是这样的话 我会努力改正。③ 如果我找不到原因，我会找机会跟他们沟通，请他们指出我的不足。有问题就及时改正。④ 作为优秀的员工，应该时刻以大局为重，即使在一段时间内，领导和同事对我不理解，我也会做好本职工作，虚心向他们学习，我相信，他们会看见我在努力，总有一天会对我微笑的！ 假设你在某单位工作，成绩比较突出，得到领导的肯定。但同时你发现同事们越来越孤立你，你怎么看这个问题？你准备怎么办？① 成绩比较突出，得到领导的肯定是件好事情，以后更加努力② 检讨一下自己是不是对工作的热心度超过同事间交往的热心了，加强同事间的交往及共同的兴趣爱好。③ 工作中，切勿伤害别人的自尊心④ 不再领导前拨弄是非⑤ 乐于助人对面 你最近是否参加了培训课程？谈谈培训课程的内容。是公司资助还是自费参加？回答提示：请自行根据自己情况做回答，这个没有统一标准答案。 你对于我们公司了解多少？回答提示：在去公司面试前上网查一下该公司主营业务。 请说出你选择这份工作的动机？你为什么选择我们公司？1.面试前，对应聘公司各方面，要了解详尽！至少要了解到行业、企业、岗位这三方面！最好要准备一些具体的数据和实例！2.面试时候，可以将之前对公司的了解（行业、企业、数据、实例）结合自己的面试岗位，大略的说一遍，然后强调自己“觉得这个工作合适”即可。3.如果对这个行业确实很喜欢，要说出你对这个行业的认识与热爱。 你最擅长的技术方向是什么？回答提示：说和你要应聘的职位相关的课程，表现一下自己的热诚没有什么坏处。 你能为我们公司带来什么呢？① 假如你可以的话，试着告诉他们你可以减低他们的费用——“我已经接受过专业的培训或者工作 X 年，立刻就可以上岗工作”。② 企业很想知道未来的员工能为企业做什么，求职者应再次重复自己的优势，然后说：“就我的能力，我可以做一个优秀的员工在组织中发挥能力，给组织带来高效率和更多的收益”。企业喜欢求职者就申请的职位表明自己的能力，比如申请营销之类的职位，可以说：“我可以开发大量的新客户，同时，对老客户做更全面周到的服务，开发老客户的新需求和消费。”等等。 最能概括你自己的三个词是什么？回答提示：我经常用的三个词是适应能力强，有责任心和做事有始终，结合具体例子向主考官解释。 你的业余爱好是什么？回答提示：找一些富于团体合作精神的，这里有一个真实的故事：有人被否决掉，因为他的爱好是深海潜水。主考官说：因为这是一项单人活动，我不敢肯定他能否适应团体工作。 作为被面试者给我打一下分回答提示：试着列出四个优点和一个非常非常非常小的缺点，（可以抱怨一下事实，没有明确责任人的缺点是不会有人介意的）。 你怎么理解你应聘的职位？回答提示：把岗位职责和任务及工作态度阐述一下 喜欢这份工作的哪一点？回答提示：相信其实大家心中一定都有答案了吧！每个人的价值观不同，自然评断的标准也会不同，但是，在回答面试官这个问题时可不能太直接就把自己心理的话说出来，尤其是薪资方面的问题，不过一些无伤大雅的回答是不错的考虑，如交通方便，工作性质及内容颇能符合自己的兴趣等等都是不错的答案，不过如果这时自己能仔细思考出这份工作的与众不同之处，相信在面试上会大大加分。 为什么要离职?您在前一家公司的离职原因是什么?① 回答这个问题时一定要小心，就算在前一个工作受到再大的委屈，对公司有多少的怨言，都千万不要表现出来，尤其要避免对公司本身主管的批评，避免面试官的负面情绪及印象；建议此时最好的回答方式是将问题归咎在自己身上，例如觉得工作没有学习发展的空间，自己想在面试工作的相关产业中多加学习，或是前一份工作与自己的生涯规划不合等等，回答的答案最好是积极正面的。② 我希望能获得一份更好的工作，如果机会来临，我会抓住；我觉得目前的工作，已经达到顶峰，即沒有升迁机会。③ 最重要的是：应聘者要使找招聘单位相信，应聘者在过往的单位的“离职原因”在此家招聘单位里不存在；④ 避免把“离职原因”说得太详细、太具体；⑤ 不能掺杂主观的负面感受，如“太辛苦”、“人际关系复杂”、“管理太混乱”、“公司不重视人才”、“公司排斥我们某某的员工”等；但也不能躲闪、回避，如“想换换环境”、“个人原因”等；⑥ 不能涉及自己负面的人格特征，如不诚实、懒惰、缺乏责任感、不随和等；尽量使解释的理由为应聘者个人形象添彩； 回答样本：如“我离职是因为这家公司倒闭；我在公司工作了三年多，有较深的感情；从去年始，由于市场形势突变，公司的局面急转直下；到眼下这一步我觉得很遗憾，但还要面对显示，重新寻找能发挥我能力的舞台。”同一个面试问题并非只有一个答案，而同一个答案并不是在任何面试场合都有效，关键在应聘者掌握了规律后，对面试的具体情况进行把握，有意识地揣摩面试官提出问题的心理背景，然后投其所好。 分析：除非是薪资太低，或者是最初的工作，否则不要用薪资作为理由。“求发展”也被考官听得太多，离职理由要根据每个人的真实离职理由来设计，但是在回答时一定要表现得真诚。实在想不出来的时候，家在外地可以说是因为家中有事，须请假几个月，公司又不可能准假，所以辞职。这个答案一般面试官还能接受。 说说你对行业、技术发展趋势的看法？回答提示：企业对这个问题很感兴趣，只有有备而来的求职者能够过关。求职者可以直接在网上查找对你所申请的行业部门的信息，只有深入了解才能产生独特的见解。企业认为最聪明的求职者是对所面试的公司预先了解很多，包括公司各个部门，发展情况，在面试回答问题的时候可以提到所了解的情况，企业欢迎进入企业的人是“知己”，而不是“盲人”。 对工作的期望与目标何在？回答提示：这是面试者用来评断求职者是否对自己有一定程度的期望、对这份工作是否了解的问题。对于工作有确实学习目标的人通常学习较快，对于新工作自然较容易进入状况，这时建议你，最好针对工作的性质找出一个确实的答案，如业务员的工作可以这样回答：“我的目标是能成为一个超级业务员，将公司的产品广泛的推销出去，达到最好的业绩成效；为了达到这个目标，我一定会努力学习，而我相信以我认真负责的态度，一定可以达到这个目标。”其他类的工作也可以比照这个方式来回答，只要在目标方面稍微修改一下就可以了。 说说你的家庭回答提示：企业面试时询问家庭问题不是非要知道求职者家庭的情况，探究隐私，企业不喜欢探究个人隐私，而是要了解家庭背景对求职者的塑造和影响。企业希望听到的重点也在于家庭对求职者的积极影响。企业最喜欢听到的是：我很爱我的家庭！我的家庭一向很和睦，虽然我的父亲和母亲都是普通人，但是从小，我就看到我父亲起早贪黑，每天工作特别勤劳，他的行动无形中培养了我认真负责的态度和勤劳的精神。我母亲为人善良，对人热情，特别乐于助人，所以在单位人缘很好，她的一言一行也一直在教导我做人的道理。企业相信，和睦的家庭关系对一个人的成长有潜移默化的影响。 就你申请的这个职位，你认为你还欠缺什么？回答提示：企业喜欢问求职者弱点，但精明的求职者一般不直接回答。他们希望看到这样的求职者：继续重复自己的优势，然后说：“对于这个职位和我的能力来说，我相信自己是可以胜任的，只是缺乏经验，这个问题我想我可以进入公司以后以最短的时间来解决，我的学习能力很强，我相信可以很快融入公司的企业文化，进入工作状态。”企业喜欢能够巧妙地躲过难题的求职者。 你欣赏哪种性格的人？回答提示：诚实、不死板而且容易相处的人、有”实际行动”的人。 你通常如何处理別人的批评？① 沈默是金。不必说什么，否则情况更糟，不过我会接受建设性的批评； ② 我会等大家冷靜下来再讨论。 你怎样对待自己的失敗？回答提示：我们大家生来都不是十全十美的，我相信我有第二个机会改正我的错误。 什么会让你有成就感？回答提示：为贵公司竭力效劳；尽我所能，完成一个项目 眼下你生活中最重要的是什么？回答提示：对我来说，能在这个领域找到工作是最重要的；望能在贵公司任职对我说最重要。 你为什么愿意到我们公司来工作？回答提示：对于这个问题，你要格外小心，如果你已经对该单位作了研究，你可以回答一些详细的原因，像“公司本身的高技术开发环境很吸引我。”，“我同公司出生在同样的时代，我希望能够进入一家与我共同成长的公司。”“你们公司一直都稳定发展，在近几年来在市场上很有竞争力。”或者“我认为贵公司能够给我提供一个与众不同的发展道路。”这都显示出你已经做了一些调查，也说明你对自己的未来有了较为具体的远景规划。 你和别人发生过争执吗？你是怎样解决的？回答提示：这是面试中最险恶的问题。其实是考官布下的一个陷阱。千万不要说任何人的过错。应知成功解决矛盾是一个协作团体中成员所必备的能力。假如你工作在一个服务行业，这个问题简直成了最重要的一个环节。你是否能获得这份工作，将取决于这个问题的回答。考官希望看到你是成熟且乐于奉献的。他们通过这个问题了解你的成熟度和处世能力。在没有外界干涉的情况下，通过妥协的方式来解决才是正确答案。 你做过的哪件事最令自己感到骄傲?回答提示：这是考官给你的一个机会，让你展示自己把握命运的能力。这会体现你潜在的领导能力以及你被提升的可能性。假如你应聘于一个服务性质的单位，你很可能会被邀请去午餐。记住：你的前途取决于你的知识、你的社交能力和综合表现。 你新到一个部门,一天一个客户来找你解决问题,你努力想让他满意，可是始终达不到群众得满意,他投诉你们部门工作效率低,你这个时候怎么作?(1)首先，我会保持冷静。作为一名工作人员，在工作中遇到各种各样的问题是正常的，关键是如何认识它，积极应对，妥善处理。 (2)其次，我会反思一下客户不满意的原因。一是看是否是自己在解决问题上的确有考虑的不周到的地方，二是看是否是客户不太了解相关的服务规定而提出超出规定的要求，三是看是否是客户了解相关的规定，但是提出的要求不合理。 (3)再次，根据原因采取相对的对策。如果是自己确有不周到的地方，按照服务规定作出合理的安排，并向客户作出解释；如果是客户不太了解政策规定而造成的误解，我会向他作出进一步的解释，消除他的误会；如果是客户提出的要求不符合政策规定，我会明确地向他指出。 (4)再次，我会把整个事情的处理情况向领导作出说明，希望得到他的理解和支持。 (5)我不会因为客户投诉了我而丧失工作的热情和积极性，而会一如既往地牢记为客户服务的宗旨，争取早日做一名领导信任、公司放心、客户满意的职员。 对这项工作，你有哪些可预见的困难？① 不宜直接说出具体的困难，否则可能令对方怀疑应聘者不行；② 可以尝试迂回战术，说出应聘者对困难所持有的态度——“工作中出现一些困难是正常的，也是难免的，但是只要有坚忍不拔的毅力、良好的合作精神以及事前周密而充分的准备，任何困难都是可以克服。” 分析：一般问这个问题，面试者的希望就比较大了，因为已经在谈工作细节。但常规思路中的回答，又被面试官“骗”了。当面试官询问这个问题的时候，有两个目的。 第一，看看应聘者是不是在行，说出的困难是不是在这个职位中一般都不可避免的问题。 第二，是想看一下应聘者解决困难的手法对不对，及公司能否提供这样的资源。而不是想了解应聘者对困难的态度。 如果我录用你，你将怎样开展工作？① 如果应聘者对于应聘的职位缺乏足够的了解，最好不要直接说出自己开展工作的具体办法；② 可以尝试采用迂回战术来回答，如“首先听取领导的指示和要求，然后就有关情况进行了解和熟悉，接下来制定一份近期的工作计划并报领导批准，最后根据计划开展工作。” 分析：这个问题的主要目的也是了解应聘者的工作能力和计划性、条理性，而且重点想要知道细节。如果向思路中所讲的迂回战术，面试官会认为回避问题，如果引导了几次仍然是回避的话。此人绝对不会录用了。 你工作经验欠缺，如何能胜任这项工作？① 如果招聘单位对应届毕业生的应聘者提出这个问题，说明招聘公司并不真正在乎“经验”，关键看应聘者怎样回答；② 对这个问题的回答最好要体现出应聘者的诚恳、机智、果敢及敬业；③ 如“作为应届毕业生，在工作经验方面的确会有所欠缺，因此在读书期间我一直利用各种机会在这个行业里做兼职。我也发现，实际工作远比书本知识丰富、复杂。但我有较强的责任心、适应能力和学习能力，而且比较勤奋，所以在兼职中均能圆满完成各项工作，从中获取的经验也令我受益非浅。请贵公司放心，学校所学及兼职的工作经验使我一定能胜任这个职位。” 点评：这个问题思路中的答案尚可。突出自己的吃苦能力和适应性以及学习能力（不是学习成绩）为好。 为了做好你工作份外之事，你该怎样获得他人的支持和帮助？回答提示：每个公司都在不断变化发展的过程中；你当然希望你的员工也是这样。你希望得到那些希望并欢迎变化的人，因为这些人明白，为了公司的发展，变化是公司日常生活中重要组成部分。这样的员工往往很容易适应公司的变化，并会对变化做出积极的响应。此外，他们遇到矛盾和问题时，也能泰然处之。下面的问题能够考核应聘者这方面的能力。据说有人能从容避免正面冲突。请讲一下你在这方面的经验和技巧。有些时候，我们得和我们不喜欢的人在一起共事。说说你曾经克服了性格方面的冲突而取得预期工作效果的经历。 项目中遇到困难，你怎么办？怎么回答回答提示：自己能搞定的，就自己上网找资料；但如果比如在 2 个小时之内还没有头绪，就考虑问公司技术水平比较高的同事之类的，然后还要及时和项目经理沟通 那不浪费了 2 个小时时间 业务问题的话，谁清楚就问谁啊……即时沟通能够大大提高工作效率。 技术问题查资料，需求问题重新分析 还是写程序的时候有技术难点、技术难点又分普遍的技术难点、还是你个人不会做、 第一种这个要找项目负责人商量、甚至要找产品/运行或其他甲方沟通、 第二种普遍技术难点的话、参考资料或者和项目负责人商量看看怎么办、 第三种的话、先自己查资料试着解决、不行就找人其他资讯、、 你在现在的团队处于什么样的角色，起到了什么明显的作用？回答提示：请自行根据自己情况做回答，这个没有统一标准答案。 最近在学什么？能谈谈你未来 3，5 年给自己的规划吗？面试时，经常会被面试官问到关于职业规划的问题，比如：你准备在我们公司做多久？你未来几年的职业规划是什么？等等。还没有进入公司，对公司工作环境还不太了解就被面试官问到这些问题，该怎么答才能合情有合理呢？ 问：你准备在我们这家单位做多久？ 答： 这不是自己单方面决定的，还要看公司，但是可以肯定的是，如果公司跟自己的职业发展一致，我是会一直干下去的 以我对公司和现有职位的了解，如果能应聘上的话，目前来看至少可以稳定三年 问：未来五年的规划是怎样的？ 答： 1.如果应聘成功，我至少会稳定的做两年，踏实的做好自己的本职工作。2.在工作中，会向高手请教，研究些新技术，提高自己的技术水平。3.目前的规划是要优先做一名技术高手，如果有可能的话，做管理也是可以考虑的。 当然，说出其他一些你感兴趣的职位也是可以的，比如产品销售部经理，生产部经理等一些与你的专业有相关背景的工作。要知道，考官总是喜欢有进取心的应聘者，此时如果说“不知道”，或许就会使你丧失一个好机会。最普通的回答应该是“我准备在技术领域有所作为”或“我希望能按照公司的管理思路发展”。 大部分面试官司都会问你是否有职业规划，这个问题的背后是了解你的求职动机和对自己中长期职业发展的思考。在回答这个问题之前，要对自己有个清晰的认识，知道自己想往哪个方向发展以及未来有什么计划，要给面试官一种积极向上，好学上进，有追求，有规划的感觉，面试官喜欢有规划的求职者。 如何向 HR 介绍你做过的项目项目经验与工作经验是相辅相成的，但较之于工作经验，项目经验更侧重于表现求职者在某个专业领域内的技能水平（技能水平决定了工资水平）。因而，技术类岗招聘的时候，更注重项目经验。项目介绍是有套路的，面试时，要将简历中的项目准备好！ 我们在跟面试官讲解的时候，讲解项目一定要围绕着以下几个方面： 1、项目名称2、开发时间（这里有个注意点：时间不要说的太短，而应该把前期的构思、需求分析、准备工作等时间都可以加进去）；3、项目描述（做什么的）；4、项目职责（说清楚自己职责，同时为了提高自己的技术形象，可以将项目说大点）；5、项目使用的技术（除了说现在使用的技术，还可以说项目进行了压力测试、兼容性处理、数据库的3F、未来还要放mysql集群技术、页面静态化技术、以提升自己在对方心目中的技术形象）；6、项目的亮点；7、在自己的项目上可以想一些市面上没有但是自己觉得很有创意的点子。实现不实现都是无所谓了，但是你给面试官的印象会再上一个层次。8、项目体会（可以说说：多人协作、命名规范、模块划分）； HR 贬低项目时你该怎么办我们在上文讲解了如何向 HR 介绍项目。由于项目反映了技术，技术决定了薪资，所以面试官一般会把打压我们的项目变相打压我们技术，以达到打压我们薪资预期的目的，同时观察我们在打压环境中的表现来决定到底打压薪资到何种程度！所以，当 HR 说：“一个月的时间，四五个人的配合就完成了项目，可见你们项目不大、技术含量不高啊”，各位面试者一定要冷静！来学学在 HR 贬低项目时的应对方法！ 1.项目实现也许花的时间不多，但是前期的构思、需求分析、页面设计等等准备工作是花了很多时间的。2.项目大小和技术含量并不能够成正比，我们的项目，虽然小，但麻雀虽小，却五脏俱全。接着向面试官介绍你们团队在项目过程中所使用的技术等等。3.项目大小主要是体现在功能上，有些功能客户并没有提出。如果后期客户有提出，我们也能够快速的实现。 项目经验少该怎么办对于前端来说，技术水平是决定我们工资最重要的因素。技术水平是要通过我们的项目体现出来的，但项目经验少该怎么办？ 1、项目经验是拿高工资最重要的一个指标。这反映了程序员的价值，也是用人单位给出薪资报价最重要的因素。所以面试者一定要重视项目。2、简历中至少要写出3个项目。3、项目可以适当包装。可以多说一些比较高端大气上档次的技术。4、面试官问到简历中的项目细节你要能答上来。否则，就算是你做的，面试官因你答不上来也会认为不是你做的。所以要花时间，搞定写在简历上的项目模块。5、项目抓亮点来说，可以对照企业的需求，将最有竞争力的点说清楚。这种能够加分的亮点一定要说到。 你学历低，为什么要录用你？面试一份工作时，学历有时候是一块敲门砖。对于学历不高的面试者，如果 HR 问：你才高中学历，而现在大学生一大把，我们为什么要录用你？你如果学历真的很低，那该怎么回答呢？ 回答提示： 1、通过自信的表现，有效的沟通，让面试官主动忽略这个问题。或者说是你把你最好的展现出来，让面试官信服，觉得你是合适的人选而不提及或忽略掉这个问题。2、即使面试官提出来了，勇敢面对主动承认，赞同面试官的提问，确实学历较低，自已已经深刻认识此问题，也因为认识到这个事实，你才更加注重能力的培养，同时自己也在工作之余继续课堂学习，增加扎实的理论知识。同时说出你的学历提升打算，提升计划一定要与你现行的工作职位结合。3、如果面试官对学历一直抓住不放，或作为必要条件，以退为进吧，委婉表达自己想得到职位的态度，并做好了放弃的心理准备。 总的来说，在面试的时候，表现出自信，从谈吐和沟通上，给面试官好印象。如果问到你学历的时候，表现出“学历不代表能力”的自信来就好，一般的企业不会把这个当做决定性因素，还是看综合素质。 你是不是年龄太大了？都说 IT 行业是个吃青春饭的行业，你现在已经接近 30 岁了，你是不是年龄太大了？这个问题应该被问到的不多，但是万一真的被问到这个问题，你该如何作答呢？ 1、 能不能做事才是大问题。而不是年龄。是不是有能力，试用期间可以检验。2、 要表现出自己很喜欢这份工作，要长久的做下去（年龄大的人，工作经历多，接触的东西多，才能够在众多的经历中明确知道自己未来到底要走什么路）。要突出自己年龄大的优势，比如思想更成熟，眼界更开阔等等。 你太小了，你能承担项目吗？虽说 IT 行业是个吃青春饭的行业，但是你年纪太小了，让人感觉不踏实。虽然我们最重要拼的是技术，但真的被问到这个问题，你该如何作答呢？ 1、虽然我年纪小，但是我技术是没有问题的，也是有担当的。试用期间可以检验。2、对于前端，我做过很多的项目，也有系统的学习过。并不比年纪大的人差。3、正因为我年纪小，我对于工作有十足的干劲，我很想在这行好好的发展，也能承受比较强的工作压力。 你对前端界面工程师这个职位是怎么样理解的？它的前景会怎么样？a. 前端是最贴近用户的程序员，前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。前端的能力就是能让产品从 90 分进化到 100 分，甚至更好 b. 参与项目，快速高质量完成实现效果图，精确到 1px； c. 与团队成员，UI 设计，产品经理的沟通； d. 做好的页面结构，页面重构和用户体验； e. 处理 hack，兼容、写出优美的代码格式； f. 针对服务器的优化、拥抱最新前端技术。 1、实现界面交互 2、提升用户体验 3、有了 Node.js，前端可以实现服务端的一些事情 其它相关的加分项： 都使用和了解过哪些编辑器?都使用和了解过哪些日常工具? 都知道有哪些浏览器内核?开发过的项目都兼容哪些浏览器? 瀑布流布局或者流式布局是否有了解 HTML5 都有哪些新的 API? 都用过什么代码调试工具? 是否有接触过或者了解过重构。 你遇到过比较难的技术问题是？你是如何解决的？","categories":[{"name":"前端面试题","slug":"前端面试题","permalink":"http://www.bluedream.top/categories/前端面试题/"}],"tags":[{"name":"面试技巧","slug":"面试技巧","permalink":"http://www.bluedream.top/tags/面试技巧/"},{"name":"面试问题","slug":"面试问题","permalink":"http://www.bluedream.top/tags/面试问题/"},{"name":"面试经验","slug":"面试经验","permalink":"http://www.bluedream.top/tags/面试经验/"}]},{"title":"JavaScript原型链","slug":"JavaScript原型链","date":"2019-08-31T07:10:08.000Z","updated":"2019-09-26T08:10:39.288Z","comments":true,"path":"前端知识点/JavaScript原型链.html","link":"","permalink":"http://www.bluedream.top/前端知识点/JavaScript原型链.html","excerpt":"","text":"面向对象原理：​ 1）目标：实现封装、继承、多态等面向对象的基本功能。 ​ 2）原理：原型链是面向对象的基础,使用prototype、function 、new、this模拟面向对象的类。 ​ JavaScript是面向对象语言，但不使用类（根本不存在类）。JavaScript的面向对象是基于prototype和function的，而不是基于类的。 介绍JavaScript的原型，原型链？有什么特点？ 原型： JavaScript的所有对象中都包含了一个 [proto] 内部属性，这个属性所对应的就是该对象的原型。 JavaScript的函数对象，除了原型 [proto] 之外，还预置了 prototype 属性。 当函数对象作为构造函数创建实例时，该 prototype 属性值将被作为实例对象的原型 [proto]。 原型链： 原型链是由一些用来继承和共享属性的对象组成的（有限的）对象链。 当一个对象调用的属性/方法自身不存在时，就会去自己 [proto] 关联的前辈 prototype 对象上去找。 如果没找到，就会去该 prototype 原型 [proto] 关联的前辈 prototype 去找。依次类推，直到找到属性/方法（一直检索到 Object 内建对象）或 undefined 为止。从而形成了所谓的“原型链” 关系：instance.constructor.prototype = instance.__proto__ 原型特点： JavaScript对象是通过引用来传递的，当修改原型时，与之相关的对象也会继承这一改变 原型链的基本原理： 任何一个实例，通过原型链，找到它上面的原型，该原型对象中的方法和属性，可以被所有的原型实例共享。 原型可以起到继承的作用，原型里的方法都可以被不同的实例共享。 其他理解： 通过一个对象的proto可以找到它的原型对象，原型对象也是一个对象，就可以通过原型对象的proto，最后找到了我们的 Object.prototype，Object是原型链的顶端。从实例的原型对象开始一直到 Object.prototype 就是我们的原型链。 每个对象都有一个私有属性（称之为 [[Prototype]]），它指向它的原型对象（prototype）。该 prototype 对象又具有一个自己的 prototype ，层层向上直到一个对象的原型为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。 当查找一个对象的属性时，JavaScript 会向上遍历原型链，直到找到给定名称的属性为止，到查找到达原型链的顶部 - 也就是 Object.prototype - 但是仍然没有找到指定的属性，就会返回 undefined 12345678910function Func()&#123;&#125;Func.prototype.name = &quot;Sean&quot;;Func.prototype.getInfo = function() &#123; return this.name;&#125;var person = new Func();//现在可以参考var person = Object.create(oldObject);console.log(person.getInfo());//它拥有了Func的属性和方法//&quot;Sean&quot;console.log(Func.prototype);// Func &#123; name=&quot;Sean&quot;, getInfo=function()&#125; js001 原型、构造函数、实例三者之间的关系 PS：任何一个函数，如果在前面加了new，那就是构造函数。 构造函数通过 new 生成实例 构造函数也是函数，构造函数的prototype指向原型。（所有的函数有prototype属性，但实例没有 prototype属性） 原型对象中有 constructor，指向该原型的构造函数。 上面的三行，代码演示： 12345var Foo = function (name) &#123; this.name = name;&#125;;var fn = new Foo('smyhvae'); 上面的代码中，Foo.prototype.constructor === Foo的结果是true： 实例的__proto__指向原型。也就是说，Foo.__proto__ === M.prototype。 声明：所有的引用类型（数组、对象、函数）都有__proto__这个属性。 Foo.__proto__ === Function.prototype的结果为true，说明Foo这个普通的函数，是Function构造函数的一个实例。 prototype 和proto的关系是什么？所有的对象都拥有proto属性，它指向对象构造函数的 prototype 属性 12345let obj = &#123;&#125;obj.__proto__ === Object.prototype // truefunction Test()&#123;&#125;test.__proto__ == Test.prototype // true 所有的函数都同时拥有proto和 protytpe 属性函数的proto指向自己的函数实现 函数的 protytpe 是一个对象 所以函数的 prototype 也有proto属性 指向 Object.prototype 12function func() &#123;&#125;func.prototype.__proto__ === Object.prototype // true Object.prototype.proto指向 null 1Object.prototype.__proto__ // null 执行时对象查找时，永远不会去查找原型的一个函数是？ javaScript中hasOwnProperty函数方法是返回一个布尔值，指出一个对象是否具有指定名称的属性。此方法无法检查该对象的原型链中是否具有该属性；该属性必须是对象本身的一个成员 使用方法： object.hasOwnProperty(proName) 其中参数object是必选项。一个对象的实例。 proName是必选项。一个属性名称的字符串值。 如果 object 具有指定名称的属性，那么JavaScript中hasOwnProperty函数方法返回 true，反之则返回 false。 instanceof的原理 instanceof的作用：用于判断实例属于哪个构造函数。 instanceof的原理：判断实例对象的__proto__属性，和构造函数的prototype属性，是否为同一个引用（是否指向同一个地址）。 注意1：虽然说，实例是由构造函数 new 出来的，但是实例的__proto__属性引用的是构造函数的prototype。也就是说，实例的__proto__属性与构造函数本身无关。 注意2：在原型链上，原型的上面可能还会有原型，以此类推往上走，继续找__proto__属性。这条链上如果能找到， instanceof 的返回结果也是 true。 比如说： foo instance of Foo的结果为true，因为foo.__proto__ === M.prototype为true。 foo instance of Objecet的结果也为true，为Foo.prototype.__proto__ === Object.prototype为true。 instanceof 的内部机制是通过判断对象的原型链中是不是能找到类型的 prototype。 使用 instanceof 判断一个对象是否为数组，instanceof 会判断这个对象的原型链上是否会找到对应的 Array 的原型，找到返回 true，否则返回 false。 1[] instanceof Array; // true 但 instanceof 只能用来判断对象类型，原始类型不可以。并且所有对象类型 instanceof Object 都是 true。 1[] instanceof Object; // true 优点：instanceof 可以弥补 Object.prototype.toString.call()不能判断自定义实例化对象的缺点。 缺点：instanceof 只能用来判断对象类型，原始类型不可以。并且所有对象类型 instanceof Object 都是 true，且不同于其他两种方法的是它不能检测出 iframes。 12345function f(name) &#123; this.name = name;&#125;var f1 = new f(\"martin\");console.log(f1 instanceof f); //true 推荐阅读: https://www.cnblogs.com/zhoulujun/p/9667651.html","categories":[{"name":"前端知识点","slug":"前端知识点","permalink":"http://www.bluedream.top/categories/前端知识点/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.bluedream.top/tags/JavaScript/"},{"name":"原型","slug":"原型","permalink":"http://www.bluedream.top/tags/原型/"},{"name":"原型链","slug":"原型链","permalink":"http://www.bluedream.top/tags/原型链/"},{"name":"instanceof","slug":"instanceof","permalink":"http://www.bluedream.top/tags/instanceof/"}]},{"title":"光阴","slug":"光阴","date":"2019-08-31T02:18:08.000Z","updated":"2019-09-26T08:10:36.116Z","comments":true,"path":"散文/光阴.html","link":"","permalink":"http://www.bluedream.top/散文/光阴.html","excerpt":"","text":"作者：赵丽宏 谁也无法描绘出他的面目。但世界上处处能听到他的脚步。 当旭日驱散夜的残幕时,当夕阳被朦胧的地平线吞噬时,他不慌不忙地走着,光明和黑暗都无法改变他进行的节奏。 当蓓蕾在春风中灿然绽开湿润的花瓣时,当婴儿在产房里以响亮的哭声向人世报到时,他悄无声息地走着,欢笑不能挽留他的脚步。 当枯黄的树叶在寒风中飘飘坠落时,当垂危的老人以留恋的目光扫视周围的天地时,他还是沉着而又默然地走,叹息也不能使他停步。 他从你的手指缝里流过去。 从你的脚底下滑过去。 从你的视野和你的思想里飞过去….. 他是一把神奇而又无情的雕刻刀,在天地之间创造着种种奇迹,他能把巨石分裂成尘土,把幼苗雕成大树,把荒漠变成城市和园林,当然,他也能使繁华之都衰败成荒凉的废墟,使锃亮的金属爬满绿锈、失去光泽。老人额头的皱纹是他刻出来的,少女脸上的红晕也是他描绘出来的。生命的繁衍和世界的运动正是由他精心指挥着。 他按时撕下一张又一张日历,把将来变成现在,把现在变成过去,把过去变成越来越遥远的[历史])。 他慷慨。你不必乞求,属于你的,他总是如数奉献。 他公正。不管你权重如山、腰缠万贯,还是一个布衣、两袖清风,他都一视同仁。没有人能将他占为己有,哪怕你一掷千金,他也决不会因此而施舍一分一秒。 你珍重他，他便在你的身后长出绿阴，结出沉甸甸的果实。 你漠视他,他就化成轻烟,消散得无影无踪。 有时,短暂的一瞬会成为永恒,这是因为他把脚印深深地留在了人们心里。 有时,漫长的岁月会成为一瞬,这是因为浓雾和风沙湮没了他的脚印。","categories":[{"name":"散文","slug":"散文","permalink":"http://www.bluedream.top/categories/散文/"}],"tags":[{"name":"光阴","slug":"光阴","permalink":"http://www.bluedream.top/tags/光阴/"},{"name":"赵丽宏","slug":"赵丽宏","permalink":"http://www.bluedream.top/tags/赵丽宏/"}]},{"title":"JavaScript闭包","slug":"JavaScript闭包","date":"2019-08-29T12:50:00.000Z","updated":"2019-09-09T07:56:21.557Z","comments":true,"path":"前端知识点/JavaScript闭包.html","link":"","permalink":"http://www.bluedream.top/前端知识点/JavaScript闭包.html","excerpt":"","text":"说说你对闭包的理解（什么是闭包（closure），为什么要用它？）使用闭包主要是为了设计私有的方法和变量。闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域。在js中，函数即闭包，只有函数才会产生作用域的概念。 闭包有三个特性： 函数内再嵌套函数 函数内部可以引用外部的参数和变量 参数和变量不会被垃圾回收机制回收 优点： 希望一个变量长期存储在内存中。 避免全局变量的污染。 私有成员的存在。 缺点： 常驻内存，会增大内存使用量。 使用不当会很容易造成内存泄露。 示例： 12345678function outer() &#123; var name = \"jack\"; function inner() &#123; console.log(name); &#125; return inner;&#125;outer()(); // jack 1234567function sayHi(name) &#123; return () =&gt; &#123; console.log(`Hi! $&#123;name&#125;`); &#125;;&#125;const test = sayHi(\"xiaoming\");test(); // Hi! xiaoming 虽然 sayHi 函数已经执行完毕，但是其活动对象也不会被销毁，因为 test 函数仍然引用着 sayHi 函数中的变量 name，这就是闭包。但也因为闭包引用着另一个函数的变量，导致另一个函数已经不使用了也无法销毁，所以闭包使用过多，会占用较多的内存，这也是一个副作用。 解析： 由于在 ECMA2015 中，只有函数才能分割作用域，函数内部可以访问当前作用域的变量，但是外部无法访问函数内部的变量，所以闭包可以理解成“定义在一个函数内部的函数，外部可以通过内部返回的函数访问内部函数的变量“。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。 闭包由来JavaScript 变量JavaScript 变量可以是局部变量或全局变量。 全局变量：作用域是全局性的，可应用于页面上的所有脚本，在web页面中全局变量属于 window 对象。 局部变量：在函数内部声明的变量，只在函数内部起作用，作用域是局部性的；函数的参数也是局部性的，只在函数内部起作用。 全局和局部变量即便名称相同，它们也是两个不同的变量。修改其中一个，不会影响另一个的值。私有变量可以用到闭包。 计数器困境设想下如果你想统计一些数值，且该计数器在所有函数中都是可用的。你可以使用全局变量，函数设置计数器递增： 1234567891011var counter = 0; function add() &#123; return counter += 1;&#125; add();add();add(); // 计数器现在为 3 计数器数值在执行 add() 函数时发生变化。 但问题来了，页面上的任何脚本都能改变计数器，即便没有调用 add() 函数。 如果我在函数内声明计数器，如果没有调用函数将无法修改计数器的值：12345678910function add() &#123; var counter = 0; return counter += 1;&#125; add();add();add(); // 本意是想输出 3, 但事与愿违，输出的都是 1 以上代码将无法正确输出，每次我调用 add() 函数，计数器都会设置为 1。 JavaScript 内嵌函数可以解决该问题。 JavaScript 内嵌函数所有函数都能访问全局变量。 实际上，在 JavaScript 中，所有函数都能访问它们上一层的作用域。 JavaScript 支持嵌套函数。嵌套函数可以访问上一层的函数变量。 内嵌函数 plus() 可以访问父函数的 counter 变量：123456function add() &#123; var counter = 0; function plus() &#123;counter += 1;&#125; plus(); return counter; &#125; 如果我们能在外部访问 plus() 函数，这样就能解决计数器的困境。 我们同样需要确保 counter = 0只执行一次。 我们需要闭包。 JavaScript 闭包还记得函数自我调用吗？该函数会做什么？ 12345678910var add = (function () &#123; var counter = 0; return function () &#123;return counter += 1;&#125;&#125;)(); add();add();add(); // 计数器为 3 变量 add 指定了函数自我调用的返回字值。 自我调用函数只执行一次。设置计数器为 0。并返回函数表达式。 add变量可以作为一个函数使用。非常棒的部分是它可以访问函数上一层作用域的计数器。 这个叫作 JavaScript 闭包。它使得函数拥有私有变量变成可能。 计数器受匿名函数的作用域保护，只能通过 add 方法修改。 闭包是一种保护私有变量的机制，在函数执行时形成私有的作用域，保护里面的私有变量不受外界干扰。直观的说就是形成一个不销毁的栈环境。","categories":[{"name":"前端知识点","slug":"前端知识点","permalink":"http://www.bluedream.top/categories/前端知识点/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.bluedream.top/tags/JavaScript/"},{"name":"闭包","slug":"闭包","permalink":"http://www.bluedream.top/tags/闭包/"}]},{"title":"电脑常用快捷键","slug":"电脑常用快捷键","date":"2019-08-28T03:58:08.000Z","updated":"2019-09-09T08:00:19.205Z","comments":true,"path":"其他/电脑常用快捷键.html","link":"","permalink":"http://www.bluedream.top/其他/电脑常用快捷键.html","excerpt":"","text":"文件操作快捷键：Ctrl+C 复制 Ctrl+V 粘贴 Ctrl+X 剪切 Ctrl+A 全选 Ctrl 多选：按住Ctrl，再用鼠标单击即可选中文件，可以反选； Shift 多选：先选中一个文件a，按住Shift键，再用鼠标单击文件h，即可把从a到h选中； Ctrl+Shift+N 新建文件夹。注意：XP系统不行； Shift+Delete 彻底删除文件。选中文件后，先按住Shift键不放手，再按Delete键，彻底删除的文件不在回收站里； 文字输入快捷键：Tab与Shift+Tab：1、在输入账号之后按Tab键，会自动跳到输入密码框进行输入； 2、有些地方相当于输入两个汉字那么长的空格（如代码编写的缩进等）； 3、Shift+Tab为Tab的反操作； Delete 反向删除文字。比如”AB”字符，当光标在A与B之间时，按”Back”退格键时删除”A”，当按”Delete”键时则删除B； Home与End 当输入一行文字时发现有错误，可以按Home回到第一个字，按End时回到最后一个字。此时可以免去动鼠标或者按”←”或”→”方向键的麻烦； 窗口（Win）键【窗口】显示或隐藏“开始”菜单 【窗口】+F1帮助 【窗口】+D显示桌面，一个一个地关闭窗口或最小化窗口会很麻烦，这个快捷键很方便； 【窗口】+R打开“运行”窗口，可以输入”cmd”进入命令行黑窗口，还可以输入”msconfig”等命令； 【窗口】+E打开“我的电脑”，即使桌面上没有“我的电脑”图标也可以进入文件管理； 【窗口】+F搜索文件或文件夹 【窗口】+U打开“工具管理器” 【窗口】+BREAK显示“系统属性” 【窗口】+TAB在打开的项目之间切换 【窗口】+Pause 打开系统相关信息。可以快速查看别人电脑配置，相当于“控制面板\\系统和安全\\系统”。 【窗口】+U+U/R XP系统关机/重启（Win8不行）。注意：每按一个键都要松手，不是连按的； Ctrl键Ctrl+1,2,3… 功能：切换到从左边数起第1,2,3…个标签 Ctrl+A 功能：全部选中当前页面内容 Ctrl+C 功能：复制当前选中内容 Ctrl+D 功能：打开“添加收藏”面版(把当前页面添加到收藏夹中) Ctrl+E 功能：打开或关闭“搜索”侧边栏(各种搜索引擎可选) Ctrl+F 功能：打开“查找”面版 Ctrl+G 功能：打开或关闭“简易收集”面板 Ctrl+H 功能：打开“历史”侧边栏 Ctrl+I 功能：打开“收藏夹”侧边栏/另:将所有垂直平铺或水平平铺或层叠的窗口恢复 Ctrl+K 功能：关闭除当前和锁定标签外的所有标签 Ctrl+L 功能：打开“打开”面版(可以在当前页面打开Iternet地址或其他文件…) Ctrl+N 功能：新建一个空白窗口(可更改,Maxthon选项→标签→新建) Ctrl+O 功能：打开“打开”面版(可以在当前页面打开Iternet地址或其他文件…) Ctrl+P 功能：打开“打印”面板(可以打印网页,图片什么的…) Ctrl+Q 功能：打开“添加到过滤列表”面板(将当前页面地址发送到过滤列表) Ctrl+R 功能：刷新当前页面 Ctrl+S 功能：打开“保存网页”面板(可以将当前页面所有内容保存下来) Ctrl+T 功能：垂直平铺所有窗口 Ctrl+V 功能：粘贴当前剪贴板内的内容 Ctrl+W 功能：关闭当前标签(窗口) Ctrl+X 功能：剪切当前选中内容(一般只用于文本操作) Ctrl+Y 功能：重做刚才动作(一般只用于文本操作) Ctrl+Z 功能：撤消刚才动作(一般只用于文本操作) Ctrl+F4 功能：关闭当前标签(窗口) Ctrl+F5 功能：刷新当前页面 Ctrl+F6 功能：按页面打开的先后时间顺序向前切换标签(窗口) Ctrl+F11 功能：隐藏或显示菜单栏 Ctrl+Tab 功能：以小菜单方式向下切换标签(窗口) Ctrl+拖曳 功能：保存该链接的地址或已选中的文本或指定的图片到一个文件夹中(保存目录可更改,Maxthon选项→保存) Ctrl+小键盘’+’ 功能：当前页面放大20% Ctrl+小键盘’-‘ 功能：当前页面缩小20% Ctrl+小键盘’*’ 功能：恢复当前页面的缩放为原始大小 Ctrl+Alt+S 功能：自动保存当前页面所有内容到指定文件夹(保存路径可更改,Maxthon选项→保存) Ctrl+Shift+小键盘’+’ 功能：所有页面放大20% Ctrl+Shift+小键盘’-‘ 功能：所有页面缩小20% Ctrl+Shift+F 功能：输入焦点移到搜索栏 Ctrl+Shift+G 功能：关闭“简易收集”面板 Ctrl+Shift+H 功能：打开并激活到你设置的主页 Ctrl+Shift+N 功能：在新窗口中打开剪贴板中的地址,如果剪贴板中为文字,则调用搜索引擎搜索该文字(搜索引擎可选择,Maxthon选项→搜索) Ctrl+Shift+S 功能：打开“保存网页”面板(可以将当前页面所有内容保存下来,等同于Ctrl+S) Ctrl+Shift+W 功能：关闭除锁定标签外的全部标签(窗口) Ctrl+Shift+F6 功能：按页面打开的先后时间顺序向后切换标签(窗口) Ctrl+Shift+Tab 功能：以小菜单方式向上切换标签(窗口) 其他常用快捷键：END 显示当前窗口的底端 HOME 显示当前窗口的顶端 Ctrl+Alt+Delete 打开任务管理器（结束一些常规方法关闭不了的程序）。 Print 电脑屏幕截屏。（然后在画图或Word中粘贴保存）； Ctrl+Alt+Print 对当前窗口截屏。（然后在画图或Word中粘贴保存）； Alt+Tab 切换已打开的程序窗口。先用一个手指按住Alt键，再用另外一个手指陆续按Tab键切换不同窗口； Alt+F4 关闭当前窗口。如果没有窗口时则提示关机； F5 刷新当前窗口。包括系统和网页。 Alt+1 功能：保存当前表单 Alt+2 功能：保存为通用表单 Alt+A 功能：展开收藏夹列表 辅助功能按右边的SHIFT键八秒钟切换筛选键的开和关 按SHIFT五次切换粘滞键的开和关 按NUMLOCK五秒钟切换切换键的开和关 左边的ALT+左边的SHIFT+NUMLOCK切换鼠标键的开和关 左边的ALT+左边的SHIFT+PRINTSCREEN切换高对比度的开和关 QQ快捷键Alt+S 快速回复 Alt+C 关闭当前窗口 Alt+H 打开聊天记录 Alt+T 更改消息模式 Ait+J 打开聊天纪录 Ctrl+A 全选当前对话框里的内容 Ctrl+F QQ里直接显示字体设置工具条 Ctrl+J 输入框里回车(跟回车一个效果) Ctrl+M 输入框里回车(跟回车一个效果) Ctrl+L 对输入框里当前行的文字左对齐 Ctrl+R 对输入框里当前行的文字右对齐 Ctrl+E 对输入框里当前行的文字居中 Ctrl+V 在qq对话框里实行粘贴 Ctrl+Z 清空/恢复输入框里的文字 Ctrl+回车 快速回复 这个可能是聊QQ时最常用到的了 Ctrl+Alt+Z 快速提取消息 Ctrl+Alt+A 捕捉屏幕","categories":[{"name":"其他","slug":"其他","permalink":"http://www.bluedream.top/categories/其他/"}],"tags":[{"name":"电脑","slug":"电脑","permalink":"http://www.bluedream.top/tags/电脑/"},{"name":"快捷键","slug":"快捷键","permalink":"http://www.bluedream.top/tags/快捷键/"}]},{"title":"vue","slug":"vue","date":"2019-08-27T13:02:08.000Z","updated":"2019-09-28T07:58:20.522Z","comments":true,"path":"前端面试题/vue.html","link":"","permalink":"http://www.bluedream.top/前端面试题/vue.html","excerpt":"","text":"vue的优点是什么？ 低耦合。视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的”View”上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变 可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑 可测试。界面素来是比较难于测试的，而现在测试可以针对ViewModel来写 为什么用 vue ？简洁、轻快、舒服 请详细说下你对vue生命周期的理解 答：总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后 创建前/后： 在beforeCreate阶段，vue实例的挂载元素el和数据对象data都为undefined，还未初始化。在created阶段，vue实例的数据对象data有了，el还没有 载入前/后：在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染。 更新前/后：当data变化时，会触发beforeUpdate和updated方法 销毁前/后：在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在 组件之间的传值？父组件与子组件传值12345678910111213141516171819202122232425262728293031323334//父组件通过标签上面定义传值&lt;template&gt; &lt;Main :obj=&quot;data&quot;&gt;&lt;/Main&gt;&lt;/template&gt;&lt;script&gt; //引入子组件 import Main form &quot;./main&quot; exprot default&#123; name:&quot;parent&quot;, data()&#123; return &#123; data:&quot;我要向子组件传递数据&quot; &#125; &#125;, //初始化组件 components:&#123; Main &#125; &#125;&lt;/script&gt;//子组件通过props方法接受数据&lt;template&gt; &lt;div&gt;&#123;&#123;data&#125;&#125;&lt;/div&gt;&lt;/template&gt;&lt;script&gt; exprot default&#123; name:&quot;son&quot;, //接受父组件传值 props:[&quot;data&quot;] &#125;&lt;/script&gt; 子组件向父组件传递数据123456789101112131415161718192021222324252627//子组件通过$emit方法传递参数&lt;template&gt; &lt;div v-on:click=&quot;events&quot;&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt; //引入子组件 import Main form &quot;./main&quot; exprot default&#123; methods:&#123; events:function()&#123; &#125; &#125; &#125;&lt;/script&gt;&lt;template&gt; &lt;div&gt;&#123;&#123;data&#125;&#125;&lt;/div&gt;&lt;/template&gt;&lt;script&gt; exprot default&#123; name:&quot;son&quot;, //接受父组件传值 props:[&quot;data&quot;] &#125;&lt;/script&gt; 路由之间跳转？声明式（标签跳转）1&lt;router-link :to=&quot;index&quot;&gt; 编程式（ js跳转）1router.push(&apos;index&apos;) vuex是什么？怎么使用？哪种功能场景使用它？ vue框架中状态管理。在main.js引入store，注入。新建了一个目录store，….. export 。场景有：单页应用中，组件之间的状态。音乐播放、登录状态、加入购物车 vue 中的性能优化Vue 应用运行时性能优化措施 引入生产环境的 Vue 文件 使用单文件组件预编译模板 提取组件的 CSS 到单独到文件 利用 Object.freeze()提升性能 扁平化 Store 数据结构 合理使用持久化 Store 数据 组件懒加载 Vue 应用加载性能优化措施 服务端渲染 / 预渲染 组件懒加载 减少 http 请求，合理设置 HTTP 缓存使用浏览器缓存启用压缩CSS SpritesLazyLoad ImagesCSS 放在页面最上部，javascript 放在页面最下面尽量避免使用 eval 和 Function Vue 的实例生命周期 （1） beforeCreate 初始化实例后 数据观测和事件配置之前调用 （2） created 实例创建完成后调用 （3） beforeMount 挂载开始前被用 （4） mounted el 被新建 vm.$el 替换并挂在到实例上之后调用 （5） beforeUpdate 数据更新时调用 （6） updated 数据更改导致的 DOM 重新渲染后调用 （7） beforeDestory 实例被销毁前调用 （8） destroyed 实例销毁后调用 Vue 的双向数据绑定的原理VUE 实现双向数据绑定的原理就是利用了 Object.defineProperty() 这个方法重新定义了对象获取属性值(get)和设置属性值(set)的操作来实现的。 Vue3.0 将用原生 Proxy 替换 Object.defineProperty 为什么要替换 Object.defineProperty？在 Vue 中，Object.defineProperty 无法监控到数组下标的变化，导致直接通过数组的下标给数组设置值，不能实时响应。 Object.defineProperty 只能劫持对象的属性,因此我们需要对每个对象的每个属性进行遍历。 什么是 Proxy？Proxy 是 ES6 中新增的一个特性，翻译过来意思是”代理”，用在这里表示由它来“代理”某些操作。 Proxy 让我们能够以简洁易懂的方式控制外部对对象的访问。其功能非常类似于设计模式中的代理模式。 Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。 使用 Proxy 的核心优点是可以交由它来处理一些非核心逻辑（如：读取或设置对象的某些属性前记录日志；设置对象的某些属性值前，需要验证；某些属性的访问控制等）。 从而可以让对象只需关注于核心逻辑，达到关注点分离，降低对象复杂度等目的。 为什么避免 v-if 和 v-for 用在一起当 Vue 处理指令时，v-for 比 v-if 具有更高的优先级，这意味着 v-if 将分别重复运行于每个 v-for 循环中。通过 v-if 移动到容器元素，不会再重复遍历列表中的每个值。取而代之的是，我们只检查它一次，且不会在 v-if 为否的时候运算 v-for。 组件的设计原则 页面上每个独立的可视/可交互区域视为一个组件(比如页面的头部，尾部，可复用的区块) 每个组件对应一个工程目录，组件所需要的各种资源在这个目录下就近维护(组件的就近维护思想体现了前端的工程化思想，为前端开发提供了很好的分治策略，在vue.js中，通过.vue文件将组件依赖的模板，js，样式写在一个文件中)(每个开发者清楚开发维护的功能单元，它的代码必然存在在对应的组件目录中，在该目录下，可以找到功能单元所有的内部逻辑) 页面不过是组件的容器，组件可以嵌套自由组合成完整的页面 对于 Vue 是一套渐进式框架的理解每个框架都不可避免会有自己的一些特点，从而会对使用者有一定的要求，这些要求就是主张，主张有强有弱，它的强势程度会影响在业务开发中的使用方式。 1、使用 vue，你可以在原有大系统的上面，把一两个组件改用它实现，当 jQuery 用； 2、也可以整个用它全家桶开发，当 Angular 用； 3、还可以用它的视图，搭配你自己设计的整个下层用。你可以在底层数据逻辑的地方用 OO(Object–Oriented )面向对象和设计模式的那套理念。也可以函数式，都可以。 它只是个轻量视图而已，只做了自己该做的事，没有做不该做的事，仅此而已。 你不必一开始就用 Vue 所有的全家桶，根据场景，官方提供了方便的框架供你使用。 场景联想场景 1：维护一个老项目管理后台，日常就是提交各种表单了，这时候你可以把 vue 当成一个 js 库来使用，就用来收集 form 表单，和表单验证。 场景 2：得到 boss 认可， 后面整个页面的 dom 用 Vue 来管理，抽组件，列表用 v-for 来循环，用数据驱动 DOM 的变化 场景 3:越来越受大家信赖，领导又找你了，让你去做一个移动端 webapp，直接上了 vue 全家桶！ 场景 1-3 从最初的只因多看你一眼而用了前端 js 库，一直到最后的大型项目解决方案。 请问 v-if 和 v-show 有什么区别v-show 指令是通过修改元素的 display 的 CSS 属性让其显示或者隐藏 v-if 指令是直接销毁和重建 DOM 达到让元素显示和隐藏的效果 vue 常用的修饰符参考 v-on 可以监听多个方法吗？肯定可以的。 解析： 1234567&lt;input type=\"text\" :value=\"name\" @input=\"onInput\" @focus=\"onFocus\" @blur=\"onBlur\"/&gt; vue 中 key 值的作用需要使用 key 来给每个节点做一个唯一标识，Diff 算法就可以正确的识别此节点，找到正确的位置区插入新的节点所以一句话，key 的作用主要是为了高效的更新虚拟 DOM vue-cli 工程升级 vue 版本在项目目录里运行 npm upgrade vue vue-template-compiler，不出意外的话，可以正常运行和 build。如果有任何问题，删除 node_modules 文件夹然后重新运行 npm i 即可。（简单的说就是升级 vue 和 vue-template-compiler 两个插件） vue 事件中如何使用 event 对象？v-on 指令（可以简写为 @） 1、使用不带圆括号的形式，event 对象将被自动当做实参传入； 2、使用带圆括号的形式，我们需要使用 $event 变量显式传入 event 对象。 解析： 一、event 对象 （一）事件的 event 对象 你说你是搞前端的，那么你肯定就知道事件，知道事件，你就肯定知道 event 对象吧？各种的库、框架多少都有针对 event 对象的处理。比如 jquery，通过它内部进行一定的封装，我们开发的时候，就无需关注 event 对象的部分兼容性问题。最典型的，如果我们要阻止默认事件，在 chrome 等浏览器中，我们可能要写一个： 1event.preventDefault(); 而在 IE 中，我们则需要写： 1event.returnValue = false; 多亏了 jquery ，跨浏览器的实现，我们统一只需要写： 1event.preventDefault(); 兼容？jquery 内部帮我们搞定了。类似的还有比如阻止事件冒泡以以及事件绑定（addEventListener / attachEvent）等，简单到很多的后端都会使用 $(‘xxx’).bind(…)，这不是我们今天的重点，我们往下看。 （二）vue 中的 event 对象 我们知道，相比于 jquery，vue 的事件绑定可以显得更加直观和便捷，我们只需要在模板上添加一个 v-on 指令（还可以简写为 @），即可完成类似于 $(‘xxx’).bind 的效果，少了一个利用选择器查询元素的操作。我们知道，jquery 中，event 对象会被默认当做实参传入到处理函数中，如下 123$(\"body\").bind(\"click\", function(event) &#123; console.log(typeof event); // object&#125;); 这里直接就获取到了 event 对象，那么问题来了，vue 中呢？ 123456789101112&lt;div id=\"app\"&gt; &lt;button v-on:click=\"click\"&gt;click me&lt;/button&gt;&lt;/div&gt;...var app = new Vue(&#123; el: '#app', methods: &#123; click(event) &#123; console.log(typeof event); // object &#125; &#125;&#125;); 这里的实现方式看起来和 jquery 是一致的啊，但是实际上，vue 比 jquery 要要复杂得多，jquery 官方也明确的说，v-on 不简单是 addEventListener 的语法糖。在 jquery 中，我们传入到 bind 方法中的回调，只能是一个函数表类型的变量或者一个匿名函数，传递的时候，还不能执行它（在后面加上一堆圆括号），否则就变成了取这一个函数的返回值作为事件回调。而我们知道，vue 的 v-on 指令接受的值可以是函数执行的形式，比如 v-on:click=”click(233)” 。这里我们可以传递任何需要传递的参数，甚至可以不传递参数： 123456789101112&lt;div id=\"app\"&gt; &lt;button v-on:click=\"click()\"&gt;click me&lt;/button&gt;&lt;/div&gt;...var app = new Vue(&#123; el: '#app', methods: &#123; click(event) &#123; console.log(typeof event); // undefined &#125; &#125;&#125;); 咦？我的 event 对象呢？怎么不见了？打印看看 arguments.length 也是 0，说明这时候确实没有实参被传入进来。T_T，那我们如果既需要传递参数，又需要用到 event 对象，这个该怎么办呢？ （三）$event 翻看 vue 文档，不难发现，其实我们可以通过将一个特殊变量 $event 传入到回调中解决这个问题： 123456789101112&lt;div id=\"app\"&gt; &lt;button v-on:click=\"click($event, 233)\"&gt;click me&lt;/button&gt;&lt;/div&gt;...var app = new Vue(&#123; el: '#app', methods: &#123; click(event, val) &#123; console.log(typeof event); // object &#125; &#125;&#125;); 好吧，这样看起来就正常了。简单总结来说： 使用不带圆括号的形式，event 对象将被自动当做实参传入； 使用带圆括号的形式，我们需要使用 $event 变量显式传入 event 对象。 $nextTick 的使用1、什么是 Vue.nextTick()？ 定义：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。 所以就衍生出了这个获取更新后的 DOM 的 Vue 方法。所以放在 Vue.nextTick()回调函数中的执行的应该是会对 DOM 进行操作的 js 代码； 理解：nextTick()，是将回调函数延迟在下一次 dom 更新数据后调用，简单的理解是：当数据更新了，在 dom 中渲染后，自动执行该函数， 12345678910111213141516171819202122232425&lt;template&gt; &lt;div class=\"hello\"&gt; &lt;div&gt; &lt;button id=\"firstBtn\" @click=\"testClick()\" ref=\"aa\"&gt;&#123;&#123;testMsg&#125;&#125;&lt;/button&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: 'HelloWorld', data () &#123; return &#123; testMsg:\"原始值\", &#125; &#125;, methods:&#123; testClick:function()&#123; let that=this; that.testMsg=\"修改后的值\"; console.log(that.$refs.aa.innerText); //that.$refs.aa获取指定DOM，输出：原始值 &#125; &#125;&#125;&lt;/script&gt; 使用 this.$nextTick() 123456789methods:&#123; testClick:function()&#123; let that=this; that.testMsg=\"修改后的值\"; that.$nextTick(function()&#123; console.log(that.$refs.aa.innerText); //输出：修改后的值 &#125;); &#125; &#125; 注意：Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。$nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，则可以在回调中获取更新后的 DOM， 2、什么时候需要用的 Vue.nextTick()？？ 1、Vue 生命周期的 created()钩子函数进行的 DOM 操作一定要放在 Vue.nextTick()的回调函数中，原因是在 created()钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的 js 代码放进 Vue.nextTick()的回调函数中。与之对应的就是 mounted 钩子函数，因为该钩子函数执行时所有的 DOM 挂载已完成。 123456created()&#123; let that=this; that.$nextTick(function()&#123; //不使用this.$nextTick()方法会报错 that.$refs.aa.innerHTML=\"created中更改了按钮内容\"; //写入到DOM元素 &#125;);&#125; 2、当项目中你想在改变 DOM 元素的数据后基于新的 dom 做点什么，对新 DOM 一系列的 js 操作都需要放进 Vue.nextTick()的回调函数中；通俗的理解是：更改数据后当你想立即使用 js 操作新的视图的时候需要使用它 123456789101112131415161718192021222324252627282930&lt;template&gt; &lt;div class=\"hello\"&gt; &lt;h3 id=\"h\"&gt;&#123;&#123;testMsg&#125;&#125;&lt;/h3&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: 'HelloWorld', data () &#123; return &#123; testMsg:\"原始值\", &#125; &#125;, methods:&#123; changeTxt:function()&#123; let that=this; that.testMsg=\"修改后的文本值\"; //vue数据改变，改变dom结构 let domTxt=document.getElementById('h').innerText; //后续js对dom的操作 console.log(domTxt); //输出可以看到vue数据修改后DOM并没有立即更新，后续的dom都不是最新的 if(domTxt===\"原始值\")&#123; console.log(\"文本data被修改后dom内容没立即更新\"); &#125;else &#123; console.log(\"文本data被修改后dom内容被马上更新了\"); &#125; &#125;, &#125;&#125;&lt;/script&gt; 正确的用法是：vue 改变 dom 元素结构后使用 vue.$nextTick()方法来实现 dom 数据更新后延迟执行后续代码 1234567891011121314changeTxt:function()&#123; let that=this; that.testMsg=\"修改后的文本值\"; //修改dom结构 that.$nextTick(function()&#123; //使用vue.$nextTick()方法可以dom数据更新后延迟执行 let domTxt=document.getElementById('h').innerText; console.log(domTxt); //输出可以看到vue数据修改后并没有DOM没有立即更新， if(domTxt===\"原始值\")&#123; console.log(\"文本data被修改后dom内容没立即更新\"); &#125;else &#123; console.log(\"文本data被修改后dom内容被马上更新了\"); &#125; &#125;);&#125; 3、在使用某个第三方插件时 ，希望在 vue 生成的某些 dom 动态发生变化时重新应用该插件，也会用到该方法，这时候就需要在 $nextTick 的回调函数中执行重新应用插件的方法。 Vue.nextTick(callback) 使用原理： 原因是，Vue 是异步执行 dom 更新的，一旦观察到数据变化，Vue 就会开启一个队列，然后把在同一个事件循环 (event loop) 当中观察到数据变化的 watcher 推送进这个队列。如果这个 watcher 被触发多次，只会被推送到队列一次。这种缓冲行为可以有效的去掉重复数据造成的不必要的计算和 DOm 操作。而在下一个事件循环时，Vue 会清空队列，并进行必要的 DOM 更新。当你设置 vm.someData = ‘new value’，DOM 并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的 DOM 更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。 Vue 组件中 data 为什么必须是函数在 new Vue() 中，data 是可以作为一个对象进行操作的，然而在 component 中，data 只能以函数的形式存在，不能直接将对象赋值给它，这并非是 Vue 自身如此设计，而是跟 JavaScript 特性相关，我们来回顾下 JavaScript 的原型链 12345678var Component = function() &#123;&#125;;Component.prototype.data = &#123; message: \"Love\"&#125;;var component1 = new Component(), component2 = new Component();component1.data.message = \"Peace\";console.log(component2.data.message); // Peace 以上两个实例都引用同一个对象，当其中一个实例属性改变时，另一个实例属性也随之改变，只有当两个实例拥有自己的作用域时，才不会互相干扰 ！！！！！这句是重点！！！！！ 123456789101112var Component = function() &#123; this.data = this.data();&#125;;Component.prototype.data = function() &#123; return &#123; message: \"Love\" &#125;;&#125;;var component1 = new Component(), component2 = new Component();component1.data.message = \"Peace\";console.log(component2.data.message); // Love v-for 与 v-if 的优先级v-for 比 v-if 优先 vue 中子组件调用父组件的方法 第一种方法是直接在子组件中通过 this.$parent.event 来调用父组件的方法 第二种方法是在子组件里用$emit 向父组件触发一个事件，父组件监听这个事件就行了 第三种是父组件把方法传入子组件中，在子组件里直接调用这个方法 解析： 第一种方法是直接在子组件中通过 this.$parent.event 来调用父组件的方法 父组件 123456789101112131415161718&lt;template&gt; &lt;div&gt; &lt;child&gt;&lt;/child&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import child from '~/components/dam/child'; export default &#123; components: &#123; child &#125;, methods: &#123; fatherMethod() &#123; console.log('测试'); &#125; &#125; &#125;;&lt;/script&gt; 子组件 1234567891011121314&lt;template&gt; &lt;div&gt; &lt;button @click=\"childMethod()\"&gt;点击&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; methods: &#123; childMethod() &#123; this.$parent.fatherMethod(); &#125; &#125; &#125;;&lt;/script&gt; 第二种方法是在子组件里用$emit 向父组件触发一个事件，父组件监听这个事件就行了 父组件 123456789101112131415161718&lt;template&gt; &lt;div&gt; &lt;child @fatherMethod=\"fatherMethod\"&gt;&lt;/child&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import child from \"~/components/dam/child\"; export default &#123; components: &#123; child &#125;, methods: &#123; fatherMethod() &#123; console.log(\"测试\"); &#125; &#125; &#125;;&lt;/script&gt; 子组件 1234567891011121314&lt;template&gt; &lt;div&gt; &lt;button @click=\"childMethod()\"&gt;点击&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; methods: &#123; childMethod() &#123; this.$emit(\"fatherMethod\"); &#125; &#125; &#125;;&lt;/script&gt; 第三种是父组件把方法传入子组件中，在子组件里直接调用这个方法 父组件 123456789101112131415161718&lt;template&gt; &lt;div&gt; &lt;child :fatherMethod=\"fatherMethod\"&gt;&lt;/child&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import child from \"~/components/dam/child\"; export default &#123; components: &#123; child &#125;, methods: &#123; fatherMethod() &#123; console.log(\"测试\"); &#125; &#125; &#125;;&lt;/script&gt; 子组件 12345678910111213141516171819202122&lt;template&gt; &lt;div&gt; &lt;button @click=\"childMethod()\"&gt;点击&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; props: &#123; fatherMethod: &#123; type: Function, default: null &#125; &#125;, methods: &#123; childMethod() &#123; if (this.fatherMethod) &#123; this.fatherMethod(); &#125; &#125; &#125; &#125;;&lt;/script&gt; vue 中父组件调用子组件的方法答案：使用$refs 父组件 123456789101112131415161718192021&lt;template&gt; &lt;div&gt; &lt;button @click=\"clickParent\"&gt;点击&lt;/button&gt; &lt;child ref=\"mychild\"&gt;&lt;/child&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import Child from \"./child\"; export default &#123; name: \"parent\", components: &#123; child: Child &#125;, methods: &#123; clickParent() &#123; this.$refs.mychild.parentHandleclick(\"嘿嘿嘿\"); // 划重点！！！！ &#125; &#125; &#125;;&lt;/script&gt; 子组件 1234567891011121314151617&lt;template&gt; &lt;div&gt; child &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; name: \"child\", props: \"someprops\", methods: &#123; parentHandleclick(e) &#123; console.log(e); &#125; &#125; &#125;;&lt;/script&gt; vue 中 keep-alive 组件的作用答案：keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。 解析： 用法也很简单： 12345&lt;keep-alive&gt; &lt;component&gt; &lt;!-- 该组件将被缓存！ --&gt; &lt;/component&gt;&lt;/keep-alive&gt; props_ include - 字符串或正则表达，只有匹配的组件会被缓存_ exclude - 字符串或正则表达式，任何匹配的组件都不会被缓存 1234567// 组件 aexport default &#123; name: \"a\", data() &#123; return &#123;&#125;; &#125;&#125;; 12345&lt;keep-alive include=\"a\"&gt; &lt;component&gt; &lt;!-- name 为 a 的组件将被缓存！ --&gt; &lt;/component&gt; &lt;/keep-alive&gt;可以保留它的状态或避免重新渲染 12345&lt;keep-alive exclude=\"a\"&gt; &lt;component&gt; &lt;!-- 除了 name 为 a 的组件都将被缓存！ --&gt; &lt;/component&gt; &lt;/keep-alive&gt;可以保留它的状态或避免重新渲染 但实际项目中,需要配合 vue-router 共同使用. router-view 也是一个组件，如果直接被包在 keep-alive 里面，所有路径匹配到的视图组件都会被缓存： 12345&lt;keep-alive&gt; &lt;router-view&gt; &lt;!-- 所有路径匹配到的视图组件都会被缓存！ --&gt; &lt;/router-view&gt;&lt;/keep-alive&gt; 如果只想 router-view 里面某个组件被缓存，怎么办？ 增加 router.meta 属性 12345678910111213141516171819// routes 配置export default [ &#123; path: \"/\", name: \"home\", component: Home, meta: &#123; keepAlive: true // 需要被缓存 &#125; &#125;, &#123; path: \"/:id\", name: \"edit\", component: Edit, meta: &#123; keepAlive: false // 不需要被缓存 &#125; &#125;]; 123456789&lt;keep-alive&gt; &lt;router-view v-if=&quot;$route.meta.keepAlive&quot;&gt; &lt;!-- 这里是会被缓存的视图组件，比如 Home！ --&gt; &lt;/router-view&gt;&lt;/keep-alive&gt;&lt;router-view v-if=&quot;!$route.meta.keepAlive&quot;&gt; &lt;!-- 这里是不被缓存的视图组件，比如 Edit！ --&gt;&lt;/router-view&gt; vue 中如何编写可复用的组件？总结组件的职能，什么需要外部控制（即 props 传啥），组件需要控制外部吗（$emit）,是否需要插槽（slot） 什么是 vue 生命周期和生命周期钩子函数？vue 的生命周期就是 vue 实例从创建到销毁的过程 解析： vue 生命周期钩子函数有哪些？ vue 如何监听键盘事件中的按键解析：参考 vue 更新数组时触发视图更新的方法1.Vue.set 可以设置对象或数组的值，通过 key 或数组索引，可以触发视图更新 12345678数组修改Vue.set(array, indexOfItem, newValue)this.array.$set(indexOfItem, newValue)对象修改Vue.set(obj, keyOfItem, newValue)this.obj.$set(keyOfItem, newValue) 2.Vue.delete 删除对象或数组中元素，通过 key 或数组索引，可以触发视图更新 12345678数组修改Vue.delete(array, indexOfItem)this.array.$delete(indexOfItem)对象修改Vue.delete(obj, keyOfItem)this.obj.$delete(keyOfItem) 3.数组对象直接修改属性，可以触发视图更新 1234this.array[0].show = true;this.array.forEach(function(item)&#123; item.show = true;&#125;); 4.splice 方法修改数组，可以触发视图更新 1this.array.splice(indexOfItem, 1, newElement) 5.数组整体修改，可以触发视图更新 123var tempArray = this.array;tempArray[0].show = true;this.array = tempArray; 6.用 Object.assign 或 lodash.assign 可以为对象添加响应式属性，可以触发视图更新 12345678//Object.assign的单层的覆盖前面的属性，不会递归的合并属性this.obj = Object.assign(&#123;&#125;,this.obj,&#123;a:1, b:2&#125;)//assign与Object.assign一样this.obj = _.assign(&#123;&#125;,this.obj,&#123;a:1, b:2&#125;)//merge会递归的合并属性this.obj = _.merge(&#123;&#125;,this.obj,&#123;a:1, b:2&#125;) 7.Vue 提供了如下的数组的变异方法，可以触发视图更新 1234567push()pop()shift()unshift()splice()sort()reverse() 什么是 vue 的计算属性？答案：先来看一下计算属性的定义：当其依赖的属性的值发生变化的时，计算属性会重新计算。反之则使用缓存中的属性值。计算属性和vue中的其它数据一样，都是响应式的，只不过它必须依赖某一个数据实现，并且只有它依赖的数据的值改变了，它才会更新。 什么是 Virtual DOM？可以看作是一个使用 javascript 模拟了 DOM 结构的树形结构 参考 响应式系统的基本原理Object.defineProperty，Vue.js 就是基于它实现「响应式系统」的。 Vue 中如何实现 proxy 代理？webpack 自带的 devServer 中集成了 http-proxy-middleware。配置 devServer 的 proxy 选项即可 123456789proxyTable: &#123; '/api': &#123; target: 'http://192.168.149.90:8080/', // 设置你调用的接口域名和端口号 changeOrigin: true, // 跨域 pathRewrite: &#123; '^/api': '/' &#125; &#125; &#125; vue 在什么情况下在数据发生改变的时候不会触发视图更新v-for 遍历的数组，当数组内容使用的是 arr[0].xx =xx 更改数据，vue 无法监测到vm.arr.length = newLength 也是无法检测的到的 vue 的优点是什么？低耦合。视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的”View”上，当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。 可重用性。你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 view 重用这段视图逻辑。 独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。 可测试。界面素来是比较难于测试的，而现在测试可以针对 ViewModel 来写。 vue 如何实现按需加载配合 webpack 设置123webpack 中提供了 require.ensure()来实现按需加载。以前引入路由是通过 import 这样的方式引入，改为 const 定义的方式进行引入。不进行页面按需加载引入方式：import home from &apos;../../common/home.vue&apos;进行页面按需加载的引入方式：const home = r =&gt; require.ensure( [], () =&gt; r (require(&apos;../../common/home.vue&apos;))) 在音乐 app 中使用的路由懒加载方式为： 1234567891011const Recommend = (resolve) =&gt; &#123; import(&apos;components/recommend/recommend&apos;).then((module) =&gt; &#123; resolve(module) &#125;)&#125;const Singer = (resolve) =&gt; &#123; import(&apos;components/singer/singer&apos;).then((module) =&gt; &#123; resolve(module) &#125;)&#125; 如何让 CSS 只在当前组件中起作用将当前组件的修改为 指令 v-el 的作用是什么?提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标.可以是 CSS 选择器，也可以是一个 HTMLElement 实例 vue-loader 是什么？使用它的用途有哪些？vue-loader 是解析 .vue 文件的一个加载器，将 template/js/style 转换成 js 模块。 用途：js 可以写 es6、style 样式可以 scss 或 less；template 可以加 jade 等。 vue怎么实现页面的权限控制利用 vue-router 的 beforeEach 事件，可以在跳转页面前判断用户的权限（利用 cookie 或 token），是否能够进入此页面，如果不能则提示错误或重定向到其他页面，在后台管理系统中这种场景经常能遇到。 $route和$router的区别答案：$route 是路由信息对象，包括path，params，hash，query，fullPath，matched，name 等路由信息参数。 而 $router 是路由实例对象，包括了路由的跳转方法，钩子函数等 watch的作用是什么watch 主要作用是监听某个数据值的变化。和计算属性相比除了没有缓存，作用是一样的。 借助 watch 还可以做一些特别的事情，例如监听页面路由，当页面跳转时，我们可以做相应的权限控制，拒绝没有权限的用户访问页面。 实现 Vue SSR其基本实现原理 app.js 作为客户端与服务端的公用入口，导出 Vue 根实例，供客户端 entry 与服务端 entry 使用。客户端 entry 主要作用挂载到 DOM 上，服务端 entry 除了创建和返回实例，还进行路由匹配与数据预获取。 webpack 为客服端打包一个 Client Bundle ，为服务端打包一个 Server Bundle 。 服务器接收请求时，会根据 url，加载相应组件，获取和解析异步数据，创建一个读取 Server Bundle 的 BundleRenderer，然后生成 html 发送给客户端。 客户端混合，客户端收到从服务端传来的 DOM 与自己的生成的 DOM 进行对比，把不相同的 DOM 激活，使其可以能够响应后续变化，这个过程称为客户端激活 。为确保混合成功，客户端与服务器端需要共享同一套数据。在服务端，可以在渲染之前获取数据，填充到 stroe 里，这样，在客户端挂载到 DOM 之前，可以直接从 store 里取数据。首屏的动态数据通过 window.__INITIAL_STATE__发送到客户端 Vue SSR 的实现，主要就是把 Vue 的组件输出成一个完整 HTML, vue-server-renderer 就是干这事的 Vue SSR需要做的事多点（输出完整 HTML），除了complier -&gt; vnode，还需如数据获取填充至 HTML、客户端混合（hydration）、缓存等等。相比于其他模板引擎（ejs, jade 等），最终要实现的目的是一样的，性能上可能要差点 Vue 组件 data 为什么必须是函数 每个组件都是 Vue 的实例。 组件共享 data 属性，当 data 的值是同一个引用类型的值时，改变其中一个会影响其他 Vue computed 实现 建立与其他属性（如：data、 Store）的联系； 属性改变后，通知计算属性重新计算 实现时，主要如下 初始化 data， 使用 Object.defineProperty 把这些属性全部转为 getter/setter。 初始化 computed, 遍历 computed 里的每个属性，每个 computed 属性都是一个 watch 实例。每个属性提供的函数作为属性的 getter，使用 Object.defineProperty 转化。 Object.defineProperty getter 依赖收集。用于依赖发生变化时，触发属性重新计算。 若出现当前 computed 计算属性嵌套其他 computed 计算属性时，先进行其他的依赖收集 Vue complier 实现 模板解析这种事，本质是将数据转化为一段 html ，最开始出现在后端，经过各种处理吐给前端。随着各种 mv* 的兴起，模板解析交由前端处理。 总的来说，Vue complier 是将 template 转化成一个 render 字符串。 可以简单理解成以下步骤： parse 过程，将 template 利用正则转化成 AST 抽象语法树。 optimize 过程，标记静态节点，后 diff 过程跳过静态节点，提升性能。 generate 过程，生成 render 字符串 怎么快速定位哪个组件出现性能问题 用 timeline 工具。 大意是通过 timeline 来查看每个函数的调用时常，定位出哪个函数的问题，从而能判断哪个组件出了问题","categories":[{"name":"前端面试题","slug":"前端面试题","permalink":"http://www.bluedream.top/categories/前端面试题/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://www.bluedream.top/tags/vue/"},{"name":"MVVM","slug":"MVVM","permalink":"http://www.bluedream.top/tags/MVVM/"}]},{"title":"前端知识点","slug":"前端知识点","date":"2019-08-27T12:30:00.000Z","updated":"2019-09-28T09:41:26.905Z","comments":true,"path":"前端面试题/前端知识点.html","link":"","permalink":"http://www.bluedream.top/前端面试题/前端知识点.html","excerpt":"","text":"前端开发知识点HTML&amp;CSS对Web标准的理解、浏览器内核差异、兼容性、hack、CSS基本功：布局、盒子模型、选择器优先级、HTML5、CSS3、Flexbox JavaScript：数据类型、运算、对象、Function、继承、闭包、作用域、原型链、事件、RegExp、JSON、Ajax、DOM、BOM、内存泄漏、跨域、异步装载、模板引擎、前端MVC、路由、模块化、Canvas、ECMAScript 其他： 移动端、响应式、自动化构建、HTTP、离线存储、WEB安全、优化、重构、团队协作、可维护、易用性、SEO、UED、架构、职业生涯、快速学习能力 DOM结构 —— 两个节点之间可能存在哪些关系以及如何在节点之间任意移动。 DOM操作 —— 如何添加、移除、移动、复制、创建和查找节点等。 事件 —— 如何使用事件，以及IE和标准DOM事件模型之间存在的差别。 XMLHttpRequest —— 这是什么、怎样完整地执行一次GET请求、怎样检测错误。 严格模式与混杂模式 —— 如何触发这两种模式，区分它们有何意义。 盒模型 —— 外边距、内边距和边框之间的关系，及IE8以下版本的浏览器中的盒模型 块级元素与行内元素 —— 怎么用CSS控制它们、以及如何合理的使用它们 浮动元素 —— 怎么使用它们、它们有什么问题以及怎么解决这些问题。 HTML与XHTML —— 二者有什么区别，你觉得应该使用哪一个并说出理由。 JSON —— 作用、用途、设计结构 前端必备技能 基础 HTML / CSS 编程语言：Java / Python / PHP / Ruby等等 Web框架，如Spring MVC、Flask、Laravel等等 HTTP CGI基本原理 XML和JSON处理。。 中级篇 数据结构与算法 面向对象编程 CMS 高级篇 函数式编程 领域驱动设计 MVC / MVVM / MV* 安全性（如跨域） 操作系统原理 调试 远程调试 工程化 版本管理 单元测试 缓存篇 应用层缓存 数据库端缓存 分布式缓存 网络与架构 均衡负载 并发处理 性能优化 运行环境优化，如JVM 基础设施 Docker 自动化部署 依赖管理 包管理 Linux下包创建、管理 打包脚本编写 Web容器，如Jboss 数据持久化 SQL Database ORM DBMS 数据库 查询性能优化 结构优化 主从复制、主主复制等等 伸缩性与高可用性 备份恢复与容灾 安全 认证与会话管理 加密解密 XSS/CSRF/SQL注入 监控 应用性能监控 异常监控 日志 服务 REST SOA / RPC 消息 JMS IPC 其他 API设计 PS相关PNG,GIF,JPG的区别及如何选 GIF： 8位像素，256色 无损压缩 支持简单动画 支持boolean透明 适合简单动画 JPEG： 颜色限于256 有损压缩 可控制压缩质量 不支持透明 适合照片 PNG： 有PNG8和truecolor PNG PNG8类似GIF颜色上限为256，文件小，支持alpha透明度，无动画 适合图标、背景、按钮 Git相关git fetch和git pull的区别 git pull：相当于是从远程获取最新版本并merge到本地 git fetch：相当于是从远程获取最新版本到本地，不会自动merge SEO相关前端需要注意哪些SEO 合理的title、description、keywords：搜索对着三项的权重逐个减小，title值强调重点即可，重要关键词出现不要超过2次，而且要靠前，不同页面title要有所不同；description把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面description有所不同；keywords列举出重要关键词即可 语义化的HTML代码，符合W3C规范：语义化代码让搜索引擎容易理解网页 重要内容HTML代码放在最前：搜索引擎抓取HTML顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取 重要内容不要用js输出：爬虫不会执行js获取内容 少用iframe：搜索引擎不会抓取iframe中的内容 非装饰性图片必须加alt 提高网站速度：网站速度是搜索引擎排序的一个重要指标 如何做SEO优化? 标题与关键词 设置有吸引力切合实际的标题，标题中要包含所做的关键词 网站结构目录 最好不要超过三级，每级有“面包屑导航”，使网站成树状结构分布 页面元素 给图片标注”Alt”可以让搜索引擎更友好的收录 网站内容 每个月每天有规律的更新网站的内容，会使搜索引擎更加喜欢 友情链接 对方一定要是正规网站，每天有专业的团队或者个人维护更新 内链的布置 使网站形成类似蜘蛛网的结构，不会出现单独连接的页面或链接 流量分析 通过统计工具(百度统计，CNZZ)分析流量来源，指导下一步的SEO 存储相关浏览器本地存储 在较高版本的浏览器中，js提供了sessionStorage和globalStorage。在HTML5中提供了localStorage来取代globalStorage html5中的Web Storage包括了两种存储方式：sessionStorage和localStorage sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储 而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的 web storage和cookie的区别** Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用 除此之外，WebStorage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie 但是cookie也是不可以或缺的：cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生 浏览器的支持除了IE７及以下不支持外，其他标准浏览器都完全支持(ie及FF需在web服务器里运行)，值得一提的是IE总是办好事，例如IE7、IE6中的userData其实就是javascript本地存储的解决方案。通过简单的代码封装可以统一到所有的浏览器都支持web storage localStorage和sessionStorage都具有相同的操作方法，例如setItem、getItem和removeItem等 cookie 和session 的区别： session： 是一个抽象概念，开发者为了实现中断和继续等操作，将 user agent和 server 之间一对一的交互，抽象为“会话”，进而衍生出“会话状态”，也就是 session 的概念 cookie：它是一个世纪存在的东西，http 协议中定义在 header 中的字段，可以认为是 session 的一种后端无状态实现 现在我们常说的 session，是为了绕开 cookie 的各种限制，通常借助 cookie本身和后端存储实现的，一种更高级的会话状态实现 session 的常见实现要借助cookie来发送 sessionID 1、cookie数据存放在客户的浏览器上，session数据放在服务器上。 2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗 考虑到安全应当使用session。 3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能 考虑到减轻服务器性能方面，应当使用COOKIE。 4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。 5、所以个人建议： 将登陆信息等重要信息存放为SESSION 其他信息如果需要保留，可以放在COOKIE中 描述 cookies、sessionStorage 和 localStorage 的区别？ 与服务器交互： cookie 是网站为了标示用户身份而储存在用户本地终端上的数据（通常经过加密） cookie 始终会在同源 http 请求头中携带（即使不需要），在浏览器和服务器间来回传递 sessionStorage 和 localStorage 不会自动把数据发给服务器，仅在本地保存 存储大小： cookie 数据根据不同浏览器限制，大小一般不能超过 4k sessionStorage 和 localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大 有期时间： localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据 sessionStorage 数据在当前浏览器窗口关闭后自动删除 cookie 设置的cookie过期时间之前一直有效，与浏览器是否关闭无关 谈谈Cookie的弊端cookie虽然在持久保存客户端数据提供了方便，分担了服务器存储的负担，但还是有很多局限性的 1.每个特定的域名下最多生成20个cookie， 个数有限制（IE6或更低版本最多20个cookie） 2.Firefox、IE7和之后的版本最后可以有50个cookie，chrome和Safari没有做硬性限制 3.IE 和 Opera 会清理近期最少使用的 cookie，Firefox 会随机清理 cookie 4.cookie 的最大大约为 4096 字节，为了兼容性，一般设置不超过 4095 字节 5.如果 cookie 被人拦截了，就可以取得所有的 session 信息 重构相关谈谈你对重构的理解 网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。也就是说是在不改变UI的情况下，对网站进行优化， 在扩展的同时保持一致的UI 对于传统的网站来说重构通常是： 表格(table)布局改为DIV+CSS 使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的) 对于移动平台的优化 针对于SEO进行优化 深层次的网站重构应该考虑的方面 页面重构怎么操作？** 网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI 对于传统的网站来说重构通常可以考虑的方面是： 升级第三方依赖 使用HTML5、CSS3、ES6 新特性 加入响应式布局 统一代码风格规范 减少代码间的耦合 压缩/合并JS、CSS、image等静态资源(通常是由服务器来解决) 程序的性能优化 采用CDN来加速资源加载 对于JS DOM的优化 HTTP服务器的文件缓存 表格(table)布局改为DIV+CSS 使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的) 对于移动平台的优化 针对于SEO进行优化 深层次的网站重构应该考虑的方面 让代码保持弹性 严格按规范编写代码 设计可扩展的API 代替旧有的框架、语言(如VB) 增强用户体验 通常来说对于速度的优化也包含在重构中 前端相关前端页面有哪三层构成，分别是什么？作用是什么？ 结构层：由 (X)HTML 标记语言负责，解决页面“内容是什么”的问题 表示层：由 CSS 负责，解决页面“如何显示内容”的问题 行为层：由 JS 脚本负责，解决页面上“内容应该如何对事件作出反应”的问题 Web 前端开发的注意事项？ 特别设置 meta 标签 viewport 百分比布局宽度，结合 box-sizing: border-box; 使用 rem 作为计算单位。rem 只参照跟节点 html 的字体大小计算 使用 css3 新特性。弹性盒模型、多列布局、媒体查询等 多机型、多尺寸、多系统覆盖测试 说说你对前端架构师的理解负责前端团队的管理及与其他团队的协调工作，提升团队成员能力和整体效率；带领团队完成研发工具及平台前端部分的设计、研发和维护； 带领团队进行前端领域前沿技术研究及新技术调研，保证团队的技术领先负责前端开发规范制定、功能模块化设计、公共组件搭建等工作，并组织培训 平时如何管理你的项目？ 规定全局样式、公共脚本 严格要求代码注释(html/js/css) 严格要求静态资源存放路径 Git 提交必须填写说明 说说最近最流行的一些东西吧？ES6、Node、React、Webpack 什么样的前端代码是好的高复用低耦合，这样文件小，好维护，而且好扩展。 移动端相关你怎么看待 Web App/hybrid App/Native App？（移动端前端 和 Web 前端区别？） Web App(HTML5)：采用HTML5生存在浏览器中的应用，不需要下载安装 优点：开发成本低，迭代更新容易，不需用户升级，跨多个平台和终端 缺点：消息推送不够及时，支持图形和动画效果较差，功能使用限制（相机、GPS等） Hybrid App(混合开发)：UI WebView，需要下载安装 优点：接近 Native App 的体验，部分支持离线功能 缺点：性能速度较慢，未知的部署时间，受限于技术尚不成熟 Native App(原生开发)：依托于操作系统，有很强的交互，需要用户下载安装使用 优点：用户体验完美，支持离线工作，可访问本地资源（通讯录，相册） 缺点：开发成本高（多系统），开发成本高（版本更新），需要应用商店的审核 在设计 Web APP 时，应当遵循以下几点 简化不重要的动画/动效/图形文字样式 少用手势，避免与浏览器手势冲突 减少页面内容，页面跳转次数，尽量在当前页面显示 增强 Loading 趣味性，增强页面主次关系 移动端（Android、IOS）怎么做好用户体验? 清晰的视觉纵线 信息的分组、极致的减法 利用选择代替输入 标签及文字的排布方式 依靠明文确认密码 合理的键盘利用 其他如何设计突发大规模并发架构？ 及时响应(NoSQL缓存) 数据安全(数据备份) 负载均衡 列举IE与其他浏览器不一样的特性？ IE 的渲染引擎是 Trident 与 W3C 标准差异较大：例如盒子模型的怪异模式 JS 方面有很多独立的方法，例如事件处理不同：绑定/删除事件，阻止冒泡，阻止默认事件等 CSS 方面也有自己独有的处理方式，例如设置透明，低版本IE中使用滤镜的方式 是否了解公钥加密和私钥加密？ 私钥用于对数据进行签名，公钥用于对签名进行验证 网站在浏览器端用公钥加密敏感数据，然后在服务器端再用私钥解密 WEB应用从服务器主动推送Data到客户端有那些方式？ AJAX 轮询 html5 服务器推送事件(new EventSource(SERVER_URL)).addEventListener(&quot;message&quot;, func); html5 Websocket (new WebSocket(SERVER_URL)).addEventListener(&quot;message&quot;, func); 不可见的iframe WebSocket通过Flash XHR长时间连接 XHR Multipart Streaming script标签的长时间连接(可跨域) 列举IE与其他浏览器不一样的特性？事件不同之处： 触发事件的元素被认为是目标（target）。而在 IE 中，目标包含在 event 对象的 srcElement 属性； 获取字符代码、如果按键代表一个字符（shift、ctrl、alt除外），IE 的 keyCode 会返回字符代码（Unicode），DOM 中按键的代码和字符是分离的，要获取字符代码，需要使用 charCode 属性； 阻止某个事件的默认行为，IE 中阻止某个事件的默认行为，必须将 returnValue 属性设置为 false，Mozilla 中，需要调用 preventDefault() 方法； 停止事件冒泡，IE 中阻止事件进一步冒泡，需要设置 cancelBubble 为 true，Mozzilla 中，需要调用 stopPropagation() 什么叫优雅降级和渐进增强？ 优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会针对旧版本的IE进行降级处理了,使之在旧式浏览器上以某种形式降级体验却不至于完全不能用 渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新版本浏览器才支持的功能,向页面增加不影响基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。 如：默认使用flash上传，但如果浏览器支持 HTML5 的文件上传功能，则使用HTML5实现更好的体验 一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好） 注：这题胜在区分度高，知识点覆盖广，再不懂的人，也能答出几句，而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、 到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等 详细版： 1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理; 2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法; 3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求; 4、进行HTTP协议会话，客户端发送报头(请求报头); 5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器; 6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理; 7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304; 8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存; 9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie; 10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。 简洁版： 浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求； 服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）； 浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）； 载入解析到的资源文件，渲染页面，完成","categories":[{"name":"前端面试题","slug":"前端面试题","permalink":"http://www.bluedream.top/categories/前端面试题/"}],"tags":[{"name":"知识点","slug":"知识点","permalink":"http://www.bluedream.top/tags/知识点/"},{"name":"前端技能","slug":"前端技能","permalink":"http://www.bluedream.top/tags/前端技能/"},{"name":"PS","slug":"PS","permalink":"http://www.bluedream.top/tags/PS/"},{"name":"Git","slug":"Git","permalink":"http://www.bluedream.top/tags/Git/"},{"name":"SEO","slug":"SEO","permalink":"http://www.bluedream.top/tags/SEO/"},{"name":"存储","slug":"存储","permalink":"http://www.bluedream.top/tags/存储/"},{"name":"重构","slug":"重构","permalink":"http://www.bluedream.top/tags/重构/"},{"name":"前端","slug":"前端","permalink":"http://www.bluedream.top/tags/前端/"},{"name":"移动端","slug":"移动端","permalink":"http://www.bluedream.top/tags/移动端/"}]},{"title":"welcome","slug":"welcome","date":"2019-08-25T10:26:47.000Z","updated":"2019-09-12T14:21:32.391Z","comments":true,"path":"其他/welcome.html","link":"","permalink":"http://www.bluedream.top/其他/welcome.html","excerpt":"Welcome to QinWei‘s blog! 本博客有以下八个分类： 前端知识点 全栈知识点 前端面试题 全栈面试题 链接 随笔 散文 其他 This is my first post.If you have any problems in using this website , you can contact me by QQ： 124729081 or Wechat：qwqw75.","text":"Welcome to QinWei‘s blog! 本博客有以下八个分类： 前端知识点 全栈知识点 前端面试题 全栈面试题 链接 随笔 散文 其他 This is my first post.If you have any problems in using this website , you can contact me by QQ： 124729081 or Wechat：qwqw75. This website is built usingHexo, and here are some brief introduction. 文件夹目录 node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题 _config.yml: 博客的配置文件 Create a new post（新建日志）1$ hexo new \"My New Post\" More info: Writing Run server（运行服务）1$ hexo server 使用ctrl+c可以把服务关掉。 More info: Server Generate static files（生成静态文件）1$ hexo generate More info: Generating Deploy to remote sites（部署到远程站点）1$ hexo deploy More info: Deployment 更改样式后网站没有生效确认非缓存问题后，执行 hexo clean 再进行生成上传。 清理之前在public文件夹中生成的文件 如何在文章中使用图标先到 fontawesome 找到你需要的图标名，比如：book，按以下格式使用： 1&lt;i class=&quot;icon icon-book&quot;&gt;&lt;/i&gt; 图标样式前缀均为 icon，此外还有 5 个图标大小调节类和 1 个间距类。 1234567891011121314&lt;!-- 1.3倍大小 --&gt;&lt;i class=&quot;icon icon-book icon-lg&quot;&gt;&lt;/i&gt;&lt;!-- 2倍大小 --&gt;&lt;i class=&quot;icon icon-book icon-2x&quot;&gt;&lt;/i&gt;&lt;!-- 3倍大小 --&gt;&lt;i class=&quot;icon icon-book icon-3x&quot;&gt;&lt;/i&gt;&lt;!-- 4倍大小 --&gt;&lt;i class=&quot;icon icon-book icon-4x&quot;&gt;&lt;/i&gt;&lt;!-- 5倍大小 --&gt;&lt;i class=&quot;icon icon-book icon-5x&quot;&gt;&lt;/i&gt;&lt;!-- 5px右边距 --&gt;&lt;i class=&quot;icon icon-book icon-pr&quot;&gt;&lt;/i&gt;&lt;!-- 5px左边距 --&gt;&lt;i class=&quot;icon icon-book icon-pl&quot;&gt;&lt;/i&gt; 个别图标无法显示如果你的浏览器安装了 ADBlock，它会屏蔽 SNS 相关的内容，比如：Github。 解决办法：可配置 ADBlock 不在你的站点运行。 作者：秦伟","categories":[{"name":"其他","slug":"其他","permalink":"http://www.bluedream.top/categories/其他/"}],"tags":[{"name":"欢迎","slug":"欢迎","permalink":"http://www.bluedream.top/tags/欢迎/"},{"name":"介绍","slug":"介绍","permalink":"http://www.bluedream.top/tags/介绍/"},{"name":"Hexo","slug":"Hexo","permalink":"http://www.bluedream.top/tags/Hexo/"}]}]}